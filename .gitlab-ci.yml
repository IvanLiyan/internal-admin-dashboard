stages:
  - install
  - test
  - deploy

install dependencies:
  stage: install
  image: gitlab.i.wish.com:443/dependency-proxy/dependency_proxy/containers/node:18-alpine3.17
  before_script:
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - yarn install --frozen-lockfile
  artifacts:
    paths:
      - node_modules/
  except:
    - schedules

lint:
  stage: test
  image: gitlab.i.wish.com:443/dependency-proxy/dependency_proxy/containers/node:18-alpine3.17
  before_script:
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
  script:
    - yarn lint
  dependencies:
    - install dependencies

build staging:
  stage: test
  image: gitlab.i.wish.com:443/dependency-proxy/dependency_proxy/containers/node:18-alpine3.17
  before_script:
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    # we want the `development` configs on staging, even though we are optimizing the build for prod
    - cp .env.development .env.production
    - yarn build
  artifacts:
    when: always
    paths:
      - out
  dependencies:
    - install dependencies

build prod:
  stage: test
  image: gitlab.i.wish.com:443/dependency-proxy/dependency_proxy/containers/node:18-alpine3.17
  before_script:
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - yarn build
  artifacts:
    when: always
    paths:
      - out
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - install dependencies

deploy staging:
  stage: deploy
  image: registry-gitlab.i.wish.com/contextlogic/internal-admin-dashboard/aws-base-with-brotli:latest
  before_script:
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - sh scripts/deploy.sh -s=internal-admin-tools-staging
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: manual
      allow_failure: true
  tags: ["internal-admin-dashboard-staging"]
  dependencies:
    - build staging

deploy production:
  stage: deploy
  image: registry-gitlab.i.wish.com/contextlogic/internal-admin-dashboard/aws-base-with-brotli:latest
  before_script:
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - sh scripts/deploy.sh -s=internal-admin-tools-production
  environment:
    name: production
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags: ["internal-admin-dashboard"]
  dependencies:
    - build prod
