/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT IT DIRECTLY.
 * DO NOT ATTEMPT TO RESOLVE MERGE CONFLICTS MANUALLY.
 * RUN `./finch generate-graphql-types` regenerate it.
 */

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ObjectIdType: string;
  DateTime: unknown;
  BigInt: number;
  JSONString: string;
  GenericScalar: unknown;
};

export type AcceptDeComplianceTermsOfService = {
  readonly __typename?: "AcceptDEComplianceTermsOfService";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type AcceptEuComplianceTermsOfService = {
  readonly __typename?: "AcceptEUComplianceTermsOfService";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type AcceptFrComplianceTermsOfService = {
  readonly __typename?: "AcceptFRComplianceTermsOfService";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type AcceptMerchantPolicy = {
  readonly __typename?: "AcceptMerchantPolicy";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type AcceptMerchantPolicyInput = {
  readonly agreed: Scalars["Boolean"];
  readonly source: MerchantPolicyAgreementSource;
};

export type AcceptTermsOfService = {
  readonly __typename?: "AcceptTermsOfService";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type AcceptTermsOfServiceInput = {
  readonly tosVersion: Scalars["Int"];
  readonly tosRegion?: Maybe<TermsOfServiceRegionType>;
};

export type AccountBalanceType = "CONFIRMED" | "PENDING";

export type ActionRequiredOrdersCsvDownload = {
  readonly __typename?: "ActionRequiredOrdersCsvDownload";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type ActionRequiredOrdersCsvDownloadInput = {
  readonly query?: Maybe<Scalars["String"]>;
  readonly searchType?: Maybe<ActionRequiredSearchType>;
  readonly offset?: Maybe<Scalars["Int"]>;
  readonly sort?: Maybe<ActionRequiredSort>;
  readonly filter?: Maybe<CsvExportFilterType>;
  readonly startDate?: Maybe<DatetimeInput>;
  readonly endDate?: Maybe<DatetimeInput>;
  readonly wishExpressOnly?: Maybe<Scalars["Boolean"]>;
};

export type ActionRequiredSearchType =
  | "ORDER_ID"
  | "PRODUCT_ID"
  | "TRACKING_NUMBER"
  | "USER_NAME"
  | "TRANSACTION_ID";

export type ActionRequiredSort = {
  readonly field: ActionRequiredSortFieldType;
  readonly order: SortOrderType;
};

export type ActionRequiredSortFieldType = "ORDER_TIME" | "RELEASED_TIME";

export type AdaptivePolicyAdminMutations = {
  readonly __typename?: "AdaptivePolicyAdminMutations";
  readonly manualEnrollUpload?: Maybe<AdaptivePolicyManualEnrollUpload>;
  readonly manualEnroll?: Maybe<AdaptivePolicyManualEnroll>;
};

export type AdaptivePolicyAdminMutationsManualEnrollUploadArgs = {
  input: AdaptivePolicyManualEnrollUploadInput;
};

export type AdaptivePolicyAdminMutationsManualEnrollArgs = {
  input: AdaptivePolicyManualEnrollConfirmInput;
};

export type AdaptivePolicyManualEnroll = {
  readonly __typename?: "AdaptivePolicyManualEnroll";
  readonly ok: Scalars["Boolean"];
  readonly logs?: Maybe<Scalars["String"]>;
};

export type AdaptivePolicyManualEnrollConfirmInput = {
  readonly fileUrl: Scalars["String"];
  readonly allPrivileges: Scalars["Boolean"];
  readonly resetRevenueShare: Scalars["Boolean"];
};

export type AdaptivePolicyManualEnrollSchema = {
  readonly __typename?: "AdaptivePolicyManualEnrollSchema";
  readonly merchantId: Scalars["ObjectIdType"];
  readonly policyTier: Scalars["String"];
  readonly reason: Scalars["String"];
};

export type AdaptivePolicyManualEnrollUpload = {
  readonly __typename?: "AdaptivePolicyManualEnrollUpload";
  readonly ok: Scalars["Boolean"];
  readonly logs?: Maybe<Scalars["String"]>;
  readonly updateList: ReadonlyArray<AdaptivePolicyManualEnrollSchema>;
};

export type AdaptivePolicyManualEnrollUploadInput = {
  readonly fileUrl: Scalars["String"];
};

export type AddProductPostInput = {
  readonly merchantId: Scalars["ObjectIdType"];
  readonly productId: Scalars["ObjectIdType"];
  readonly sourceBucket: Scalars["String"];
  readonly sourceBucketKey: Scalars["String"];
};

export type AddProductPostMutation = {
  readonly __typename?: "AddProductPostMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly errorCode?: Maybe<ProductPostErrorCode>;
};

export type AddressInput = {
  readonly name: Scalars["String"];
  readonly streetAddress1: Scalars["String"];
  readonly streetAddress2?: Maybe<Scalars["String"]>;
  readonly streetAddress3?: Maybe<Scalars["String"]>;
  readonly city: Scalars["String"];
  readonly county?: Maybe<Scalars["String"]>;
  readonly state: Scalars["String"];
  readonly neighborhood?: Maybe<Scalars["String"]>;
  readonly region?: Maybe<Scalars["String"]>;
  readonly countryCode?: Maybe<CountryCode>;
  readonly zipcode?: Maybe<Scalars["String"]>;
  readonly phoneNumber?: Maybe<Scalars["String"]>;
};

export type AddressSchema = {
  readonly __typename?: "AddressSchema";
  readonly name: Scalars["String"];
  readonly streetAddress1: Scalars["String"];
  readonly streetAddress2?: Maybe<Scalars["String"]>;
  readonly city: Scalars["String"];
  readonly zipcode?: Maybe<Scalars["String"]>;
  readonly countryCode: CountryCode;
  readonly state?: Maybe<Scalars["String"]>;
  readonly county?: Maybe<Scalars["String"]>;
  readonly country: Country;
  readonly phoneNumber?: Maybe<Scalars["String"]>;
};

export type AddressUpdateError = {
  readonly __typename?: "AddressUpdateError";
  readonly orderId: Scalars["ObjectIdType"];
  readonly message: Scalars["String"];
};

export type AddressVerificationState =
  | "SYSTEM_VERIFIED"
  | "NOT_VERIFIED"
  | "REQUEST_VERIFICATION"
  | "USER_VERIFIED"
  | "WPS_VERIFIED";

export type AddTrademark = {
  readonly __typename?: "AddTrademark";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type AddTrademarkInput = {
  readonly brandInfoId: Scalars["ObjectIdType"];
  readonly trademarkInfo: BrandPartnerTrademarkInfoInputObject;
};

export type AlertSchema = {
  readonly __typename?: "AlertSchema";
  readonly link?: Maybe<Scalars["String"]>;
  readonly description: Scalars["String"];
  readonly date?: Maybe<Datetime>;
  readonly sentiment?: Maybe<AlertSentiment>;
};

export type AlertSentiment = "INFO" | "WARNING" | "NEGATIVE";

export type AnalyticsServiceMutations = {
  readonly __typename?: "AnalyticsServiceMutations";
  readonly log?: Maybe<LogToTreasureData>;
};

export type AnalyticsServiceMutationsLogArgs = {
  input: LogToTreasureDataInput;
};

export type AnnouncementAdmin = {
  readonly __typename?: "AnnouncementAdmin";
  readonly announcements?: Maybe<AnnouncementListSchema>;
  readonly announcement?: Maybe<AnnouncementSchema>;
  readonly options?: Maybe<AnnouncementOptionsSchema>;
  readonly announcementJobs?: Maybe<ReadonlyArray<AnnouncementJobSchema>>;
  readonly announcementJob?: Maybe<AnnouncementJobSchema>;
  readonly announcementJobCount: Scalars["Int"];
  readonly csv?: Maybe<CsvAnnouncementSchema>;
};

export type AnnouncementAdminAnnouncementsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  senderId?: Maybe<Scalars["ObjectIdType"]>;
  announcementType?: Maybe<AnnouncementType>;
};

export type AnnouncementAdminAnnouncementArgs = {
  id: Scalars["String"];
};

export type AnnouncementAdminAnnouncementJobsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
};

export type AnnouncementAdminAnnouncementJobArgs = {
  id: Scalars["String"];
};

export type AnnouncementAdminMutations = {
  readonly __typename?: "AnnouncementAdminMutations";
  readonly createSystemUpdateBaseAnnouncement?: Maybe<CreateSystemUpdateBaseAnnouncement>;
  readonly updateSystemUpdateBaseAnnouncement?: Maybe<UpdateSystemUpdateBaseAnnouncement>;
  readonly createBdBaseAnnouncement?: Maybe<CreateBdBaseAnnouncement>;
  readonly publishAnnouncement?: Maybe<PublishAnnouncement>;
};

export type AnnouncementAdminMutationsCreateSystemUpdateBaseAnnouncementArgs = {
  input: CreateSystemUpdateBaseAnnouncementInput;
};

export type AnnouncementAdminMutationsUpdateSystemUpdateBaseAnnouncementArgs = {
  input: UpdateSystemUpdateBaseAnnouncementInput;
};

export type AnnouncementAdminMutationsCreateBdBaseAnnouncementArgs = {
  input: BdBaseAnnouncementInput;
};

export type AnnouncementAdminMutationsPublishAnnouncementArgs = {
  input: PublishAnnouncementInput;
};

export type AnnouncementAudienceGroup = {
  readonly __typename?: "AnnouncementAudienceGroup";
  readonly title: Scalars["String"];
  readonly value: AudienceGroup;
};

export type AnnouncementAudienceSourceType =
  | "AUDIENCE_SOURCE_TYPE_UNSPECIFIED"
  | "AUDIENCE_SOURCE_TYPE_ENUM"
  | "AUDIENCE_SOURCE_TYPE_CSV";

export type AnnouncementCategory =
  | "CATEGORY_UNSPECIFIED"
  | "CATEGORY_ACCOUNTSETTINGS"
  | "CATEGORY_API"
  | "CATEGORY_INSIGHTS"
  | "CATEGORY_INTELLECTUALPROPERTY"
  | "CATEGORY_LOCALCURRENCY"
  | "CATEGORY_LOGISTICS"
  | "CATEGORY_LOGISTICSPRICING"
  | "CATEGORY_ORDERS"
  | "CATEGORY_PAYMENTS"
  | "CATEGORY_POLICIESANDTERMS"
  | "CATEGORY_PRODUCTS"
  | "CATEGORY_SHIPPINGCARRIERS"
  | "CATEGORY_TAX";

export type AnnouncementCategorySchema = {
  readonly __typename?: "AnnouncementCategorySchema";
  readonly type: MerchantAnnouncementCategory;
  readonly text: Scalars["String"];
};

export type AnnouncementCategorySchemaV2 = {
  readonly __typename?: "AnnouncementCategorySchemaV2";
  readonly type: AnnouncementCategory;
  readonly text: Scalars["String"];
};

export type AnnouncementContentSchema = {
  readonly __typename?: "AnnouncementContentSchema";
  readonly locale: AnnouncementLocale;
  readonly title: Scalars["String"];
  readonly message: Scalars["String"];
  readonly link?: Maybe<Scalars["String"]>;
  readonly ctaText?: Maybe<Scalars["String"]>;
  readonly ctaDueDate?: Maybe<Datetime>;
};

export type AnnouncementContentType =
  | "ANNOUNCEMENT_CONTENT_TYPE_UNSPECIFIED"
  | "ANNOUNCEMENT_CONTENT_TYPE_STATIC"
  | "ANNOUNCEMENT_CONTENT_TYPE_DYNAMIC";

export type AnnouncementCsvFieldsSchemaInput = {
  readonly sourceS3FileName: Scalars["String"];
  readonly sourceFileUrl: Scalars["String"];
  readonly placeholders?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly columnMapping: ReadonlyArray<CsvColumnMappingEntryInput>;
};

export type AnnouncementJobSchema = {
  readonly __typename?: "AnnouncementJobSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly createdTime: Datetime;
  readonly jobType: AnnouncementJobType;
  readonly csvS3Url: Scalars["String"];
  readonly s3Filename: Scalars["String"];
  readonly sender: UserSchema;
  readonly state: AnnouncementJobState;
  readonly titleEn: Scalars["String"];
  readonly messageTemplateEn: Scalars["String"];
  readonly messageTemplateCn?: Maybe<Scalars["String"]>;
  readonly midCount: Scalars["Int"];
  readonly baseAnnouncementTotal?: Maybe<Scalars["Int"]>;
  readonly baseAnnouncementCount: Scalars["Int"];
  readonly annUrlsCsvFileUrl?: Maybe<Scalars["String"]>;
};

export type AnnouncementJobState =
  | "COMPLETE"
  | "CREATING_ANNOUNCEMENTS"
  | "PARSING_CSV"
  | "RETRIEVING_MERCHANTS"
  | "NEW"
  | "DOWNLOADING_CSV";

export type AnnouncementJobType = "STATIC_TEXT" | "DYNAMIC_TEXT";

export type AnnouncementListSchema = {
  readonly __typename?: "AnnouncementListSchema";
  readonly announcements?: Maybe<ReadonlyArray<AnnouncementSchema>>;
  readonly count?: Maybe<Scalars["Int"]>;
};

export type AnnouncementLocale =
  | "LOCALE_UNSPECIFIED"
  | "LOCALE_EN"
  | "LOCALE_CN"
  | "LOCALE_PT_BR"
  | "LOCALE_ES_LA"
  | "LOCALE_FR_FR"
  | "LOCALE_DE_DE"
  | "LOCALE_IT_IT"
  | "LOCALE_JA_JP"
  | "LOCALE_KO_KR";

export type AnnouncementMutations = {
  readonly __typename?: "AnnouncementMutations";
  readonly admin?: Maybe<AnnouncementAdminMutations>;
};

export type AnnouncementOptionsSchema = {
  readonly __typename?: "AnnouncementOptionsSchema";
  readonly types?: Maybe<ReadonlyArray<AnnouncementType>>;
  readonly audienceGroups?: Maybe<ReadonlyArray<AnnouncementAudienceGroup>>;
};

export type AnnouncementProgram =
  | "PROGRAM_UNSPECIFIED"
  | "PROGRAM_ADVANCED_LOGISTICS"
  | "PROGRAM_EPC"
  | "PROGRAM_FBW_FBS"
  | "PROGRAM_MERCHANT_STANDING"
  | "PROGRAM_PARTIAL_REFUNDS"
  | "PROGRAM_PRODUCT_BOOST"
  | "PROGRAM_RETURNS_PROGRAM"
  | "PROGRAM_WISH_EXPRESS"
  | "PROGRAM_WISHPOST"
  | "PROGRAM_MERCHANT_FUNDED_PROMOTIONS"
  | "PROGRAM_VIDEOS"
  | "PROGRAM_WISH_STANDARDS";

export type AnnouncementProgramSchema = {
  readonly __typename?: "AnnouncementProgramSchema";
  readonly type: MerchantAnnouncementProgram;
  readonly text: Scalars["String"];
};

export type AnnouncementProgramSchemaV2 = {
  readonly __typename?: "AnnouncementProgramSchemaV2";
  readonly type: AnnouncementProgram;
  readonly text: Scalars["String"];
};

export type AnnouncementSchema = {
  readonly __typename?: "AnnouncementSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly type: AnnouncementType;
  readonly publishDate?: Maybe<Datetime>;
  readonly expiryDate?: Maybe<Datetime>;
  readonly audienceSourceType: AnnouncementAudienceSourceType;
  readonly audienceGroups?: Maybe<ReadonlyArray<AudienceGroup>>;
  readonly merchantIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly merchants?: Maybe<ReadonlyArray<UserSchema>>;
  readonly contentType?: Maybe<AnnouncementContentType>;
  readonly content: ReadonlyArray<AnnouncementContentSchema>;
  readonly sender: UserSchema;
  readonly state: AnnouncementState;
  readonly userAnnouncementCount: Scalars["Int"];
  readonly overrideEmailPreference: Scalars["Boolean"];
  readonly sourceS3FileName?: Maybe<Scalars["String"]>;
  readonly sourceS3FileUrl?: Maybe<Scalars["String"]>;
  readonly categories: ReadonlyArray<AnnouncementCategory>;
  readonly program: AnnouncementProgram;
  readonly locales: ReadonlyArray<AnnouncementLocale>;
};

export type AnnouncementSchemaMerchantsArgs = {
  limit?: Maybe<Scalars["Int"]>;
  offset?: Maybe<Scalars["Int"]>;
};

export type AnnouncementsForUsersV2Schema = {
  readonly __typename?: "AnnouncementsForUsersV2Schema";
  readonly list?: Maybe<ReadonlyArray<MerchantAnnouncementV2Schema>>;
  readonly single?: Maybe<MerchantAnnouncementV2Schema>;
};

export type AnnouncementsForUsersV2SchemaListArgs = {
  announcementType: AnnouncementType;
  limit?: Maybe<Scalars["Int"]>;
  offset?: Maybe<Scalars["Int"]>;
};

export type AnnouncementsForUsersV2SchemaSingleArgs = {
  announcementId: Scalars["ObjectIdType"];
};

export type AnnouncementsService = {
  readonly __typename?: "AnnouncementsService";
  readonly admin?: Maybe<AnnouncementAdmin>;
  readonly forUsers?: Maybe<ReadonlyArray<MerchantAnnouncementSchema>>;
  readonly forUsersV2?: Maybe<AnnouncementsForUsersV2Schema>;
};

export type AnnouncementsServiceForUsersArgs = {
  announcementType: MerchantAnnouncementType;
  limit?: Maybe<Scalars["Int"]>;
  offset?: Maybe<Scalars["Int"]>;
};

export type AnnouncementState =
  | "ANNOUNCEMENT_STATE_UNSPECIFIED"
  | "ANNOUNCEMENT_STATE_NEW"
  | "ANNOUNCEMENT_STATE_DOWNLOADING_CSV"
  | "ANNOUNCEMENT_STATE_PARSING_CSV"
  | "ANNOUNCEMENT_STATE_RETRIEVING_MERCHANTS"
  | "ANNOUNCEMENT_STATE_CREATING"
  | "ANNOUNCEMENT_STATE_COMPLETE"
  | "ANNOUNCEMENT_STATE_UPDATE"
  | "ANNOUNCEMENT_STATE_UPDATING";

export type AnnouncementType =
  | "ANNOUNCEMENT_TYPE_UNSPECIFIED"
  | "ANNOUNCEMENT_TYPE_SYSTEM_UPDATE"
  | "ANNOUNCEMENT_TYPE_BD_ANNOUNCEMENT";

export type ApproveTrademarks = {
  readonly __typename?: "ApproveTrademarks";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ApproveTrademarksInput = {
  readonly brandInfoId: Scalars["ObjectIdType"];
  readonly trademarkIds: ReadonlyArray<Scalars["ObjectIdType"]>;
  readonly newBrandId?: Maybe<Scalars["ObjectIdType"]>;
};

export type Area = {
  readonly __typename?: "Area";
  readonly value: Scalars["Float"];
  readonly unit: AreaUnit;
};

export type AreaValueArgs = {
  targetUnit?: Maybe<AreaUnit>;
};

export type AreaInput = {
  readonly value: Scalars["Float"];
  readonly unit: AreaUnit;
};

export type AreaUnit = "SQUARE_METER" | "SQUARE_FOOT";

export type AttributeConfigEntryMode =
  | "SINGLE_SELECTION"
  | "FREE_TEXT"
  | "MULTI_SELECTION";

export type AttributeConfigSchema = {
  readonly __typename?: "AttributeConfigSchema";
  readonly attributeField: Scalars["String"];
  readonly attributeValues?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly maxMultiSelect?: Maybe<Scalars["Int"]>;
  readonly description: Scalars["String"];
  readonly entryMode: AttributeConfigEntryMode;
};

export type AttributeDataType =
  | "ATTRIBUTE_DATA_TYPE_UNSPECIFIED"
  | "ATTRIBUTE_DATA_TYPE_DATE"
  | "ATTRIBUTE_DATA_TYPE_NUMBER"
  | "ATTRIBUTE_DATA_TYPE_STRING"
  | "ATTRIBUTE_DATA_TYPE_STRING_ARRAY";

export type AttributeDataTypeFormat =
  | "ATTRIBUTE_DATA_TYPE_FORMAT_UNSPECIFIED"
  | "ATTRIBUTE_DATA_TYPE_FORMAT_DATE_YYYY"
  | "ATTRIBUTE_DATA_TYPE_FORMAT_DATE_YYYY_MM"
  | "ATTRIBUTE_DATA_TYPE_FORMAT_DATE_YYYY_MM_DD"
  | "ATTRIBUTE_DATA_TYPE_FORMAT_NUMBER_INT32"
  | "ATTRIBUTE_DATA_TYPE_FORMAT_NUMBER_DOUBLE";

export type AttributeExtractionTaggerJobSchema = {
  readonly __typename?: "AttributeExtractionTaggerJobSchema";
  readonly jobId: Scalars["ObjectIdType"];
  readonly taskId: Scalars["String"];
  readonly jobType: AttributeExtractionTaggerJobType;
  readonly attributeConfigs: ReadonlyArray<AttributeConfigSchema>;
  readonly text: Scalars["String"];
  readonly productId?: Maybe<Scalars["ObjectIdType"]>;
  readonly productTitle?: Maybe<Scalars["String"]>;
  readonly productDescription?: Maybe<Scalars["String"]>;
  readonly productImageUrls?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly query?: Maybe<Scalars["String"]>;
  readonly tagSubmissions?: Maybe<
    ReadonlyArray<AttributeExtractionTagSubmissionSchema>
  >;
};

export type AttributeExtractionTaggerJobType = "QUERY" | "PRODUCT";

export type AttributeExtractionTagSubmissionSchema = {
  readonly __typename?: "AttributeExtractionTagSubmissionSchema";
  readonly tagger: UserSchema;
  readonly submissionDatetime: Datetime;
  readonly attributeExtractionResult: ReadonlyArray<AttributeFieldTagResultSchema>;
};

export type AttributeFieldTagResultSchema = {
  readonly __typename?: "AttributeFieldTagResultSchema";
  readonly attributeField: Scalars["String"];
  readonly annotationResult: ReadonlyArray<Scalars["String"]>;
};

export type AttributeInput = {
  readonly id?: Maybe<Scalars["Int"]>;
  readonly name?: Maybe<Scalars["String"]>;
  readonly value: ReadonlyArray<AttributeValueInput>;
};

export type AttributeLevel =
  | "ATTRIBUTE_LEVEL_UNSPECIFIED"
  | "ATTRIBUTE_LEVEL_PRODUCT"
  | "ATTRIBUTE_LEVEL_VARIANT";

export type AttributeMode =
  | "ATTRIBUTE_MODE_UNSPECIFIED"
  | "ATTRIBUTE_MODE_FREE_TEXT"
  | "ATTRIBUTE_MODE_SINGLE_SELECTION_ONLY"
  | "ATTRIBUTE_MODE_MULTI_SELECTION_ONLY";

export type AttributeUsage =
  | "ATTRIBUTE_USAGE_UNSPECIFIED"
  | "ATTRIBUTE_USAGE_OPTIONAL"
  | "ATTRIBUTE_USAGE_RECOMMENDED"
  | "ATTRIBUTE_USAGE_REQUIRED";

export type AttributeValueInput = {
  readonly id?: Maybe<Scalars["Int"]>;
  readonly value?: Maybe<Scalars["String"]>;
};

export type AudienceGroup =
  | "AUDIENCE_GROUP_UNSPECIFIED"
  | "AUDIENCE_GROUP_ACCENTURE_TAGGER_LEAD"
  | "AUDIENCE_GROUP_ACCENTURE_TAGGER_WORKER"
  | "AUDIENCE_GROUP_ACCENTURE_DETAIL_LEAD"
  | "AUDIENCE_GROUP_ACCENTURE_DETAIL_WORKER"
  | "AUDIENCE_GROUP_ACCENTURE_WORKER"
  | "AUDIENCE_GROUP_ALORICA_LEAD"
  | "AUDIENCE_GROUP_ALORICA_WORKER"
  | "AUDIENCE_GROUP_BRAND_PROTECTION_WORKER"
  | "AUDIENCE_GROUP_CS_REP_INTERNAL"
  | "AUDIENCE_GROUP_IN_HOUSE_TAGGER"
  | "AUDIENCE_GROUP_TELEPERFORMANCE_LEAD"
  | "AUDIENCE_GROUP_TELEPERFORMANCE_WORKER"
  | "AUDIENCE_GROUP_TELEPERFORMANCE_BOGOTA_LEAD"
  | "AUDIENCE_GROUP_TELEPERFORMANCE_BOGOTA_WORKER"
  | "AUDIENCE_GROUP_TRANSCOSMOS_LEAD"
  | "AUDIENCE_GROUP_TRANSCOSMOS_WORKER"
  | "AUDIENCE_GROUP_ALL_MERCHANTS"
  | "AUDIENCE_GROUP_CN_MERCHANTS"
  | "AUDIENCE_GROUP_NON_CN_MERCHANTS"
  | "AUDIENCE_GROUP_ERP_PARTNERS"
  | "AUDIENCE_GROUP_WISHEXPRESS_MERCHANTS"
  | "AUDIENCE_GROUP_MERCHANT_PLUS_MERCHANTS"
  | "AUDIENCE_GROUP_SPECIFIC_MERCHANT_IDS"
  | "AUDIENCE_GROUP_LOCAL_STORES";

export type AudioGenre =
  | "LATIN"
  | "HIP_HOP"
  | "ELECTRONICA_DANCE"
  | "CLASSICAL"
  | "COUNTRY"
  | "WORLD_COUNTRIES"
  | "POP"
  | "FUNK"
  | "ROCK"
  | "ACOUSTIC"
  | "BLUES"
  | "COMEDY"
  | "RNB_SOUL"
  | "CHILDREN"
  | "FILM";

export type AudioMoodEmotion =
  | "FUNNY"
  | "CHASING"
  | "RESTLESS"
  | "ANGRY"
  | "HOPEFUL"
  | "DARK"
  | "DREAMY"
  | "BUSY_FRANTIC"
  | "FLOATING"
  | "MARCHING"
  | "ROMANTIC"
  | "SMOOTH"
  | "EUPHORIC"
  | "SAD"
  | "LOUNGE"
  | "ELEGANT"
  | "QUIRKY"
  | "HAPPY"
  | "SCARY"
  | "GLAMOROUS"
  | "SENTIMENTAL"
  | "RELAXING"
  | "LAID_BACK"
  | "MYSTERIOUS"
  | "SEXY"
  | "WEIRD"
  | "COUNTRYSIDE"
  | "ECCENTRIC"
  | "INDUSTRY"
  | "SPORTS_ARENA"
  | "RUNNING"
  | "CHANGING_TEMPO"
  | "PEACEFUL"
  | "HEAVY_PONDEROUS"
  | "SUSPENSE"
  | "EPIC"
  | "SUNNY_HOLIDAY";

export type AudioProductCategory =
  | "MEN_CLOTHING"
  | "FASHION"
  | "FLOOR_CARE"
  | "HOME_DECOR"
  | "WOMEN_CLOTHING"
  | "MAKEUP_BEAUTY"
  | "AUTOMOTIVE"
  | "SHOES"
  | "ACCESSORIES"
  | "WATCHES"
  | "SMALL_APPLIANCES"
  | "GADGETS"
  | "WALLETS_BAGS"
  | "HEALTH_WELLNESS"
  | "HOBBIES"
  | "BABY_KIDS"
  | "PHONE_UPGRADES"
  | "HOUSEHOLD_SUPPLIES";

export type AuthenticationMutations = {
  readonly __typename?: "AuthenticationMutations";
  readonly merchantSignup?: Maybe<MerchantSignupMutation>;
  readonly merchantSignupSendPhoneVerification?: Maybe<MerchantSignupSendPhoneVerificationMutation>;
  readonly merchantLeadSubmission?: Maybe<MerchantLeadSubmissionMutation>;
  readonly mmsLeadSubmission?: Maybe<MmsLeadSubmissionMutation>;
  readonly login?: Maybe<LoginMutation>;
  readonly logout?: Maybe<LogoutMutation>;
  readonly notifyPasswordRecovery?: Maybe<NotifyPasswordRecoveryMutation>;
  readonly resetPassword?: Maybe<ResetPasswordMutation>;
  readonly loginAs?: Maybe<LoginAsMutations>;
  readonly gen2faCode?: Maybe<TwoFactorGenTokenMutation>;
  readonly genWechatQr?: Maybe<GenWechatQrMutation>;
  readonly checkWechatScan?: Maybe<WechatCheckScanMutation>;
};

export type AuthenticationMutationsMerchantSignupArgs = {
  input: MerchantSignupInput;
};

export type AuthenticationMutationsMerchantSignupSendPhoneVerificationArgs = {
  input: MerchantSignupSendPhoneVerificationInput;
};

export type AuthenticationMutationsMerchantLeadSubmissionArgs = {
  input: MerchantLeadSubmissionInput;
};

export type AuthenticationMutationsMmsLeadSubmissionArgs = {
  input: MmsLeadSubmissionInput;
};

export type AuthenticationMutationsLoginArgs = {
  input: LoginMutationInput;
};

export type AuthenticationMutationsNotifyPasswordRecoveryArgs = {
  input: NotifyPasswordRecoveryMutationInput;
};

export type AuthenticationMutationsResetPasswordArgs = {
  input: ResetPasswordMutationInput;
};

export type AuthenticationMutationsGen2faCodeArgs = {
  input: TwoFactorGenTokenInput;
};

export type AuthenticationMutationsGenWechatQrArgs = {
  input: GenWechatQrInput;
};

export type AuthenticationMutationsCheckWechatScanArgs = {
  input: WechatCheckScanInput;
};

export type AuthenticationServiceSchema = {
  readonly __typename?: "AuthenticationServiceSchema";
  readonly showCaptchaOnSignup: Scalars["Boolean"];
  readonly passwordEvaluation: PasswordEvaluation;
  readonly shopifyOnboardingAuthInfo: ShopifyOnboardingAuthInfo;
  readonly merchantInviteInfo?: Maybe<MerchantInviteInfo>;
  readonly salesforceLeadInfo?: Maybe<SalesforceLeadInfo>;
  readonly bdSignupCodeInfo?: Maybe<BdSignupCodeInfo>;
  readonly storeCategories: ReadonlyArray<Scalars["String"]>;
  readonly countriesWeShipTo: ReadonlyArray<Country>;
};

export type AuthenticationServiceSchemaPasswordEvaluationArgs = {
  password: Scalars["String"];
};

export type AuthenticationServiceSchemaMerchantInviteInfoArgs = {
  invite?: Maybe<Scalars["String"]>;
};

export type AuthenticationServiceSchemaSalesforceLeadInfoArgs = {
  salesforceLeadId?: Maybe<Scalars["String"]>;
};

export type AuthenticationServiceSchemaBdSignupCodeInfoArgs = {
  bdSignupCode?: Maybe<Scalars["String"]>;
};

export type AuthorizeReturn = {
  readonly __typename?: "AuthorizeReturn";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type AuthorizeReturnInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly returnTrackingId: Scalars["String"];
  readonly returnShippingCarrier: Scalars["String"];
  readonly prepaidReturnLabelUrl: Scalars["String"];
  readonly prepaidReturnLabelFilename: Scalars["String"];
};

export type AuthType = "MERCHANT" | "WISH";

export type BalanceTransactionRecord = {
  readonly __typename?: "BalanceTransactionRecord";
  readonly id: Scalars["ObjectIdType"];
  readonly balanceBeforeUpdate: CurrencyValue;
  readonly balanceAfterUpdate: CurrencyValue;
  readonly dateCreated: Datetime;
  readonly transactionAmount: CurrencyValue;
  readonly campaignId?: Maybe<Scalars["ObjectIdType"]>;
  readonly productId?: Maybe<Scalars["ObjectIdType"]>;
  readonly updatedReason: BalanceUpdateReason;
  readonly updateReasonDescription: Scalars["String"];
  readonly receiptId?: Maybe<Scalars["ObjectIdType"]>;
};

export type BalanceUpdateReason =
  | "REFUND"
  | "PAYMENT_BY_CREDITS"
  | "ISSUING_CREDITS";

export type BdAudienceInput = "ALL" | "MERCHANT_IDS";

export type BdBaseAnnouncementInput = {
  readonly title: Scalars["String"];
  readonly message: Scalars["String"];
  readonly expiryDate?: Maybe<DatetimeInput>;
  readonly merchantIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly audienceType?: Maybe<BdAudienceInput>;
  readonly publishDate: DatetimeInput;
};

export type BdMerchantCountryCodeType =
  | "CN"
  | "KR"
  | "SG"
  | "JP"
  | "US"
  | "HK"
  | "VN"
  | "BR"
  | "TW"
  | "EU"
  | "MY"
  | "MX";

export type BdSignupCodeInfo = {
  readonly __typename?: "BdSignupCodeInfo";
  readonly valid: Scalars["Boolean"];
  readonly bdName?: Maybe<Scalars["String"]>;
  readonly hasPromotion?: Maybe<Scalars["Boolean"]>;
  readonly useMarketingTransactionBonus?: Maybe<Scalars["Boolean"]>;
};

export type BlurredInformationCategory =
  | "BLURRED_WATERMARKS"
  | "BLURRED_OR_CENSORED_TAGS"
  | "BLURRED_OR_CENSORED_LOGOS";

export type BonusBudgetSchema = {
  readonly __typename?: "BonusBudgetSchema";
  readonly isBonusBudgetCampaign: Scalars["Boolean"];
  readonly bonusBudgetRate: Scalars["Float"];
  readonly bonusBudget: CurrencyValue;
  readonly usedBonusBudget: CurrencyValue;
  readonly bonusBudgetType: MarketingBonusBudgetType;
  readonly eligibleBonusBudgetType: MarketingBonusBudgetType;
};

export type BrandAuthorizationSchema = {
  readonly __typename?: "BrandAuthorizationSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly merchantId: Scalars["ObjectIdType"];
  readonly brand: BrandSchema;
  readonly state: BrandAuthorizationState;
};

export type BrandAuthorizationState =
  | "EXPIRED"
  | "NOT_APPROVED"
  | "PENDING_MERCHANT"
  | "CLOSED"
  | "PENDING_ADMIN"
  | "APPROVED"
  | "PENDING";

export type BrandCategoryCode =
  | "FASHION"
  | "BEAUTY"
  | "KID_TOYS_OR_GAME"
  | "MEDIA"
  | "SPORTS"
  | "SHOE"
  | "MOTOR"
  | "COPYRIGHTED_IMAGES"
  | "BRANDED_ACCESSORIES"
  | "ELECTRONIC"
  | "LUXURY_WELL_KNOWN";

export type BrandedMerchantLifeTimeStatsObjectSchema = {
  readonly __typename?: "BrandedMerchantLifeTimeStatsObjectSchema";
  readonly gmv: CurrencyValue;
  readonly cost: CurrencyValue;
  readonly orders: Scalars["Int"];
  readonly feedImpressions: Scalars["Int"];
  readonly quantitiesSold: Scalars["Int"];
};

export type BrandEnrollmentMutations = {
  readonly __typename?: "BrandEnrollmentMutations";
  readonly createBrandEnrollmentRequest?: Maybe<CreateBrandEnrollmentRequest>;
  readonly addTrademark?: Maybe<AddTrademark>;
  readonly deleteBrandEnrollment?: Maybe<DeleteBrandEnrollment>;
};

export type BrandEnrollmentMutationsCreateBrandEnrollmentRequestArgs = {
  input?: Maybe<CreateBrandEnrollmentInput>;
};

export type BrandEnrollmentMutationsAddTrademarkArgs = {
  input?: Maybe<AddTrademarkInput>;
};

export type BrandEnrollmentMutationsDeleteBrandEnrollmentArgs = {
  input?: Maybe<DeleteBrandEnrollmentInput>;
};

export type BrandingSchema = {
  readonly __typename?: "BrandingSchema";
  readonly brands: ReadonlyArray<MerchantBrandSchema>;
  readonly latestDateWithBrandData?: Maybe<Datetime>;
};

export type BrandingSchemaBrandsArgs = {
  brandIds?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type BrandManagement = {
  readonly __typename?: "BrandManagement";
  readonly brands: ReadonlyArray<BrandSchema>;
  readonly numBrands: Scalars["Int"];
  readonly canManageBrands: Scalars["Boolean"];
  readonly canManageBrandToProduct: Scalars["Boolean"];
};

export type BrandManagementBrandsArgs = {
  brandIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  brandName?: Maybe<Scalars["String"]>;
  offset?: Maybe<Scalars["Int"]>;
  count?: Maybe<Scalars["Int"]>;
  hideDeleted?: Maybe<Scalars["Boolean"]>;
  brandTypes?: Maybe<ReadonlyArray<BrandTypeCode>>;
};

export type BrandManagementNumBrandsArgs = {
  brandIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  brandName?: Maybe<Scalars["String"]>;
  hideDeleted?: Maybe<Scalars["Boolean"]>;
  brandTypes?: Maybe<ReadonlyArray<BrandTypeCode>>;
};

export type BrandMutations = {
  readonly __typename?: "BrandMutations";
  readonly everc?: Maybe<EverCBrandMutations>;
  readonly injunctionMerchantFreeze?: Maybe<InjunctionMerchantFreezeMutations>;
};

export type BrandPartnerAdmin = {
  readonly __typename?: "BrandPartnerAdmin";
  readonly brandPartners: ReadonlyArray<BrandPartnerInfoSchema>;
  readonly numBrandPartners: Scalars["Int"];
  readonly brandEnrollments: ReadonlyArray<BrandPartnerBrandInfoSchema>;
  readonly numBrandEnrollments: Scalars["Int"];
};

export type BrandPartnerAdminBrandPartnersArgs = {
  count?: Maybe<Scalars["Int"]>;
  offset?: Maybe<Scalars["Int"]>;
  brandName?: Maybe<Scalars["String"]>;
  email?: Maybe<Scalars["String"]>;
  brandPartnerId?: Maybe<Scalars["String"]>;
  trademarkStates?: Maybe<ReadonlyArray<BrandPartnerTrademarkState>>;
  brandPartnerStates?: Maybe<ReadonlyArray<BrandPartnerState>>;
};

export type BrandPartnerAdminNumBrandPartnersArgs = {
  brandName?: Maybe<Scalars["String"]>;
  email?: Maybe<Scalars["String"]>;
  brandPartnerId?: Maybe<Scalars["String"]>;
  trademarkStates?: Maybe<ReadonlyArray<BrandPartnerTrademarkState>>;
  brandPartnerStates?: Maybe<ReadonlyArray<BrandPartnerState>>;
};

export type BrandPartnerAdminBrandEnrollmentsArgs = {
  count?: Maybe<Scalars["Int"]>;
  offset?: Maybe<Scalars["Int"]>;
  brandName?: Maybe<Scalars["String"]>;
  email?: Maybe<Scalars["String"]>;
  brandPartnerId?: Maybe<Scalars["String"]>;
  brandInfoId?: Maybe<Scalars["String"]>;
  trademarkStates?: Maybe<ReadonlyArray<BrandPartnerTrademarkState>>;
};

export type BrandPartnerAdminNumBrandEnrollmentsArgs = {
  brandName?: Maybe<Scalars["String"]>;
  email?: Maybe<Scalars["String"]>;
  brandPartnerId?: Maybe<Scalars["String"]>;
  brandInfoId?: Maybe<Scalars["String"]>;
  trademarkStates?: Maybe<ReadonlyArray<BrandPartnerTrademarkState>>;
};

export type BrandPartnerAdminMutations = {
  readonly __typename?: "BrandPartnerAdminMutations";
  readonly disableBrandPartner?: Maybe<DisableBrandPartner>;
  readonly approveTrademarks?: Maybe<ApproveTrademarks>;
  readonly rejectTrademarksAndBrandInfo?: Maybe<RejectTrademarksAndBrandInfo>;
  readonly editTrademarksAndBrandInfo?: Maybe<EditTrademarksAndBrandInfo>;
};

export type BrandPartnerAdminMutationsDisableBrandPartnerArgs = {
  input: DisableBrandPartnerInput;
};

export type BrandPartnerAdminMutationsApproveTrademarksArgs = {
  input: ApproveTrademarksInput;
};

export type BrandPartnerAdminMutationsRejectTrademarksAndBrandInfoArgs = {
  input: RejectTrademarksAndBrandInfoInput;
};

export type BrandPartnerAdminMutationsEditTrademarksAndBrandInfoArgs = {
  input: EditTrademarksAndBrandInfoInput;
};

export type BrandPartnerAuthenticationMutations = {
  readonly __typename?: "BrandPartnerAuthenticationMutations";
  readonly sendPasswordResetEmail?: Maybe<BrandPartnerSendPasswordResetEmail>;
  readonly resetPassword?: Maybe<BrandPartnerResetPassword>;
};

export type BrandPartnerAuthenticationMutationsSendPasswordResetEmailArgs = {
  input: BrandPartnerSendPasswordResetEmailInput;
};

export type BrandPartnerAuthenticationMutationsResetPasswordArgs = {
  input: BrandPartnerResetPasswordInput;
};

export type BrandPartnerBrandInfoSchema = {
  readonly __typename?: "BrandPartnerBrandInfoSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly brandPartnerId: Scalars["ObjectIdType"];
  readonly isNewBrand: Scalars["Boolean"];
  readonly confirmedBrandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly confirmedBrand?: Maybe<BrandSchema>;
  readonly state: BrandPartnerBrandState;
  readonly brandOwnerName: Scalars["String"];
  readonly email: Scalars["String"];
  readonly phoneNumber: Scalars["String"];
  readonly brandRepName: Scalars["String"];
  readonly brandRepTitle: Scalars["String"];
  readonly proposedBrandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly providedBrandName: Scalars["String"];
  readonly providedBrandWebsite?: Maybe<Scalars["String"]>;
  readonly providedBrandLogo?: Maybe<MerchantFileSchema>;
  readonly providedBrandAdditionalInfo?: Maybe<Scalars["String"]>;
  readonly authorizationProofs: ReadonlyArray<MerchantFileSchema>;
  readonly rejectionReason?: Maybe<Scalars["String"]>;
  readonly enrollmentDate: Datetime;
  readonly trademarks: ReadonlyArray<BrandPartnerTrademarkInfoSchema>;
  readonly numTrademarks: Scalars["Int"];
};

export type BrandPartnerBrandInfoSchemaTrademarksArgs = {
  offset?: Maybe<Scalars["Int"]>;
  count?: Maybe<Scalars["Int"]>;
  states?: Maybe<ReadonlyArray<BrandPartnerTrademarkState>>;
};

export type BrandPartnerBrandInfoSchemaNumTrademarksArgs = {
  states?: Maybe<ReadonlyArray<BrandPartnerTrademarkState>>;
};

export type BrandPartnerBrandState = "REJECTED" | "APPROVED" | "PENDING";

export type BrandPartnerChangeUserInfo = {
  readonly __typename?: "BrandPartnerChangeUserInfo";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type BrandPartnerChangeUserInfoInput = {
  readonly brandPartnerId?: Maybe<Scalars["ObjectIdType"]>;
  readonly firstName?: Maybe<Scalars["String"]>;
  readonly lastName?: Maybe<Scalars["String"]>;
  readonly professionalTitle?: Maybe<Scalars["String"]>;
  readonly companyName?: Maybe<Scalars["String"]>;
  readonly streetAddress1?: Maybe<Scalars["String"]>;
  readonly streetAddress2?: Maybe<Scalars["String"]>;
  readonly city?: Maybe<Scalars["String"]>;
  readonly state?: Maybe<Scalars["String"]>;
  readonly countryCode?: Maybe<Scalars["String"]>;
  readonly zipcode?: Maybe<Scalars["String"]>;
  readonly phoneNumber?: Maybe<Scalars["String"]>;
  readonly currentPassword?: Maybe<Scalars["String"]>;
  readonly newPassword?: Maybe<Scalars["String"]>;
  readonly email?: Maybe<Scalars["String"]>;
  readonly internalNote?: Maybe<Scalars["String"]>;
};

export type BrandPartnerCountryAndRegion = {
  readonly __typename?: "BrandPartnerCountryAndRegion";
  readonly code: BrandPartnerCountryAndRegionCode;
  readonly name: Scalars["String"];
};

export type BrandPartnerCountryAndRegionCode =
  | "BE"
  | "FR"
  | "BG"
  | "BA"
  | "HR"
  | "DE"
  | "JP"
  | "HU"
  | "MK"
  | "BR"
  | "JE"
  | "FI"
  | "DK"
  | "PR"
  | "NL"
  | "PT"
  | "NO"
  | "TR"
  | "LT"
  | "LI"
  | "LV"
  | "NZ"
  | "LU"
  | "ES"
  | "PE"
  | "MT"
  | "RO"
  | "AE"
  | "IS"
  | "PL"
  | "CH"
  | "CO"
  | "GR"
  | "CN"
  | "CL"
  | "EE"
  | "VI"
  | "CA"
  | "ZA"
  | "AL"
  | "CZ"
  | "AR"
  | "AU"
  | "GB"
  | "EU"
  | "CR"
  | "AD"
  | "IE"
  | "GI"
  | "ME"
  | "MD"
  | "MC"
  | "UA"
  | "IL"
  | "RS"
  | "US"
  | "SK"
  | "KR"
  | "SI"
  | "SM"
  | "IT"
  | "SG"
  | "MX"
  | "SE"
  | "AT";

export type BrandPartnerInfoSchema = {
  readonly __typename?: "BrandPartnerInfoSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly isBrandPartnerV2: Scalars["Boolean"];
  readonly brandPartnerName: Scalars["String"];
  readonly firstName?: Maybe<Scalars["String"]>;
  readonly lastName?: Maybe<Scalars["String"]>;
  readonly lastUpdated: Datetime;
  readonly internalNote?: Maybe<Scalars["String"]>;
  readonly professionalTitle?: Maybe<Scalars["String"]>;
  readonly companyName?: Maybe<Scalars["String"]>;
  readonly email: Scalars["String"];
  readonly phoneNumber?: Maybe<Scalars["String"]>;
  readonly businessAddress?: Maybe<AddressSchema>;
  readonly state: BrandPartnerState;
  readonly brandInfos: ReadonlyArray<BrandPartnerBrandInfoSchema>;
  readonly numBrandInfos: Scalars["Int"];
  readonly onboarding: BrandPartnerOnboardingSchema;
  readonly takedownRequests: ReadonlyArray<TakedownRequestSchema>;
  readonly numTakedownRequests: Scalars["Int"];
};

export type BrandPartnerInfoSchemaBrandInfosArgs = {
  brandNameQuery?: Maybe<Scalars["String"]>;
  brandInfoIdQuery?: Maybe<Scalars["String"]>;
  offset?: Maybe<Scalars["Int"]>;
  count?: Maybe<Scalars["Int"]>;
  states?: Maybe<ReadonlyArray<BrandPartnerBrandState>>;
};

export type BrandPartnerInfoSchemaNumBrandInfosArgs = {
  brandNameQuery?: Maybe<Scalars["String"]>;
  states?: Maybe<ReadonlyArray<BrandPartnerBrandState>>;
};

export type BrandPartnerInfoSchemaTakedownRequestsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  count?: Maybe<Scalars["Int"]>;
  reportIdQuery?: Maybe<Scalars["String"]>;
  brandNameQuery?: Maybe<Scalars["String"]>;
  states?: Maybe<ReadonlyArray<TakedownRequestState>>;
};

export type BrandPartnerInfoSchemaNumTakedownRequestsArgs = {
  reportIdQuery?: Maybe<Scalars["String"]>;
  brandNameQuery?: Maybe<Scalars["String"]>;
  states?: Maybe<ReadonlyArray<TakedownRequestState>>;
};

export type BrandPartnerMutations = {
  readonly __typename?: "BrandPartnerMutations";
  readonly takedownRequest?: Maybe<TakedownRequestMutations>;
  readonly brandEnrollmentMutations?: Maybe<BrandEnrollmentMutations>;
  readonly user?: Maybe<BrandPartnerUserMutations>;
  readonly authentication?: Maybe<BrandPartnerAuthenticationMutations>;
  readonly admin?: Maybe<BrandPartnerAdminMutations>;
};

export type BrandPartnerOnboardingSchema = {
  readonly __typename?: "BrandPartnerOnboardingSchema";
  readonly steps: ReadonlyArray<BrandPartnerOnboardingStep>;
  readonly numStepsLeft: Scalars["Int"];
  readonly numStepsCompleted: Scalars["Int"];
  readonly numSteps: Scalars["Int"];
};

export type BrandPartnerOnboardingSchemaStepsArgs = {
  completed?: Maybe<Scalars["Boolean"]>;
};

export type BrandPartnerOnboardingStep = {
  readonly __typename?: "BrandPartnerOnboardingStep";
  readonly name: BrandPartnerOnboardingSteps;
  readonly title: Scalars["String"];
  readonly description: Scalars["String"];
  readonly ctaText: Scalars["String"];
  readonly ctaLink: Scalars["String"];
  readonly illustration?: Maybe<Scalars["String"]>;
  readonly completed: Scalars["Boolean"];
};

export type BrandPartnerOnboardingSteps = "CONFIRM_EMAIL" | "ENROLL_BRAND";

export type BrandPartnerResetPassword = {
  readonly __typename?: "BrandPartnerResetPassword";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly email?: Maybe<Scalars["String"]>;
};

export type BrandPartnerResetPasswordInput = {
  readonly password: Scalars["String"];
  readonly token: Scalars["String"];
  readonly tfaToken?: Maybe<Scalars["String"]>;
};

export type BrandPartnerSendPasswordResetEmail = {
  readonly __typename?: "BrandPartnerSendPasswordResetEmail";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type BrandPartnerSendPasswordResetEmailInput = {
  readonly email: Scalars["String"];
};

export type BrandPartnerState =
  | "PENDING_PHONE"
  | "REJECTED"
  | "PENDING_EMAIL"
  | "PENDING_REVIEW"
  | "ACTIVE"
  | "PENDING";

export type BrandPartnerTrademarkInfoInputObject = {
  readonly trademarkName: Scalars["String"];
  readonly location: BrandPartnerCountryAndRegionCode;
  readonly trademarkType: BrandPartnerTrademarkType;
  readonly registrationNumber: Scalars["String"];
  readonly registrationUrl?: Maybe<Scalars["String"]>;
  readonly registrationDocs: ReadonlyArray<FileInput>;
};

export type BrandPartnerTrademarkInfoSchema = {
  readonly __typename?: "BrandPartnerTrademarkInfoSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly brandPartnerId: Scalars["ObjectIdType"];
  readonly brandInfoId: Scalars["ObjectIdType"];
  readonly brandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly state: BrandPartnerTrademarkState;
  readonly location: BrandPartnerCountryAndRegion;
  readonly trademarkName: Scalars["String"];
  readonly trademarkType: BrandPartnerTrademarkType;
  readonly registrationNumber: Scalars["String"];
  readonly registrationUrl?: Maybe<Scalars["String"]>;
  readonly registrationDocs: ReadonlyArray<MerchantFileSchema>;
  readonly rejectionReason?: Maybe<Scalars["String"]>;
  readonly enrollmentDate: Datetime;
};

export type BrandPartnerTrademarkState = "REJECTED" | "APPROVED" | "PENDING";

export type BrandPartnerTrademarkType = "OTHER" | "WORDMARK" | "DESIGNMARK";

export type BrandPartnerUserMutations = {
  readonly __typename?: "BrandPartnerUserMutations";
  readonly changeUserInfo?: Maybe<BrandPartnerChangeUserInfo>;
};

export type BrandPartnerUserMutationsChangeUserInfoArgs = {
  input: BrandPartnerChangeUserInfoInput;
};

export type BrandProtection = {
  readonly __typename?: "BrandProtection";
  readonly injunctionMerchantFreezes: ReadonlyArray<InjunctionMerchantFreezeSchema>;
  readonly numInjunctionMerchantFreezes: Scalars["Int"];
  readonly canManageFreezes: Scalars["Boolean"];
};

export type BrandProtectionInjunctionMerchantFreezesArgs = {
  imfIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  merchantIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  troNumbers?: Maybe<ReadonlyArray<Scalars["Int"]>>;
  state?: Maybe<ReadonlyArray<InjunctionMerchantFreezeState>>;
  freezeTypes?: Maybe<ReadonlyArray<InjunctionMerchantFreezeType>>;
  offset?: Maybe<Scalars["Int"]>;
  count?: Maybe<Scalars["Int"]>;
};

export type BrandProtectionNumInjunctionMerchantFreezesArgs = {
  imfIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  merchantIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  troNumbers?: Maybe<ReadonlyArray<Scalars["Int"]>>;
  state?: Maybe<ReadonlyArray<InjunctionMerchantFreezeState>>;
  freezeTypes?: Maybe<ReadonlyArray<InjunctionMerchantFreezeType>>;
};

export type BrandProtectionConstants = {
  readonly __typename?: "BrandProtectionConstants";
  readonly holidayMessage: Scalars["String"];
};

export type BrandReach = "INTERNATIONAL" | "REGIONAL" | "LOCAL" | "ONLINE";

export type BrandRegistrationCountry = "US" | "EU" | "Japan" | "Others";

export type BrandSchema = {
  readonly __typename?: "BrandSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
  readonly displayName: Scalars["String"];
  readonly brandTypes?: Maybe<ReadonlyArray<BrandType>>;
  readonly isTrueBrand: Scalars["Boolean"];
  readonly logoUrl?: Maybe<Scalars["String"]>;
  readonly logoAspectRatio: Scalars["Float"];
  readonly brandUrl?: Maybe<Scalars["String"]>;
  readonly isAdult: Scalars["Boolean"];
  readonly isActive: Scalars["Boolean"];
  readonly ipViolationCategory?: Maybe<IpViolationBrandCategory>;
  readonly severity?: Maybe<BrandSeverity>;
  readonly keywords?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly autoApproveMerchantIds?: Maybe<
    ReadonlyArray<Scalars["ObjectIdType"]>
  >;
  readonly numTaggedProducts?: Maybe<Scalars["Int"]>;
  readonly brandProductTags?: Maybe<ReadonlyArray<TrueTagSchema>>;
  readonly minimumPrice?: Maybe<CurrencyValue>;
  readonly brandReach?: Maybe<BrandReach>;
  readonly counterfeitRiskLevel?: Maybe<CounterfeitRiskLevel>;
  readonly brandOwnerEntityCountry?: Maybe<Country>;
  readonly manufacturingCountry?: Maybe<Country>;
  readonly internalNote?: Maybe<Scalars["String"]>;
  readonly evercBrands?: Maybe<ReadonlyArray<EverCBrandSchema>>;
};

export type BrandServiceSchema = {
  readonly __typename?: "BrandServiceSchema";
  readonly brandManagement?: Maybe<BrandManagement>;
  readonly trueBrands: ReadonlyArray<BrandSchema>;
  readonly acceptedTrademarkCountries: ReadonlyArray<TrademarkCountryCode>;
  readonly brandPartnerTrademarkLocations: ReadonlyArray<BrandPartnerCountryAndRegion>;
  readonly brandPartnerAdmin?: Maybe<BrandPartnerAdmin>;
  readonly brandAuthorizations?: Maybe<ReadonlyArray<BrandAuthorizationSchema>>;
  readonly brandProtection?: Maybe<BrandProtection>;
};

export type BrandServiceSchemaTrueBrandsArgs = {
  brandIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  brandName?: Maybe<Scalars["String"]>;
  queryString?: Maybe<Scalars["String"]>;
  offset?: Maybe<Scalars["Int"]>;
  count?: Maybe<Scalars["Int"]>;
  sort?: Maybe<BrandSort>;
};

export type BrandServiceSchemaAcceptedTrademarkCountriesArgs = {
  usePriorityOrdering?: Maybe<Scalars["Boolean"]>;
};

export type BrandServiceSchemaBrandAuthorizationsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  id?: Maybe<Scalars["ObjectIdType"]>;
  states?: Maybe<ReadonlyArray<BrandAuthorizationState>>;
};

export type BrandSeverity = "HIGH" | "MEDIUM" | "LOW";

export type BrandSort = {
  readonly field: BrandSortField;
  readonly order: SortOrderType;
};

export type BrandSortField = "ID" | "NAME";

export type BrandType = {
  readonly __typename?: "BrandType";
  readonly brandType: BrandTypeCode;
  readonly displayName: Scalars["String"];
};

export type BrandTypeCode =
  | "DEFAULT"
  | "TRUE_BRAND"
  | "TRO"
  | "COPYRIGHT_IMAGE"
  | "BRAND_OF_INTEREST";

export type BulkReviewInput = {
  readonly merchantIds: ReadonlyArray<Scalars["ObjectIdType"]>;
  readonly reviewState: SanctionScreeningHitStateType;
  readonly reviewComment: Scalars["String"];
  readonly pausedImpressionState?: Maybe<Scalars["Boolean"]>;
};

export type BulkReviewMutation = {
  readonly __typename?: "BulkReviewMutation";
  readonly ok: Scalars["Boolean"];
  readonly updatedIds: ReadonlyArray<Scalars["ObjectIdType"]>;
  readonly totalToUpdate: Scalars["Int"];
  readonly successfullyUpdated: Scalars["Int"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type BusinessDocTypes =
  | "OFFICIAL_BANK_STATEMENT"
  | "RECENT_BUSINESS_RETURNS"
  | "SHARE_ALLOCATION_CERTIFICATE"
  | "CERTIFICATE_OF_INCORPORATION"
  | "UTILITY_BILL_STATEMENT"
  | "CREDIT_CARD_STATEMENT"
  | "GOVERNMENT_ISSUED_BUSINESS_LICENSE"
  | "ENTITY_TRADING_NAME"
  | "ARTICLES_OF_INCORPORATION"
  | "PRODUCT_LICENSING";

export type BuyerFraudReasonCategory =
  | "MERCHANT_REPORTED_SUSPICIOUS_SHIPPING_LOCATION"
  | "MERCHANT_REPORTED_POLICY_ABUSE"
  | "MERCHANT_REPORTED_OTHER"
  | "MERCHANT_REPORTED_SUSPICIOUS_QUANTITY_OR_PAYMENT";

export type ByUserIdInput = {
  readonly id: Scalars["ObjectIdType"];
};

export type ByUserIdMutation = {
  readonly __typename?: "ByUserIdMutation";
  readonly ok: Scalars["Boolean"];
  readonly error?: Maybe<Scalars["String"]>;
  readonly sessionKey?: Maybe<Scalars["String"]>;
};

export type CampaignEventInfo = {
  readonly __typename?: "CampaignEventInfo";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
  readonly startTime: Datetime;
  readonly endTime: Datetime;
  readonly submissionDeadline: Datetime;
  readonly minDiscountPercentage: Scalars["Float"];
  readonly productCategoryRestrictions: ReadonlyArray<TaxonomyCategorySchema>;
  readonly countries: ReadonlyArray<Country>;
  readonly description?: Maybe<Scalars["String"]>;
  readonly promotionType: MfpCampaignPromotionType;
};

export type CampaignEventSort = {
  readonly field: MfpCampaignEventSortBy;
  readonly order: SortOrderType;
};

export type CampaignProductSchema = {
  readonly __typename?: "CampaignProductSchema";
  readonly productId: Scalars["ObjectIdType"];
  readonly product?: Maybe<ProductSchema>;
  readonly keywords: ReadonlyArray<Scalars["String"]>;
  readonly isMaxboost: Scalars["Boolean"];
  readonly brandId?: Maybe<Scalars["ObjectIdType"]>;
};

export type CampaignSchema = {
  readonly __typename?: "CampaignSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
  readonly merchant: MerchantSchema;
  readonly state: MarketingCampaignState;
  readonly products: ReadonlyArray<CampaignProductSchema>;
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly isEvergreen: Scalars["Boolean"];
  readonly intenseBoost: Scalars["Boolean"];
  readonly maxBudget: CurrencyValue;
  readonly scheduledAddBudget: ScheduledAddBudgetSchema;
  readonly merchantBudget: CurrencyValue;
  readonly merchantId: Scalars["ObjectIdType"];
  readonly localizedCurrency: PaymentCurrencyCode;
  readonly flexibleBudget: FlexibleBudgetSchema;
  readonly bonusBudget: BonusBudgetSchema;
};

export type CancelChargeTransactionInput = {
  readonly chargeId: Scalars["String"];
};

export type CancelChargeTransactionMutation = {
  readonly __typename?: "CancelChargeTransactionMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type CancelMfpCampaign = {
  readonly __typename?: "CancelMFPCampaign";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type CancelMfpCampaignInput = {
  readonly campaignId: Scalars["ObjectIdType"];
  readonly cancelReason: MfpCampaignCancelReason;
  readonly comment?: Maybe<Scalars["String"]>;
};

export type CancelReturn = {
  readonly __typename?: "CancelReturn";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type CancelReturnInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly cancelReason: ReturnRequestCancelReason;
  readonly message: Scalars["String"];
  readonly otherReasonExplanation?: Maybe<Scalars["String"]>;
  readonly supportingDocument?: Maybe<Scalars["String"]>;
};

export type CancelWfpWithholdMutation = {
  readonly __typename?: "CancelWFPWithholdMutation";
  readonly ok: Scalars["Boolean"];
  readonly message: Scalars["String"];
  readonly orderId?: Maybe<Scalars["String"]>;
  readonly merchantId?: Maybe<Scalars["String"]>;
};

export type CancelWfpWithholdMutationInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly cancelTicket: Scalars["String"];
  readonly cancelReason?: Maybe<Scalars["String"]>;
};

export type CancelWpsTrackingIdInput = {
  readonly orderId: Scalars["ObjectIdType"];
};

export type CancelWpsTrackingIdMutation = {
  readonly __typename?: "CancelWPSTrackingIDMutation";
  readonly ok: Scalars["Boolean"];
  readonly wpsShipmentId?: Maybe<Scalars["String"]>;
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type CannedResponseCategorySchema = {
  readonly __typename?: "CannedResponseCategorySchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
};

export type CannedResponseFeature =
  | "TICKET"
  | "FRAUD"
  | "WARNING"
  | "TRACKING_DISPUTE"
  | "DISPUTE";

export type CannedResponseHub = {
  readonly __typename?: "CannedResponseHub";
  readonly cannedResponseCategoriesCount?: Maybe<Scalars["Int"]>;
  readonly cannedResponseCategories?: Maybe<
    ReadonlyArray<CannedResponseCategorySchema>
  >;
  readonly cannedResponsesCount?: Maybe<Scalars["Int"]>;
  readonly cannedResponses?: Maybe<ReadonlyArray<CannedResponseSchema>>;
  readonly filledCannedResponseText?: Maybe<FilledCannedResponseTextSchema>;
};

export type CannedResponseHubCannedResponseCategoriesCountArgs = {
  feature: CannedResponseFeature;
  locale?: Maybe<Locale>;
};

export type CannedResponseHubCannedResponseCategoriesArgs = {
  feature: CannedResponseFeature;
  locale?: Maybe<Locale>;
};

export type CannedResponseHubCannedResponsesCountArgs = {
  category?: Maybe<Scalars["ObjectIdType"]>;
  feature?: Maybe<CannedResponseFeature>;
  locale?: Maybe<Locale>;
  isRefund?: Maybe<Scalars["Boolean"]>;
  canRePurchase?: Maybe<Scalars["Boolean"]>;
};

export type CannedResponseHubCannedResponsesArgs = {
  category?: Maybe<Scalars["ObjectIdType"]>;
  feature: CannedResponseFeature;
  locale?: Maybe<Locale>;
  isRefund?: Maybe<Scalars["Boolean"]>;
  canRePurchase?: Maybe<Scalars["Boolean"]>;
};

export type CannedResponseHubFilledCannedResponseTextArgs = {
  searchType?: Maybe<FilledCannedResponseSearchType>;
  searchId: Scalars["ObjectIdType"];
  cannedResponseId: Scalars["ObjectIdType"];
};

export type CannedResponseSchema = {
  readonly __typename?: "CannedResponseSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
};

export type CartPriceDetailSchema = {
  readonly __typename?: "CartPriceDetailSchema";
  readonly productPrice?: Maybe<CurrencyValue>;
  readonly shippingPrice?: Maybe<CurrencyValue>;
  readonly total?: Maybe<CurrencyValue>;
};

export type CartPriceDetailSchemaProductPriceArgs = {
  includeTax?: Maybe<Scalars["Boolean"]>;
  forMmrpRefund?: Maybe<Scalars["Boolean"]>;
};

export type CartPriceDetailSchemaShippingPriceArgs = {
  includeTax?: Maybe<Scalars["Boolean"]>;
  forMmrpRefund?: Maybe<Scalars["Boolean"]>;
};

export type CaTaxConstants = {
  readonly __typename?: "CATaxConstants";
  readonly marketplaceProvinces: ReadonlyArray<Scalars["String"]>;
  readonly pstQstProvinces: ReadonlyArray<Scalars["String"]>;
};

export type CategorizationSource =
  | "MANUAL_OVERRIDE_TOOL"
  | "HUMAN_LABELED"
  | "INFERENCE_MODEL"
  | "MERCHANT_SPECIFIED"
  | "MONGO_BACK_FILL"
  | "DISPUTE";

export type CategoryClassificationTaggerJobSchema = {
  readonly __typename?: "CategoryClassificationTaggerJobSchema";
  readonly jobId: Scalars["ObjectIdType"];
  readonly title: Scalars["String"];
  readonly description: Scalars["String"];
  readonly imageUrls?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly treeVersion?: Maybe<Scalars["String"]>;
  readonly merchantGeneratedCategory?: Maybe<TaxonomyCategorySchema>;
  readonly modelGeneratedCategory?: Maybe<TaxonomyCategorySchema>;
};

export type ChangeDisplayNameInput = {
  readonly displayName: Scalars["String"];
};

export type ChangeDisplayNameMutation = {
  readonly __typename?: "ChangeDisplayNameMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly displayName?: Maybe<Scalars["String"]>;
};

export type ChangeEmailInput = {
  readonly email: Scalars["String"];
  readonly password: Scalars["String"];
};

export type ChangeEmailMutation = {
  readonly __typename?: "ChangeEmailMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly passwordOk?: Maybe<Scalars["Boolean"]>;
  readonly email?: Maybe<Scalars["String"]>;
};

export type ChangeLocale = {
  readonly __typename?: "ChangeLocale";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ChangeLocaleInput = {
  readonly locale: Locale;
};

export type ChangePasswordInput = {
  readonly curPassword?: Maybe<Scalars["String"]>;
  readonly newPassword?: Maybe<Scalars["String"]>;
};

export type ChangePasswordMutation = {
  readonly __typename?: "ChangePasswordMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly passwordOk?: Maybe<Scalars["Boolean"]>;
};

export type ChangePhoneNumberMutation = {
  readonly __typename?: "ChangePhoneNumberMutation";
  readonly sendCode: ChangePhoneNumberSendCodeMutation;
  readonly verifyCode: ChangePhoneNumberVerifyCodeMutation;
};

export type ChangePhoneNumberMutationSendCodeArgs = {
  input: ChangePhoneNumberSendCodeInput;
};

export type ChangePhoneNumberMutationVerifyCodeArgs = {
  input: ChangePhoneNumberVerifyCodeInput;
};

export type ChangePhoneNumberSendCodeInput = {
  readonly newPhoneNumber: Scalars["String"];
};

export type ChangePhoneNumberSendCodeMutation = {
  readonly __typename?: "ChangePhoneNumberSendCodeMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly sentOk: Scalars["Boolean"];
};

export type ChangePhoneNumberVerifyCodeInput = {
  readonly newPhoneNumber: Scalars["String"];
  readonly verificationCode: Scalars["String"];
};

export type ChangePhoneNumberVerifyCodeMutation = {
  readonly __typename?: "ChangePhoneNumberVerifyCodeMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly verifiedOk: Scalars["Boolean"];
};

export type ChangePreferredUnitsInput = {
  readonly preferredWeightUnit: WeightUnit;
  readonly preferredLengthUnit: LengthUnit;
};

export type ChangePreferredUnitsMutation = {
  readonly __typename?: "ChangePreferredUnitsMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly ok?: Maybe<Scalars["Boolean"]>;
};

export type ChangeShippingProviderStatus = {
  readonly __typename?: "ChangeShippingProviderStatus";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly shippingProvider?: Maybe<ShippingProviderSchema>;
};

export type ChangeShippingProviderStatusInput = {
  readonly providerId: Scalars["Int"];
};

export type ChangeVacationSettingsInput = {
  readonly startDate?: Maybe<DatetimeInput>;
  readonly endDate?: Maybe<DatetimeInput>;
  readonly primaryWarehouseOnly: Scalars["Boolean"];
};

export type ChangeVacationSettingsMutation = {
  readonly __typename?: "ChangeVacationSettingsMutation";
  readonly message?: Maybe<Scalars["String"]>;
  readonly ok?: Maybe<Scalars["Boolean"]>;
};

export type ChargeInput = {
  readonly chargeId: Scalars["String"];
  readonly chargeProvider?: Maybe<ChargePaymentProviderType>;
  readonly clientToken?: Maybe<Scalars["String"]>;
  readonly paypalPayerId?: Maybe<Scalars["String"]>;
  readonly paypalPayerEmail?: Maybe<Scalars["String"]>;
  readonly paypalDeviceData?: Maybe<Scalars["String"]>;
};

export type ChargeItem = {
  readonly __typename?: "ChargeItem";
  readonly type: ChargeItemType;
};

export type ChargeItemType =
  | "STORE_REGISTRATION_FEE"
  | "PRODUCT_BOOST_CAMPAIGN";

export type ChargeMutation = {
  readonly __typename?: "ChargeMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ChargePaymentProviderType =
  | "NONE"
  | "PAYONEER"
  | "PAYPAL"
  | "UMPAY";

export type ChargeTransactionInfo = {
  readonly __typename?: "ChargeTransactionInfo";
  readonly chargeProvider?: Maybe<ChargePaymentProviderType>;
  readonly chargeItem?: Maybe<ChargeItem>;
  readonly currency?: Maybe<PaymentCurrencyCode>;
  readonly totalAmountInUsd?: Maybe<CurrencyValue>;
  readonly totalAmount?: Maybe<CurrencyValue>;
  readonly state: ChargeTransactionState;
  readonly chargeCreatedTime: Datetime;
  readonly chargeReceivedTime?: Maybe<Datetime>;
  readonly canChangeChargeProvider: Scalars["Boolean"];
  readonly type: ChargeTransactionType;
  readonly clientToken?: Maybe<Scalars["String"]>;
  readonly signupUrl?: Maybe<Scalars["String"]>;
};

export type ChargeTransactionState =
  | "EXCEPTION"
  | "SUCCEEDED"
  | "REFUNDED"
  | "VOIDED"
  | "FAILED"
  | "NEW"
  | "REQUIRE_REVIEW"
  | "PENDING";

export type ChargeTransactionType = "INVOICING" | "BUYING";

export type CheckpointAfterActionState =
  | "DELETE_FOR_REUSE_API_SUCCESS"
  | "EXCEPTION"
  | "IN_TRANSIT"
  | "ATTEMPT_FAIL"
  | "REACTIVATE_FAIL"
  | "DELETE_SUCCESS"
  | "PENDING"
  | "DELETE_FAIL"
  | "TRACK_END"
  | "DELETE_FOR_REUSE_API_FAIL"
  | "EXPIRED"
  | "MARKED_SHIPPED"
  | "DELIVERED"
  | "TRACKING_CHANGED"
  | "AVAILABLE_FOR_PICKUP"
  | "CANCELLED"
  | "ARRIVE_AT_DEST_COUNTRY"
  | "ORDER_PLACED"
  | "SEND_TRACKING_FAIL"
  | "DELETE_FOR_REUSE_DATA"
  | "ALERT"
  | "OUT_FOR_DELIVERY"
  | "INFO_RECEIVED"
  | "REACTIVATE_SUCCESS"
  | "SEND_TRACKING_SUCCESS";

export type ChromeBadgeSchema = {
  readonly __typename?: "ChromeBadgeSchema";
  readonly badgeType?: Maybe<ChromeBadgeType>;
  readonly expiryDate?: Maybe<Datetime>;
};

export type ChromeBadgeType = "NEW" | "BETA";

export type ChromeNodeSchema = {
  readonly __typename?: "ChromeNodeSchema";
  readonly url?: Maybe<Scalars["String"]>;
  readonly path?: Maybe<Scalars["String"]>;
  readonly label?: Maybe<Scalars["String"]>;
  readonly overviewLabel?: Maybe<Scalars["String"]>;
  readonly badge?: Maybe<ChromeBadgeSchema>;
  readonly children?: Maybe<ReadonlyArray<ChromeNodeSchema>>;
  readonly nodeid?: Maybe<Scalars["String"]>;
  readonly keywords?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly description?: Maybe<Scalars["String"]>;
  readonly searchPhrase?: Maybe<Scalars["String"]>;
  readonly showInSideMenu?: Maybe<Scalars["Boolean"]>;
  readonly openInNewTab?: Maybe<Scalars["Boolean"]>;
  readonly totalHits?: Maybe<Scalars["Int"]>;
  readonly mostRecentHit?: Maybe<Datetime>;
  readonly countSelectors?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type ChromeSchema = {
  readonly __typename?: "ChromeSchema";
  readonly merchantGraph?: Maybe<ChromeNodeSchema>;
  readonly merchantGraphString?: Maybe<Scalars["String"]>;
  readonly objectSearch?: Maybe<NavigationResultSchema>;
};

export type ChromeSchemaObjectSearchArgs = {
  objectId: Scalars["ObjectIdType"];
  currentPath?: Maybe<Scalars["String"]>;
};

export type ClearAllUiState = {
  readonly __typename?: "ClearAllUIState";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ClearUiState = {
  readonly __typename?: "ClearUIState";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ClearVacationSettingsMutation = {
  readonly __typename?: "ClearVacationSettingsMutation";
  readonly ok?: Maybe<Scalars["Boolean"]>;
  readonly message?: Maybe<Scalars["String"]>;
};

export type ClientWritableBucket =
  | "BRAND_LOGO"
  | "RACC_SOURCE_ASSETS"
  | "TEMP_UPLOADS"
  | "REGULATOR_REPORT_FILE_UPLOADS"
  | "TEMP_UPLOADS_V2"
  | "PUBLIC_APP_LOGO"
  | "TAX_SETTING_FILE_UPLOADS";

export type ColumnCategoryId =
  | "LOGISTICS"
  | "COUNTRY_SHIPPING"
  | "ADDITIONAL_ITEM_SHIPPING"
  | "PRODUCT_DETAILS"
  | "TTD";

export type ColumnCategorySchema = {
  readonly __typename?: "ColumnCategorySchema";
  readonly id: ColumnCategoryId;
  readonly name: Scalars["String"];
};

export type CommerceMerchantEuEntityStatus =
  | "NOT_STARTED"
  | "VALIDATED"
  | "REJECTED"
  | "PENDING_REVIEW"
  | "NOT_ESTABLISHED";

export type CommerceMerchantReviewStatus =
  | "FAILED"
  | "NOT_APPLICABLE"
  | "PENDING_ADMIN_REVIEW"
  | "APPROVED"
  | "PENDING_AUTO_REVIEW";

export type CommerceMerchantState =
  | "WISH_EXPRESS_ONLY"
  | "PENDING_PHONE"
  | "REQUEST_INFO"
  | "VACATION"
  | "DISABLED"
  | "PENDING_EMAIL"
  | "APPROVED"
  | "PENDING";

export type CommerceMerchantTaxInfoGermanyNoNumberReason =
  | "WILL_REGISTER_SOON"
  | "BUYER_IS_IMPORTER_OF_RECORD";

export type CommerceMerchantTaxInfoStatus =
  | "OLD_ACTIVE_NEW_PENDING_REVIEW"
  | "INACTIVE"
  | "PENDING_ONESOURCE_SETUP"
  | "ACTIVE"
  | "PENDING_REVIEW"
  | "FAILED_REVIEW";

export type CommerceProductCondition = "NEW" | "USED" | "REFURBISHED";

export type CommerceProductFpReviewStatus =
  | "UNDER_REVIEW"
  | "APPROVED"
  | "BLOCKED";

export type CommerceProductListingState =
  | "ACTIVE"
  | "MERCHANT_INACTIVE"
  | "REMOVED_BY_MERCHANT"
  | "REMOVED_BY_WISH"
  | "WISH_INACTIVE";

export type CommerceProductListingStateReason =
  | "AVAILABLE"
  | "AVAILABLE_AND_PENDING_EDIT"
  | "REMOVED_BY_MERCH"
  | "LISTING_BLOCKED"
  | "NEW_LISTING_UNDER_REVIEW"
  | "MERCH_INACTIVE_AND_BLOCKED_EDIT"
  | "NOT_AVAILABLE"
  | "AVAILABLE_AND_BLOCKED_EDIT"
  | "REMOVED_BY_WISH"
  | "MERCH_INACTIVE"
  | "LISTING_UNDER_REVIEW"
  | "MERCH_INACTIVE_AND_PENDING_EDIT"
  | "NEW_LISTING_BLOCKED";

export type CommerceProductReviewStatus = "REJECTED" | "APPROVED" | "PENDING";

export type CommerceProductStatus =
  | "DISABLED"
  | "REMOVED_BY_MERCHANT"
  | "ENABLED";

export type CommerceTransactionClient =
  | "ANDROID_INSTANT_APP"
  | "WEB"
  | "WINDOWS_APP"
  | "IOS_APP"
  | "ANDROID_APP"
  | "WINDOWS_PHONE_APP"
  | "IPAD_APP"
  | "MOBILE_WEB";

export type CommerceTransactionState =
  | "REQUIRE_REVIEW"
  | "EXCEPTION"
  | "C2C_ACCEPTED"
  | "LABEL_GENERATED"
  | "LABEL_DOWNLOADED"
  | "REFUNDED"
  | "DELAYING"
  | "ACKNOWLEDGED"
  | "GIFT_WAITING_FOR_ACCEPT"
  | "C2C_DELIVERED"
  | "SHIPPED"
  | "C2C_ON_DELIVERY"
  | "PENDING"
  | "APPROVED"
  | "DECLINED";

export type CommerceTransactionTaxEventType =
  | "REFUND_SHIPPING"
  | "SALE_SHIPPING"
  | "REFUND_PRICE"
  | "SALE_PRICE";

export type CommerceTransactionTaxRemitType =
  | "MERCHANT_REMIT"
  | "WISH_REMIT"
  | "NO_REMIT"
  | "TBD_REMIT";

export type ConfirmedDeliveryCarriers = {
  readonly __typename?: "ConfirmedDeliveryCarriers";
  readonly availableCountries: ReadonlyArray<Country>;
  readonly shippingProviders: ReadonlyArray<ShippingProviderSchema>;
  readonly availableShippingCountries: ReadonlyArray<CountryAvailableShippingProviders>;
  readonly swedenConfirmedDeliveredCarrierTypes: ReadonlyArray<SwedenConfirmedDeliveredCarrierTypes>;
};

export type ContactBuyer = {
  readonly __typename?: "ContactBuyer";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ContactBuyerInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly contactReason: ReturnRequestContactBuyerReason;
  readonly message: Scalars["String"];
  readonly otherReasonExplanation?: Maybe<Scalars["String"]>;
  readonly supportingDocument?: Maybe<Scalars["String"]>;
};

export type ContestWarningType =
  | "ON_PRODUCT_COMBINED_CANCER_REPRODUCTIVE"
  | "RAW_WOOD"
  | "FOOD"
  | "DEP_PASSENGER_OFF_ROAD_VEHICLE"
  | "CHEMICAL"
  | "DIESEL_ENGINE"
  | "ON_PRODUCT_REPRODUCTIVE"
  | "DEP_RECREATIONAL_VESSEL"
  | "ON_PRODUCT_CANCER"
  | "FURNITURE";

export type ConversionRate = "MKL_POLICY" | "WISH_LATEST";

export type ConvertToPlus = {
  readonly __typename?: "ConvertToPlus";
  readonly ok?: Maybe<Scalars["Boolean"]>;
};

export type ConvertToPlusInput = {
  readonly merchantIds: ReadonlyArray<Scalars["ObjectIdType"]>;
};

export type Count = {
  readonly __typename?: "Count";
  readonly value: Scalars["Float"];
  readonly unit: CountUnit;
};

export type CountValueArgs = {
  targetUnit?: Maybe<CountUnit>;
};

export type CounterfeitReason =
  | "UNLICENSED_MEDIA"
  | "SAFETY_EQUIPMENT"
  | "LIGHTERS"
  | "PROP_MONEY"
  | "GRAPHIC_VIOLENCE"
  | "ILLEGAL_ELECTRONICS"
  | "ANIMAL_PRODUCTS"
  | "BLURRED_WATERMARK"
  | "WISH_ADMIN"
  | "HARMFUL_CHEMICALS"
  | "CN_PROHIBITED_PRODUCTS"
  | "FALSE_ADVERTISING"
  | "RECALLED_TOYS"
  | "CARSEAT"
  | "PLANTS_AND_SEEDS"
  | "UNVERIFIED_MONEY"
  | "WEAPON"
  | "TEAM_LOGO"
  | "PICTURED_WITH_MAJOR_BRAND"
  | "PIERCING_GUN"
  | "ADULT_CONTENT"
  | "PRICE_GOUGING"
  | "SMOKING"
  | "MISLEADING_LISTING"
  | "REGIONAL_RESTRICTIONS"
  | "PRODUCT_MODIFIED"
  | "CENSORED_FACE"
  | "NUDITY"
  | "HATE_CRIME"
  | "BLURRED_LABEL"
  | "MEDICAL_MATERIALS"
  | "AMBIGUOUS_LISTING"
  | "JEWELRY_AND_METALS"
  | "HOVERBOARD"
  | "CELEBRITY_PHOTO"
  | "TRICK_CANDLES"
  | "BLURRED_INFORMATION"
  | "CONSUMPTION_MATERIALS"
  | "HAZARDOUS_MATERIALS"
  | "IS_MAJOR_BRAND"
  | "DISTASTEFUL_CONTENT"
  | "DANGEROUS_ITEMS"
  | "HARNESS"
  | "TATTOO_GUN"
  | "MISLEADING_LISTING_AUTHENTIC_BRAND"
  | "CONTACT_LENSES"
  | "VIRTUAL_GOODS"
  | "BIKE_HELMETS"
  | "PLANT_SEEDS";

export type CounterfeitReasonCode =
  | "UNLICENSED_MEDIA"
  | "SAFETY_EQUIPMENT"
  | "LIGHTERS"
  | "PROP_MONEY"
  | "GRAPHIC_VIOLENCE"
  | "ILLEGAL_ELECTRONICS"
  | "ANIMAL_PRODUCTS"
  | "BLURRED_WATERMARK"
  | "WISH_ADMIN"
  | "HARMFUL_CHEMICALS"
  | "CN_PROHIBITED_PRODUCTS"
  | "FALSE_ADVERTISING"
  | "RECALLED_TOYS"
  | "CARSEAT"
  | "PLANTS_AND_SEEDS"
  | "UNVERIFIED_MONEY"
  | "WEAPON"
  | "TEAM_LOGO"
  | "PICTURED_WITH_MAJOR_BRAND"
  | "PIERCING_GUN"
  | "ADULT_CONTENT"
  | "PRICE_GOUGING"
  | "SMOKING"
  | "MISLEADING_LISTING"
  | "REGIONAL_RESTRICTIONS"
  | "PRODUCT_MODIFIED"
  | "CENSORED_FACE"
  | "NUDITY"
  | "HATE_CRIME"
  | "BLURRED_LABEL"
  | "MEDICAL_MATERIALS"
  | "AMBIGUOUS_LISTING"
  | "JEWELRY_AND_METALS"
  | "HOVERBOARD"
  | "CELEBRITY_PHOTO"
  | "TRICK_CANDLES"
  | "BLURRED_INFORMATION"
  | "CONSUMPTION_MATERIALS"
  | "HAZARDOUS_MATERIALS"
  | "IS_MAJOR_BRAND"
  | "DISTASTEFUL_CONTENT"
  | "DANGEROUS_ITEMS"
  | "HARNESS"
  | "TATTOO_GUN"
  | "MISLEADING_LISTING_AUTHENTIC_BRAND"
  | "CONTACT_LENSES"
  | "VIRTUAL_GOODS"
  | "BIKE_HELMETS"
  | "PLANT_SEEDS";

export type CounterfeitRiskLevel = "HIGH" | "MEDIUM" | "LOW";

export type CounterfeitViolationSchema = {
  readonly __typename?: "CounterfeitViolationSchema";
  readonly isConfirmed: Scalars["Boolean"];
  readonly reason?: Maybe<CounterfeitReason>;
  readonly reasonDisplayName?: Maybe<Scalars["String"]>;
  readonly reasonExplanation?: Maybe<Scalars["String"]>;
  readonly subcategoryMessage?: Maybe<Scalars["String"]>;
};

export type CountInput = {
  readonly value: Scalars["Float"];
  readonly unit: CountUnit;
};

export type Country = {
  readonly __typename?: "Country";
  readonly code: CountryCode;
  readonly name: Scalars["String"];
  readonly gmvRank?: Maybe<Scalars["Int"]>;
  readonly regions?: Maybe<ReadonlyArray<Region>>;
  readonly wishExpress: WishExpressCountryDetails;
  readonly restrictedProductRegion?: Maybe<RestrictedProductRegion>;
  readonly isInEurope: Scalars["Boolean"];
  readonly isFinalSaleAllowed: Scalars["Boolean"];
  readonly hasWishReturnFacility: Scalars["Boolean"];
  readonly isMerchantReturnWishAuthAllowed: Scalars["Boolean"];
  readonly isEuVat: Scalars["Boolean"];
};

export type CountryNameArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type CountryActionInput = {
  readonly countryCode: ShippableCountryCode;
  readonly action: CountryActionType;
  readonly data?: Maybe<Scalars["String"]>;
};

export type CountryActionType = "ADD" | "DELETE" | "UPDATE";

export type CountryAvailableShippingProviders = {
  readonly __typename?: "CountryAvailableShippingProviders";
  readonly country: Country;
  readonly providers: ReadonlyArray<ShippingProviderSchema>;
};

export type CountryCode =
  | "BD"
  | "WF"
  | "BF"
  | "BG"
  | "BA"
  | "BB"
  | "BE"
  | "BL"
  | "BM"
  | "BN"
  | "BO"
  | "JP"
  | "BI"
  | "BJ"
  | "BT"
  | "JM"
  | "BV"
  | "JO"
  | "WS"
  | "BQ"
  | "BR"
  | "BS"
  | "JE"
  | "BY"
  | "BZ"
  | "RU"
  | "RW"
  | "RS"
  | "RE"
  | "TM"
  | "TJ"
  | "RO"
  | "TK"
  | "GW"
  | "GU"
  | "GT"
  | "GS"
  | "GR"
  | "GQ"
  | "GP"
  | "BH"
  | "GY"
  | "GG"
  | "GF"
  | "GE"
  | "GD"
  | "GB"
  | "GA"
  | "GN"
  | "GM"
  | "GL"
  | "KW"
  | "GI"
  | "GH"
  | "OM"
  | "TN"
  | "BW"
  | "HR"
  | "HT"
  | "HU"
  | "HK"
  | "HN"
  | "HM"
  | "KR"
  | "AD"
  | "PR"
  | "PS"
  | "PW"
  | "PT"
  | "KN"
  | "PY"
  | "AI"
  | "PA"
  | "PF"
  | "PG"
  | "PE"
  | "PK"
  | "PH"
  | "PN"
  | "PL"
  | "PM"
  | "ZM"
  | "EH"
  | "EE"
  | "EG"
  | "ZA"
  | "EC"
  | "AL"
  | "AO"
  | "KZ"
  | "ET"
  | "ZW"
  | "KY"
  | "ZR"
  | "ER"
  | "ME"
  | "MD"
  | "MG"
  | "MF"
  | "MA"
  | "MC"
  | "UZ"
  | "MM"
  | "ML"
  | "MO"
  | "MN"
  | "MH"
  | "MK"
  | "MU"
  | "MT"
  | "MW"
  | "MV"
  | "MQ"
  | "MP"
  | "UK"
  | "MR"
  | "AU"
  | "UG"
  | "MY"
  | "MX"
  | "MZ"
  | "FR"
  | "AW"
  | "FX"
  | "AF"
  | "AX"
  | "FI"
  | "FJ"
  | "FK"
  | "FM"
  | "FO"
  | "NI"
  | "NL"
  | "NO"
  | "NA"
  | "VU"
  | "NC"
  | "NE"
  | "NF"
  | "NG"
  | "NZ"
  | "ES"
  | "NP"
  | "NR"
  | "NU"
  | "CK"
  | "CI"
  | "CH"
  | "CO"
  | "CN"
  | "CM"
  | "CL"
  | "CC"
  | "CA"
  | "CG"
  | "CF"
  | "CD"
  | "CZ"
  | "CY"
  | "CX"
  | "CR"
  | "CW"
  | "CV"
  | "SZ"
  | "SX"
  | "KG"
  | "KE"
  | "SR"
  | "KI"
  | "KH"
  | "SV"
  | "KM"
  | "ST"
  | "SK"
  | "SJ"
  | "SI"
  | "SH"
  | "SO"
  | "SN"
  | "SM"
  | "SL"
  | "SC"
  | "SB"
  | "SA"
  | "SG"
  | "SE"
  | "SD"
  | "DO"
  | "DM"
  | "DJ"
  | "DK"
  | "DE"
  | "YE"
  | "AT"
  | "DZ"
  | "US"
  | "UY"
  | "YU"
  | "YT"
  | "UM"
  | "TZ"
  | "LC"
  | "LA"
  | "MS"
  | "TW"
  | "TT"
  | "TR"
  | "LK"
  | "TP"
  | "LI"
  | "LV"
  | "TO"
  | "LT"
  | "LU"
  | "LR"
  | "LS"
  | "TH"
  | "TF"
  | "TG"
  | "TD"
  | "TC"
  | "LY"
  | "VA"
  | "VC"
  | "AE"
  | "VE"
  | "AG"
  | "VG"
  | "IQ"
  | "VI"
  | "IS"
  | "AM"
  | "IT"
  | "VN"
  | "AN"
  | "AQ"
  | "AS"
  | "AR"
  | "IM"
  | "IL"
  | "IO"
  | "IN"
  | "LB"
  | "AZ"
  | "IE"
  | "ID"
  | "UA"
  | "QA"
  | "TV";

export type CountryShippingInput = {
  readonly countryCode: CountryCode;
  readonly enabled?: Maybe<Scalars["Boolean"]>;
  readonly price?: Maybe<CurrencyInput>;
  readonly additionalPrice?: Maybe<CurrencyInput>;
  readonly timeToDoor?: Maybe<Scalars["Int"]>;
  readonly regionShipping?: Maybe<ReadonlyArray<RegionShippingInput>>;
};

export type CountryShippingSchema = {
  readonly __typename?: "CountryShippingSchema";
  readonly country: Country;
  readonly enabled: Scalars["Boolean"];
  readonly price?: Maybe<CurrencyValue>;
  readonly additionalPrice?: Maybe<CurrencyValue>;
  readonly regionShipping?: Maybe<ReadonlyArray<RegionShippingSchema>>;
  readonly timeToDoor?: Maybe<Scalars["Int"]>;
  readonly wishExpressTtdRequirement?: Maybe<Scalars["Int"]>;
};

export type CountryShippingSetting = {
  readonly countryCode: ShippableCountryCode;
  readonly enabled: Scalars["Boolean"];
  readonly price?: Maybe<CurrencyInput>;
};

export type CountUnit = "COUNT" | "LOAD" | "POD" | "ROLL" | "WASH";

export type CreateAnnouncementContentSchemaInput = {
  readonly locale: AnnouncementLocale;
  readonly title: Scalars["String"];
  readonly message: Scalars["String"];
  readonly link?: Maybe<Scalars["String"]>;
  readonly ctaText?: Maybe<Scalars["String"]>;
  readonly ctaDueDate?: Maybe<DatetimeInput>;
};

export type CreateBdBaseAnnouncement = {
  readonly __typename?: "CreateBDBaseAnnouncement";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type CreateBrandEnrollmentInput = {
  readonly proposedBrandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly brandOwnerName: Scalars["String"];
  readonly proofOfAuthorizations: ReadonlyArray<FileInput>;
  readonly brandRepName: Scalars["String"];
  readonly brandRepTitle: Scalars["String"];
  readonly email: Scalars["String"];
  readonly phoneNumber: Scalars["String"];
  readonly isNewBrand: Scalars["Boolean"];
  readonly providedBrandName: Scalars["String"];
  readonly providedBrandWebsite?: Maybe<Scalars["String"]>;
  readonly providedBrandLogoFile?: Maybe<FileInput>;
  readonly providedBrandAdditionalInfo?: Maybe<Scalars["String"]>;
  readonly trademarkInfos: ReadonlyArray<BrandPartnerTrademarkInfoInputObject>;
};

export type CreateBrandEnrollmentRequest = {
  readonly __typename?: "CreateBrandEnrollmentRequest";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type CreateBulkOneoffAdminToolPayments = {
  readonly __typename?: "CreateBulkOneoffAdminToolPayments";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type CreateBulkOneoffAdminToolPaymentsInput = {
  readonly s3FileUrl: Scalars["String"];
};

export type CreateChargeTransactionInput = {
  readonly amount: CurrencyInput;
  readonly type: ChargeItemType;
  readonly redirectUrl?: Maybe<Scalars["String"]>;
  readonly flowType: ChargeTransactionType;
};

export type CreateChargeTransactionMutation = {
  readonly __typename?: "CreateChargeTransactionMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly chargeId?: Maybe<Scalars["ObjectIdType"]>;
};

export type CreateClaim = {
  readonly __typename?: "CreateClaim";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type CreateClaimInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly claimReason: ReturnRequestClaimReason;
  readonly message: Scalars["String"];
  readonly otherReasonExplanation?: Maybe<Scalars["String"]>;
  readonly supportingDocument?: Maybe<Scalars["String"]>;
};

export type CreateLqdCampaign = {
  readonly __typename?: "CreateLQDCampaign";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type CreateProductTaxonomyCategoryDispute = {
  readonly __typename?: "CreateProductTaxonomyCategoryDispute";
  readonly ok: Scalars["Boolean"];
  readonly productDisputeEligibility: ProductTaxonomyCategoryDisputeEligibilityEnum;
};

export type CreateProductTaxonomyCategoryDisputeInput = {
  readonly productId: Scalars["ObjectIdType"];
  readonly categoryIdProposed: Scalars["Int"];
  readonly categoryTreeVersion: Scalars["String"];
  readonly supportFiles?: Maybe<ReadonlyArray<FileInput>>;
  readonly merchantNote?: Maybe<Scalars["String"]>;
};

export type CreateShippingPlan = {
  readonly __typename?: "CreateShippingPlan";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly shippingPlan?: Maybe<ShippingPlanSchema>;
};

export type CreateShippingProvider = {
  readonly __typename?: "CreateShippingProvider";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly shippingProvider?: Maybe<ShippingProviderSchema>;
};

export type CreateSystemUpdateBaseAnnouncement = {
  readonly __typename?: "CreateSystemUpdateBaseAnnouncement";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type CreateSystemUpdateBaseAnnouncementInput = {
  readonly publishDate?: Maybe<DatetimeInput>;
  readonly expiryDate?: Maybe<DatetimeInput>;
  readonly audienceSourceType: AnnouncementAudienceSourceType;
  readonly audienceGroups?: Maybe<ReadonlyArray<AudienceGroup>>;
  readonly merchantIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly csvFields?: Maybe<AnnouncementCsvFieldsSchemaInput>;
  readonly overrideEmailPreference: Scalars["Boolean"];
  readonly categories: ReadonlyArray<AnnouncementCategory>;
  readonly program?: Maybe<AnnouncementProgram>;
  readonly locales: ReadonlyArray<AnnouncementLocale>;
  readonly contentType?: Maybe<AnnouncementContentType>;
  readonly content: ReadonlyArray<CreateAnnouncementContentSchemaInput>;
};

export type CreateTakedownRequest = {
  readonly __typename?: "CreateTakedownRequest";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly takedownRequestId?: Maybe<Scalars["ObjectIdType"]>;
};

export type CreateTakedownRequestInput = {
  readonly brandPartnerBrandInfoId: Scalars["ObjectIdType"];
  readonly typeOfInfringement: TypeOfInfringement;
  readonly productIds: ReadonlyArray<Scalars["ObjectIdType"]>;
  readonly notes?: Maybe<Scalars["String"]>;
};

export type CreateWhitelistProductsInput = {
  readonly merchantId: Scalars["ObjectIdType"];
  readonly productIds: ReadonlyArray<Scalars["ObjectIdType"]>;
};

export type CreateWhitelistProductsMutation = {
  readonly __typename?: "CreateWhitelistProductsMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type CreditPaymentType = "IMPRESSION_FEE" | "OTHER" | "ENROLLMENT_FEE";

export type CreditTransactionRecord = {
  readonly __typename?: "CreditTransactionRecord";
  readonly id: Scalars["ObjectIdType"];
  readonly dateCreated: Datetime;
  readonly updatedReason: CreditUpdateReason;
  readonly paymentType?: Maybe<CreditPaymentType>;
  readonly campaignId?: Maybe<Scalars["ObjectIdType"]>;
  readonly productId?: Maybe<Scalars["ObjectIdType"]>;
  readonly transactionAmount?: Maybe<CurrencyValue>;
  readonly expiredDate?: Maybe<Datetime>;
  readonly updateReasonDescription: Scalars["String"];
  readonly receiptId?: Maybe<Scalars["ObjectIdType"]>;
};

export type CreditUpdateReason =
  | "REFUND"
  | "PAYMENT_BY_CREDITS"
  | "ISSUING_CREDITS";

export type CsPerformanceStats = {
  readonly __typename?: "CSPerformanceStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly lateResponseRate30d?: Maybe<Scalars["Float"]>;
  readonly customerSatisfactionScore?: Maybe<Scalars["Float"]>;
  readonly averageTicketResponseTime?: Maybe<Timedelta>;
  readonly gmv: CurrencyValue;
  readonly orders?: Maybe<Scalars["Int"]>;
  readonly orders30d?: Maybe<Scalars["Int"]>;
  readonly refund30d?: Maybe<Scalars["Int"]>;
  readonly refundRatio30d?: Maybe<Scalars["Float"]>;
  readonly orders93d?: Maybe<Scalars["Int"]>;
  readonly refund93d?: Maybe<Scalars["Int"]>;
  readonly refundRatio93d?: Maybe<Scalars["Float"]>;
  readonly chargeback?: Maybe<Scalars["Int"]>;
  readonly chargebackRatio?: Maybe<Scalars["Float"]>;
  readonly chargebackAmount: CurrencyValue;
  readonly chargebackAmountRatio?: Maybe<Scalars["Float"]>;
  readonly tickets?: Maybe<Scalars["Int"]>;
  readonly ticketRatio?: Maybe<Scalars["Float"]>;
  readonly customerSatisfaction?: Maybe<Scalars["Float"]>;
  readonly averageRating30d?: Maybe<Scalars["Float"]>;
};

export type CsvAnnouncementSchema = {
  readonly __typename?: "CSVAnnouncementSchema";
  readonly validate?: Maybe<CsvValidationSchema>;
};

export type CsvAnnouncementSchemaValidateArgs = {
  messageTemplateEn: Scalars["String"];
  messageTemplateCn?: Maybe<Scalars["String"]>;
  csvFileUrl: Scalars["String"];
  contentType: AnnouncementContentType;
};

export type CsvColumnMappingEntryInput = {
  readonly key: Scalars["String"];
  readonly value: Scalars["Int"];
};

export type CsvColumnMappingEntrySchema = {
  readonly __typename?: "CsvColumnMappingEntrySchema";
  readonly key: Scalars["String"];
  readonly value: Scalars["Int"];
};

export type CsvExportFilterType =
  | "UNCONFIRMED_TRACKING"
  | "SHIPPED"
  | "NO_TRACKING"
  | "REFUNDED"
  | "REFUNDED_BY_WISH"
  | "FBW"
  | "FBS";

export type CsvFulfillmentErrorSchema = {
  readonly __typename?: "CsvFulfillmentErrorSchema";
  readonly message: Scalars["String"];
  readonly row: Scalars["String"];
  readonly orderId: Scalars["ObjectIdType"];
};

export type CsvFulfillmentJobSchema = {
  readonly __typename?: "CsvFulfillmentJobSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly csvUrl: Scalars["String"];
  readonly fulfilledCount: Scalars["Int"];
  readonly errorCount: Scalars["Int"];
  readonly totalRows: Scalars["Int"];
  readonly status: MerchantFeedJobStatus;
  readonly processedCount: Scalars["Int"];
  readonly startTime: Datetime;
  readonly fileName?: Maybe<Scalars["String"]>;
  readonly errors?: Maybe<ReadonlyArray<CsvFulfillmentErrorSchema>>;
};

export type CsvProductImportJobSchema = {
  readonly __typename?: "CSVProductImportJobSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly feedType: ProductCsvJobType;
  readonly startTime: Datetime;
  readonly status: MerchantFeedJobStatus;
  readonly totalRows: Scalars["Int"];
  readonly processedCount: Scalars["Int"];
  readonly errorCount: Scalars["Int"];
  readonly addedCount: Scalars["Int"];
  readonly updatedCount: Scalars["Int"];
  readonly fpApprovedCount: Scalars["Int"];
  readonly fpBlockedCount: Scalars["Int"];
  readonly csvUrl?: Maybe<Scalars["String"]>;
  readonly fileName?: Maybe<Scalars["String"]>;
};

export type CsvValidationSchema = {
  readonly __typename?: "CSVValidationSchema";
  readonly errors?: Maybe<Scalars["String"]>;
  readonly previewData?: Maybe<Scalars["JSONString"]>;
  readonly placeholderKeys?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly midCount?: Maybe<Scalars["Int"]>;
  readonly columnMapping: ReadonlyArray<CsvColumnMappingEntrySchema>;
};

export type CurrencyInput = {
  readonly amount: Scalars["Float"];
  readonly currencyCode: PaymentCurrencyCode;
};

export type CurrencyValue = {
  readonly __typename?: "CurrencyValue";
  readonly amount: Scalars["Float"];
  readonly currencyCode: Scalars["String"];
  readonly display: Scalars["String"];
  readonly convertedTo: CurrencyValue;
};

export type CurrencyValueConvertedToArgs = {
  currency: PaymentCurrencyCode;
  rate: ConversionRate;
};

export type CustomerIdentityInfo = {
  readonly __typename?: "CustomerIdentityInfo";
  readonly number: Scalars["String"];
  readonly numberName: Scalars["String"];
};

export type CustomerPaymentSchema = {
  readonly __typename?: "CustomerPaymentSchema";
  readonly id?: Maybe<Scalars["String"]>;
  readonly paymentProvider: TransactionPaymentType;
};

export type CustomerPriceSchema = {
  readonly __typename?: "CustomerPriceSchema";
  readonly unitPrice: CurrencyValue;
  readonly unitShipping: CurrencyValue;
  readonly credit?: Maybe<CurrencyValue>;
  readonly total: CurrencyValue;
};

export type CustomerPriceSchemaUnitPriceArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type CustomerPriceSchemaUnitShippingArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type CustomerPriceSchemaCreditArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type CustomerPriceSchemaTotalArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type CustomerSchema = {
  readonly __typename?: "CustomerSchema";
  readonly payment: CustomerPaymentSchema;
  readonly pricing: CustomerPriceSchema;
  readonly user?: Maybe<WishUserSchema>;
};

export type CustomerSupportConstants = {
  readonly __typename?: "CustomerSupportConstants";
  readonly issues: ReadonlyArray<CustomerSupportIssueType>;
};

export type CustomerSupportIssueType = {
  readonly __typename?: "CustomerSupportIssueType";
  readonly id: Scalars["Int"];
  readonly label: Scalars["String"];
};

export type CustomerSupportServiceSchema = {
  readonly __typename?: "CustomerSupportServiceSchema";
  readonly tickets: ReadonlyArray<CustomerSupportTicket>;
  readonly ticketCount: Scalars["Int"];
  readonly ticket?: Maybe<CustomerSupportTicket>;
};

export type CustomerSupportServiceSchemaTicketsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<TicketSearchType>;
  sort?: Maybe<CustomerSupportTicketSort>;
  states?: Maybe<ReadonlyArray<CustomerSupportTicketState>>;
  issueTypes?: Maybe<ReadonlyArray<Scalars["Int"]>>;
  includeMissingTicketType?: Maybe<Scalars["Boolean"]>;
  types?: Maybe<ReadonlyArray<CustomerSupportTicketType>>;
  requestTypes?: Maybe<ReadonlyArray<CustomerSupportTicketRequestType>>;
};

export type CustomerSupportServiceSchemaTicketCountArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<TicketSearchType>;
  states?: Maybe<ReadonlyArray<CustomerSupportTicketState>>;
  issueTypes?: Maybe<ReadonlyArray<Scalars["Int"]>>;
  includeMissingTicketType?: Maybe<Scalars["Boolean"]>;
  types?: Maybe<ReadonlyArray<CustomerSupportTicketType>>;
  requestTypes?: Maybe<ReadonlyArray<CustomerSupportTicketRequestType>>;
};

export type CustomerSupportServiceSchemaTicketArgs = {
  id: Scalars["ObjectIdType"];
};

export type CustomerSupportTicket = {
  readonly __typename?: "CustomerSupportTicket";
  readonly id: Scalars["ObjectIdType"];
  readonly orderId?: Maybe<Scalars["ObjectIdType"]>;
  readonly state: CustomerSupportTicketState;
  readonly type?: Maybe<CustomerSupportTicketType>;
  readonly createdTime: Datetime;
  readonly lastUpdateTime?: Maybe<Datetime>;
  readonly user: WishUserSchema;
  readonly closeDate?: Maybe<Datetime>;
  readonly issueType?: Maybe<CustomerSupportIssueType>;
  readonly requestType?: Maybe<CustomerSupportTicketRequestType>;
  readonly timeToRespond?: Maybe<Timedelta>;
  readonly returnInformation?: Maybe<ReturnInformationSchema>;
  readonly replies?: Maybe<ReadonlyArray<CustomerSupportTicketReplySchema>>;
};

export type CustomerSupportTicketCancelReturnReasonSchema = {
  readonly __typename?: "CustomerSupportTicketCancelReturnReasonSchema";
  readonly reason: ReturnRequestCancelReason;
};

export type CustomerSupportTicketIssueRefundReasonSchema = {
  readonly __typename?: "CustomerSupportTicketIssueRefundReasonSchema";
  readonly reason: ReturnRequestRefundReason;
  readonly reasonText: Scalars["String"];
};

export type CustomerSupportTicketMutations = {
  readonly __typename?: "CustomerSupportTicketMutations";
  readonly contactBuyer?: Maybe<ContactBuyer>;
  readonly authorizeReturn?: Maybe<AuthorizeReturn>;
  readonly cancelReturn?: Maybe<CancelReturn>;
  readonly rejectReturn?: Maybe<RejectReturn>;
  readonly issueRefund?: Maybe<IssueRefund>;
  readonly createClaim?: Maybe<CreateClaim>;
};

export type CustomerSupportTicketMutationsContactBuyerArgs = {
  input: ContactBuyerInput;
};

export type CustomerSupportTicketMutationsAuthorizeReturnArgs = {
  input: AuthorizeReturnInput;
};

export type CustomerSupportTicketMutationsCancelReturnArgs = {
  input: CancelReturnInput;
};

export type CustomerSupportTicketMutationsRejectReturnArgs = {
  input: RejectReturnInput;
};

export type CustomerSupportTicketMutationsIssueRefundArgs = {
  input: IssueRefundInput;
};

export type CustomerSupportTicketMutationsCreateClaimArgs = {
  input: CreateClaimInput;
};

export type CustomerSupportTicketReplyMessageType =
  | "CANCELLED_REPLACEMENT_REQUEST"
  | "MOVE_TO_FRAUD_QUEUE"
  | "LOGGED_OUT_FORM_CREATION_MESSAGE"
  | "MANUAL_REFUND_CONFIRMATION"
  | "MOVE_TO_ORIGINAL_QUEUE"
  | "GURU_LINK"
  | "MERCHANT_APPEAL_TO_SUPPORT"
  | "ACCEPT_REPLACEMENT_REQUEST"
  | "ADMIN_REQUEST_REFUND_CONFIRMATION"
  | "DECLINE_REPLACEMENT_REQUEST"
  | "COMMENT"
  | "MESSAGE_TO_ADMIN"
  | "AUTO_BOUNCED_TO_ADMIN"
  | "ADMIN_DELEGATE"
  | "TEXT_REPLY"
  | "WISH_APPEAL_TO_SUPPORT"
  | "CLOSE_REPLY"
  | "ADMIN_REQUEST_SUPER"
  | "EXPIRED_REPLACEMENT_REQUEST"
  | "ESCALATE_TO_FRAUD_INTERNAL"
  | "MERGED"
  | "RELABEL_REPLY"
  | "ESCALATE_TO_INTERNAL"
  | "ESCALATE_TO_MERCHANT"
  | "HIDDEN_TO_MERCHANT_ADMIN_REPLY"
  | "REOPENED"
  | "AUTO_BOUNCED_TO_ADMIN_120"
  | "CHANGE_LOCALE_REPLY"
  | "USER_APPEAL_TO_SUPPORT"
  | "REFUND_CONFIRMATION"
  | "ADMIN_REPLY"
  | "REPORT_STORE"
  | "AUTO_BOUNCED_TO_ADMIN_24"
  | "REQUIRE_REVIEW_MERCHANT_REPLY";

export type CustomerSupportTicketReplySchema = {
  readonly __typename?: "CustomerSupportTicketReplySchema";
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly visibleToUser: Scalars["Boolean"];
  readonly senderTitle: Scalars["String"];
  readonly message: Scalars["String"];
  readonly userLocale?: Maybe<Scalars["String"]>;
  readonly date?: Maybe<Datetime>;
  readonly imageUrls?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly messageType: CustomerSupportTicketReplyMessageType;
  readonly senderType: CustomerSupportTicketReplySenderType;
  readonly replyAttachments: ReadonlyArray<MerchantFileSchema>;
};

export type CustomerSupportTicketReplySenderType =
  | "MERCHANT"
  | "WISH_ASSISTANT"
  | "SHIP_PROVIDER"
  | "ADMIN"
  | "AUTO"
  | "LIVE_CHAT"
  | "USER"
  | "FAKE_AS_ADMIN";

export type CustomerSupportTicketRequestType =
  | "CLAIM"
  | "RETURN_REQUEST"
  | "REFUND_REQUEST"
  | "OTHERS";

export type CustomerSupportTicketSort = {
  readonly field: TicketSortFieldType;
  readonly order: SortOrderType;
};

export type CustomerSupportTicketState =
  | "AWAITING_REFUND_CONFIRMATION"
  | "ADMIN"
  | "MANUAL_REFUND_CONFIRMATION"
  | "PERM_CLOSED"
  | "DELAYED"
  | "ESCALATED_TO_FRAUD_INTERNAL"
  | "REVIEW_MERCHANT_REPLY"
  | "AWAITING_USER"
  | "CLOSED"
  | "AWAITING_FRAUD"
  | "NEW"
  | "SUPER_ADMIN"
  | "AWAITING_SHIP_PROVIDER"
  | "AWAITING_MERCHANT"
  | "RETURN_AUTO_TICKET"
  | "ESCALATED_TO_INTERNAL";

export type CustomerSupportTicketType =
  | "PRE_PURCHASE"
  | "POST_CUSTOMER_SUPPORT"
  | "NON_ORDER"
  | "ORDER";

export type Datetime = {
  readonly __typename?: "Datetime";
  readonly unix: Scalars["Int"];
  readonly datetime: Scalars["String"];
  readonly formatted: Scalars["String"];
  readonly iso8061: Scalars["String"];
  readonly timeSince: Timedelta;
  readonly timeUntil: Timedelta;
  readonly hasPassed: Scalars["Boolean"];
  readonly mmddyyyy: Scalars["String"];
  readonly inTimezone: Datetime;
  readonly timezone: Scalars["String"];
};

export type DatetimeFormattedArgs = {
  fmt?: Maybe<Scalars["String"]>;
};

export type DatetimeInTimezoneArgs = {
  identifier: Scalars["String"];
};

export type DatetimeInput = {
  readonly unix?: Maybe<Scalars["Int"]>;
  readonly iso8061?: Maybe<Scalars["String"]>;
  readonly fmt?: Maybe<Scalars["String"]>;
  readonly formatted?: Maybe<Scalars["String"]>;
};

export type DeciderKeySchema = {
  readonly __typename?: "DeciderKeySchema";
  readonly decideForName: Scalars["Boolean"];
};

export type DeciderKeySchemaDecideForNameArgs = {
  name: Scalars["String"];
};

export type DefaultShippingInput = {
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly price: CurrencyInput;
};

export type DefaultShippingSchema = {
  readonly __typename?: "DefaultShippingSchema";
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly price: CurrencyValue;
  readonly timeToDoor?: Maybe<Scalars["Int"]>;
};

export type DeleteAllDevicesMutation = {
  readonly __typename?: "DeleteAllDevicesMutation";
  readonly deletedDeviceIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly deletedSessionIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly error?: Maybe<Scalars["String"]>;
};

export type DeleteBrandEnrollment = {
  readonly __typename?: "DeleteBrandEnrollment";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type DeleteBrandEnrollmentInput = {
  readonly brandInfoId: Scalars["ObjectIdType"];
};

export type DeleteDeviceInput = {
  readonly deviceId: Scalars["ObjectIdType"];
};

export type DeleteDeviceMutation = {
  readonly __typename?: "DeleteDeviceMutation";
  readonly error?: Maybe<Scalars["String"]>;
};

export type DeleteMerchantSenderAddressInput = {
  readonly merchantSenderAddressId: Scalars["ObjectIdType"];
};

export type DeleteMerchantSenderAddressMutation = {
  readonly __typename?: "DeleteMerchantSenderAddressMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type DeleteMerchantWarehouseInput = {
  readonly id: Scalars["ObjectIdType"];
};

export type DeleteMerchantWarehouseMutation = {
  readonly __typename?: "DeleteMerchantWarehouseMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type DeleteProductPostsInput = {
  readonly postIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
};

export type DeleteProductPostsMutation = {
  readonly __typename?: "DeleteProductPostsMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly errorCode?: Maybe<ProductPostErrorCode>;
};

export type DeleteWebhookSubscription = {
  readonly __typename?: "DeleteWebhookSubscription";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type DeleteWebhookSubscriptionInput = {
  readonly subscriptionId: Scalars["ObjectIdType"];
};

export type DeliveryCarrierUpsertInput = {
  readonly carrierId: Scalars["Int"];
  readonly countries: ReadonlyArray<CountryActionInput>;
  readonly extraCountryData?: Maybe<ExtraCountryDataInput>;
  readonly date: Scalars["String"];
  readonly reason?: Maybe<Scalars["String"]>;
};

export type DeliveryPerformanceStats = {
  readonly __typename?: "DeliveryPerformanceStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly timeToDoor?: Maybe<Timedelta>;
  readonly shippingTime?: Maybe<Timedelta>;
  readonly ordersConfirmedDelivered?: Maybe<Scalars["Int"]>;
  readonly ordersConfirmedDeliveredRate?: Maybe<Scalars["Float"]>;
};

export type DestinationShippingProfileInput = {
  readonly destination?: Maybe<Scalars["String"]>;
  readonly displayName?: Maybe<Scalars["String"]>;
  readonly rate?: Maybe<CurrencyInput>;
  readonly maxHoursToDoor?: Maybe<Scalars["Int"]>;
  readonly enabled?: Maybe<Scalars["Boolean"]>;
  readonly shippingDetailsPerDestination?: Maybe<
    ReadonlyArray<DestinationShippingProfileInput>
  >;
};

export type DestinationShippingProfileSchema = {
  readonly __typename?: "DestinationShippingProfileSchema";
  readonly destination: Scalars["String"];
  readonly displayName: Scalars["String"];
  readonly rate: CurrencyValue;
  readonly maxHoursToDoor: Scalars["Int"];
  readonly enabled: Scalars["Boolean"];
  readonly shippingDetailsPerDestination?: Maybe<
    ReadonlyArray<DestinationShippingProfileSchema>
  >;
};

export type DetailedMerchantWarningReason =
  | "US_TAX_INFO_UNVALIDATED"
  | "WISH_EXPRESS_POLICY_VIOLATION"
  | "VIOLATION_OF_TERMS"
  | "EMPTY_PACKAGES"
  | "VIOLATE_POLICY"
  | "HIGH_CHARGEBACK_RATIO"
  | "LEGAL_TRO_TAKEDOWN"
  | "LATE_CONFIRMED_FULFILLMENT_VIOLATION"
  | "FINE_FOR_COUNTERFEIT_GOODS"
  | "UNCONFIRMED_TRACKING_NUMBERS"
  | "HIGH_IP_INFRINGEMENT"
  | "STORE_VALIDATION_INCOMPLETE"
  | "VIOLATE_TS_POLICY"
  | "SUSPECTED_FRAUD"
  | "INVALID_TRACKING_NUMBERS"
  | "PRODUCT_HIGH_CANCEL_ORDER_RATE"
  | "PRODUCT_HIGH_REFUND_RATIO"
  | "DUPLICATE_PRODUCTS"
  | "EXTREMELY_HIGH_PRICE_SPREAD"
  | "REUPLOADING_COUNTERFEITS"
  | "RESPOND_TO_ADMIN"
  | "HIGH_CHARGEBACK_AND_FRAUD_REFUND_RATIO"
  | "PRODUCT_HIGH_REFUND_RATIO_NO_REMOVE"
  | "DEP_FINE_DISABLE_PROMOTED_PRODUCT_FOR_COUNTRY"
  | "UNFULFILLED_ORDER"
  | "POLICY_TIER_DEMOTION"
  | "REPEAT_IP_INFRINGEMENT_ON_BRAND_OWNER"
  | "PROHIBITED_PRODUCT"
  | "DECEPTIVE_FULFILLMENT"
  | "MISLEADING_LISTING"
  | "HIGH_AUTO_REFUND"
  | "WISH_EXPRESS_POLICY_PRODUCT"
  | "BAD_CUSTOMER_SERVICE"
  | "RELATED_ACCOUNT_IS_BANNED"
  | "MISLEADING_VARIATION"
  | "PRODUCT_IS_INAPPROPRIATE"
  | "DEP_FINE_DISABLE_PROMOTED_PRODUCT"
  | "FINE_WISH_EXPRESS_POLICY_VIOLATION"
  | "CONFIRMED_DELIVERY_POLICY"
  | "BAN_EARLY_STAGE_MERCHANT"
  | "TAKE_USER_OUTSIDE_WISH"
  | "WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION"
  | "WISH_STANDARDS_BAN"
  | "CS_LOW_CSAT_SCORE"
  | "PRODUCT_LOW_RATING_NO_REMOVE"
  | "ORDER_NOT_DELIVERED"
  | "REQUEST_USER_EMAIL"
  | "WISH_EXPRESS_POLICY_MERCHANT"
  | "MERCHANT_CANCELLATION_VIOLATION"
  | "FAKE_RATING"
  | "DEP_BAIT_VARIABLE_PRICING"
  | "DUPLICATE_ACCOUNTS"
  | "CN_PROHIBITED_PRODUCTS"
  | "FINE_UPDATE_TO_COUNTERFEIT"
  | "HIGH_GMV_FROM_GAMING_AUDIT"
  | "BRANDED_PRODUCT_GEOBLOCK"
  | "PENALTY_FOR_AUTO_REFUND"
  | "FINAL_JUDGEMENT_ORDER"
  | "HIGH_REFUND_RATIO"
  | "REQUEST_MONEY"
  | "COUNTERFEIT_GOODS"
  | "WISHPOST_NEGATIVE_BALANCE"
  | "DISINGENUOUS_CUSTOMER_SERVICE"
  | "INACTIVE_ACCOUNT"
  | "INVALID_EU_RESPONSIBLE_PERSON"
  | "LATE_FULFILLMENT_RATE"
  | "REPEAT_PRODUCT_SWAPPING"
  | "PRODUCT_LOW_RATING"
  | "HIGH_RISK_PROHIBITED_PRODUCT"
  | "HIGH_GMV_FROM_GAMING_FREEZE"
  | "MERCHANT_HARASSMENT"
  | "VIOLATION_OF_POLICY_TIER"
  | "MERCHANT_HIGH_CANCEL_ORDER_RATE"
  | "MERCHANT_CONTACT_INFO_INVALID"
  | "HIGH_GMV_FROM_GAMING_BAN"
  | "PRODUCT_HIGH_QUALITY_REFUND_RATIO"
  | "FAKE_TRACKING"
  | "WAREHOUSE_FULFILLMENT_POLICY_VIOLATION"
  | "MERCHANT_HIGH_REFUND_EAT_COST"
  | "STRIKE_BASED_HIGH_RISK_PROHIBITED"
  | "MERCHANT_HIGH_QUALITY_REFUND_RATIO"
  | "HIGH_GMV_FROM_MISLEADING_PRODUCTS"
  | "PRODUCT_GEOBLOCK"
  | "FINE_PRODUCT_SWAPPED"
  | "CS_LATE_RESPONSE_RATE"
  | "TAX_SETTING_NOT_UPDATED";

export type DetailedMerchantWarningReasonSchema = {
  readonly __typename?: "DetailedMerchantWarningReasonSchema";
  readonly reason: DetailedMerchantWarningReason;
  readonly text: Scalars["String"];
};

export type DetectionFactor = {
  readonly __typename?: "DetectionFactor";
  readonly factor: MerchantCountryDetectionFactorType;
  readonly detectedCountry?: Maybe<Country>;
};

export type DeviceSchema = {
  readonly __typename?: "DeviceSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly ip?: Maybe<Scalars["String"]>;
  readonly location?: Maybe<Scalars["String"]>;
  readonly lastUsed?: Maybe<Scalars["DateTime"]>;
  readonly firstUsed: Scalars["DateTime"];
  readonly deviceName?: Maybe<Scalars["String"]>;
  readonly userAgent?: Maybe<Scalars["String"]>;
  readonly status: DeviceStatus;
};

export type DeviceStatus = "CURRENT" | "ACTIVE" | "INACTIVE";

export type DisableBrandPartner = {
  readonly __typename?: "DisableBrandPartner";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type DisableBrandPartnerInput = {
  readonly brandPartnerId: Scalars["ObjectIdType"];
};

export type DisbursementScheduleInfo = {
  readonly __typename?: "DisbursementScheduleInfo";
  readonly merchantFileLink?: Maybe<Scalars["String"]>;
};

export type DisputeInfractionInput = {
  readonly category?: Maybe<Scalars["String"]>;
  readonly subcategory?: Maybe<Scalars["String"]>;
  readonly productName?: Maybe<Scalars["String"]>;
  readonly description?: Maybe<Scalars["String"]>;
  readonly explanation?: Maybe<Scalars["String"]>;
  readonly photo?: Maybe<ReadonlyArray<FileInput>>;
  readonly variationCount?: Maybe<Scalars["Int"]>;
  readonly variationsSameProduct?: Maybe<Scalars["Boolean"]>;
  readonly variationsSamePrice?: Maybe<Scalars["Boolean"]>;
  readonly cost?: Maybe<CurrencyInput>;
  readonly retailPrice?: Maybe<CurrencyInput>;
  readonly vendorAddress?: Maybe<AddressInput>;
  readonly disputeProof?: Maybe<ReadonlyArray<FileInput>>;
};

export type DisputeMessageSchema = {
  readonly __typename?: "DisputeMessageSchema";
  readonly senderType: DisputeMessageSenderType;
  readonly senderName: Scalars["String"];
  readonly date: Datetime;
  readonly message?: Maybe<Scalars["String"]>;
  readonly type: DisputeMessageType;
  readonly files: ReadonlyArray<MerchantFileSchema>;
};

export type DisputeMessageSenderType = "ADMIN" | "MERCHANT" | "VIEW_ONLY";

export type DisputeMessageType =
  | "ADMIN_COMMENT"
  | "INITIATED"
  | "PAID"
  | "REOPEN"
  | "CLOSED"
  | "CANCELLED"
  | "REPLY"
  | "APPROVED";

export type DisputeReason =
  | "MISLEADING_PRODUCT_TAG"
  | "PRODUCT_HIGH_REFUND_RATIO"
  | "DELIVERED_TO_WRONG_ADDRESS"
  | "EPC_OVERWEIGHT"
  | "FRAUDULENT_BEHAVIOR"
  | "VALID_TRACKING"
  | "INCOMPLETE_ORDER"
  | "NOT_DELIVERED_ON_TIME"
  | "STORE_UPLOADED_INVENTORY_RETURN"
  | "PRODUCT_LOW_RATING"
  | "RIGHT_OF_WITHDRAWAL"
  | "FBS_ITEM_NOT_PICKUP"
  | "CORRECT_SIZE"
  | "ITEM_IS_DAMAGED"
  | "MERCHANT_REPORT_RETURN"
  | "EPC_OVERVALUE"
  | "MERCHANT_MANAGED_SERVICES"
  | "RETURNED_TO_SENDER"
  | "ITEM_NOT_MATCH_LISTING"
  | "WISHBLUE_EPC_LATE_FULFULLMENT"
  | "OUT_OF_STOCK"
  | "ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE"
  | "FAKE_TRACKING"
  | "MERCHANT_HIGH_REFUND_EAT_COST"
  | "ITEM_IS_DANGEROUS"
  | "BANNED_MERCHANT"
  | "NOT_QUALIFIED_SHIPPING_PROVIDER"
  | "AUTHORIZED_TO_SELL"
  | "EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP"
  | "EPC_OVERSIZE"
  | "COUNTERFEIT_ITEM"
  | "DID_NOT_ACCEPT_TOS_ON_TIME"
  | "LATE_CONFIRMED_FULFILLMENT"
  | "MERCHANT_REPORT_FRAUD";

export type DisputeReasonSchema = {
  readonly __typename?: "DisputeReasonSchema";
  readonly reason: DisputeReason;
  readonly text?: Maybe<Scalars["String"]>;
  readonly subReason?: Maybe<DisputeSubReason>;
  readonly subReasonText?: Maybe<Scalars["String"]>;
};

export type DisputeSchema = {
  readonly __typename?: "DisputeSchema";
  readonly refundDispute?: Maybe<RefundDisputeHub>;
  readonly trackingDispute?: Maybe<TrackingDisputeHub>;
};

export type DisputeSort = {
  readonly field: DisputeSortFieldType;
  readonly order: SortOrderType;
};

export type DisputeSortFieldType = "DisputeID" | "LastUpdate";

export type DisputeState =
  | "INVALID"
  | "AWAITING_ADMIN"
  | "PAID"
  | "CLOSED"
  | "CANCELLED"
  | "NEW"
  | "AWAITING_MERCHANT"
  | "APPROVED";

export type DisputeSubReason =
  | "INCOMPLETE_ITEM"
  | "DID_NOT_RECEIVE_ITEM"
  | "INCORRECT_ITEM";

export type DomesticShippingInput = {
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly price?: Maybe<CurrencyInput>;
  readonly enabled?: Maybe<Scalars["Boolean"]>;
};

export type DomesticShippingSchema = {
  readonly __typename?: "DomesticShippingSchema";
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly price: CurrencyValue;
  readonly enabled: Scalars["Boolean"];
  readonly priceEstimate: CurrencyValue;
};

export type DownloadAllProducts = {
  readonly __typename?: "DownloadAllProducts";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type DownloadAllProductsCsv = {
  readonly __typename?: "DownloadAllProductsCSV";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type DownloadAllProductsCsvInput = {
  readonly includeRejected?: Maybe<Scalars["Boolean"]>;
  readonly warehouseId?: Maybe<Scalars["ObjectIdType"]>;
};

export type DownloadAllProductsInput = {
  readonly fileType?: Maybe<FileType>;
  readonly includeRejected?: Maybe<Scalars["Boolean"]>;
  readonly warehouseId?: Maybe<Scalars["ObjectIdType"]>;
};

export type DownloadEuComplianceProductLinks = {
  readonly __typename?: "DownloadEUComplianceProductLinks";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type EditAddressInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly address: AddressInput;
};

export type EditOriginAddresses = {
  readonly __typename?: "EditOriginAddresses";
  readonly updatedCount: Scalars["Int"];
  readonly errorMessages?: Maybe<ReadonlyArray<AddressUpdateError>>;
};

export type EditShippingAddresses = {
  readonly __typename?: "EditShippingAddresses";
  readonly updatedCount: Scalars["Int"];
  readonly errorMessages?: Maybe<ReadonlyArray<AddressUpdateError>>;
};

export type EditTrademarkInput = {
  readonly id: Scalars["ObjectIdType"];
  readonly location: BrandPartnerCountryAndRegionCode;
  readonly type: BrandPartnerTrademarkType;
  readonly registrationNumber: Scalars["String"];
  readonly registrationUrl?: Maybe<Scalars["String"]>;
  readonly registrationDocs?: Maybe<ReadonlyArray<FileInput>>;
};

export type EditTrademarksAndBrandInfo = {
  readonly __typename?: "EditTrademarksAndBrandInfo";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type EditTrademarksAndBrandInfoInput = {
  readonly brandInfoId: Scalars["ObjectIdType"];
  readonly brandOwnerName?: Maybe<Scalars["String"]>;
  readonly proofOfAuthorizations?: Maybe<ReadonlyArray<FileInput>>;
  readonly brandRepName?: Maybe<Scalars["String"]>;
  readonly brandRepTitle?: Maybe<Scalars["String"]>;
  readonly email?: Maybe<Scalars["String"]>;
  readonly phoneNumber?: Maybe<Scalars["String"]>;
  readonly proposedBrandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly providedBrandName: Scalars["String"];
  readonly isNewBrand: Scalars["Boolean"];
  readonly providedBrandWebsite?: Maybe<Scalars["String"]>;
  readonly providedBrandLogoFile?: Maybe<FileInput>;
  readonly providedBrandAdditionalInfo?: Maybe<Scalars["String"]>;
  readonly trademarks: ReadonlyArray<EditTrademarkInput>;
};

export type EligibleProductInfo = {
  readonly __typename?: "EligibleProductInfo";
  readonly product: ProductSchema;
  readonly variations: ReadonlyArray<VariationSchema>;
};

export type EntityTypes = "COMPANY" | "INDIVIDUAL";

export type ErrorCode =
  | "ERROR_CODE_UNSPECIFIED"
  | "ERROR_CODE_MERCHANT_LISTING_INSIGHTS_UNAVAILABLE"
  | "ERROR_CODE_MERCHANT_PERFORMANCE_UNAVAILABLE"
  | "ERROR_CODE_INVALID_L1_CATEGORY"
  | "ERROR_CODE_INVALID_MERCHANT_ID"
  | "ERROR_CODE_INVALID_PRODUCT_ID"
  | "ERROR_CODE_RATE_LIMIT"
  | "ERROR_CODE_INTERNAL_SERVER_ERROR";

export type EuComplianceAddressInput = {
  readonly name: Scalars["String"];
  readonly streetAddress1: Scalars["String"];
  readonly streetAddress2?: Maybe<Scalars["String"]>;
  readonly streetAddress3?: Maybe<Scalars["String"]>;
  readonly city: Scalars["String"];
  readonly county?: Maybe<Scalars["String"]>;
  readonly state: Scalars["String"];
  readonly neighborhood?: Maybe<Scalars["String"]>;
  readonly region?: Maybe<Scalars["String"]>;
  readonly countryCode?: Maybe<EuComplianceResponsiblePersonCountriesAndRegionsCode>;
  readonly zipcode?: Maybe<Scalars["String"]>;
  readonly phoneNumber?: Maybe<Scalars["String"]>;
};

export type EuComplianceMutations = {
  readonly __typename?: "EUComplianceMutations";
  readonly downloadProductLinks?: Maybe<DownloadEuComplianceProductLinks>;
  readonly upsertLink?: Maybe<UpsertLinkProductCompliance>;
  readonly upsertResponsiblePerson?: Maybe<UpsertResponsiblePerson>;
};

export type EuComplianceMutationsUpsertLinkArgs = {
  input?: Maybe<LinkProductComplianceUpsertInput>;
};

export type EuComplianceMutationsUpsertResponsiblePersonArgs = {
  input?: Maybe<ResponsiblePersonUpsertInput>;
};

export type EuComplianceResponsiblePersonCountriesAndRegions = {
  readonly __typename?: "EUComplianceResponsiblePersonCountriesAndRegions";
  readonly code: EuComplianceResponsiblePersonCountriesAndRegionsCode;
  readonly name: Scalars["String"];
};

export type EuComplianceResponsiblePersonCountriesAndRegionsCode =
  | "BE"
  | "FR"
  | "BG"
  | "DK"
  | "HR"
  | "IS"
  | "DE"
  | "IT"
  | "HU"
  | "CZ"
  | "CY"
  | "AT"
  | "FI"
  | "NIE"
  | "IE"
  | "ES"
  | "GR"
  | "SK"
  | "NL"
  | "PT"
  | "NO"
  | "SI"
  | "LI"
  | "LV"
  | "EE"
  | "LT"
  | "LU"
  | "SE"
  | "MT"
  | "RO"
  | "PL";

export type EuProductComplianceCategory =
  | "ENVIRONMENT"
  | "FOOD"
  | "CHEMICAL"
  | "OTHER"
  | "COSMETICS"
  | "TOYS"
  | "EEE";

export type EuvatRegistrationFieldsInput = {
  readonly vatNumber: Scalars["String"];
  readonly countryCode: CountryCode;
};

export type EuvatSchema = {
  readonly __typename?: "EUVATSchema";
  readonly invoiceAmount?: Maybe<CurrencyValue>;
  readonly shippingPrice?: Maybe<CurrencyValue>;
};

export type EuvatSchemaInvoiceAmountArgs = {
  inAuthorityCurrency?: Maybe<Scalars["Boolean"]>;
};

export type EuvatSchemaShippingPriceArgs = {
  inAuthorityCurrency?: Maybe<Scalars["Boolean"]>;
};

export type EuvatTaxMutations = {
  readonly __typename?: "EUVATTaxMutations";
  readonly uploadVatTaxQuestionnaire?: Maybe<UploadEuvatTaxQuestionnaire>;
};

export type EuvatTaxMutationsUploadVatTaxQuestionnaireArgs = {
  input: EuvatTaxQuestionnaireInput;
};

export type EuvatTaxQuestionnaireAddressInput = {
  readonly address: Scalars["String"];
  readonly zipcode: Scalars["String"];
  readonly city: Scalars["String"];
  readonly state: Scalars["String"];
  readonly countryCode: CountryCode;
};

export type EuvatTaxQuestionnaireInput = {
  readonly employPersonnelInEu?: Maybe<Scalars["Boolean"]>;
  readonly businessAddressInEu?: Maybe<Scalars["Boolean"]>;
  readonly businessAddress?: Maybe<EuvatTaxQuestionnaireAddressInput>;
  readonly subjectToTaxInEu?: Maybe<Scalars["Boolean"]>;
  readonly fileUrl?: Maybe<Scalars["String"]>;
  readonly registeredWithTradeRegistryInEu?: Maybe<Scalars["Boolean"]>;
  readonly euVatRegistration?: Maybe<EuvatRegistrationFieldsInput>;
  readonly businessRegistrationNumber?: Maybe<Scalars["String"]>;
};

export type EuvatTaxSchema = {
  readonly __typename?: "EUVATTaxSchema";
  readonly euVatSelfRemittanceEligible?: Maybe<Scalars["Boolean"]>;
  readonly euVatEntityStatus?: Maybe<CommerceMerchantEuEntityStatus>;
};

export type EverCBrandCreateBrand = {
  readonly __typename?: "EverCBrandCreateBrand";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type EverCBrandDeleteBrand = {
  readonly __typename?: "EverCBrandDeleteBrand";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type EvercBrandDeleteBrandInput = {
  readonly evercBrandId: Scalars["ObjectIdType"];
};

export type EverCBrandMutations = {
  readonly __typename?: "EverCBrandMutations";
  readonly createBrand?: Maybe<EverCBrandCreateBrand>;
  readonly updateBrand?: Maybe<EverCBrandUpdateBrand>;
  readonly deleteBrand?: Maybe<EverCBrandDeleteBrand>;
};

export type EverCBrandMutationsCreateBrandArgs = {
  input: EvercBrandUpsertBrandInput;
};

export type EverCBrandMutationsUpdateBrandArgs = {
  input: EvercBrandUpsertBrandInput;
};

export type EverCBrandMutationsDeleteBrandArgs = {
  input: EvercBrandDeleteBrandInput;
};

export type EverCBrandSchema = {
  readonly __typename?: "EverCBrandSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
  readonly displayName: Scalars["String"];
  readonly rightsHolderNames: ReadonlyArray<Scalars["String"]>;
};

export type EverCBrandUpdateBrand = {
  readonly __typename?: "EverCBrandUpdateBrand";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type EvercBrandUpsertBrandInput = {
  readonly evercBrandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly wishBrandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly displayName?: Maybe<Scalars["String"]>;
  readonly rightsHolders?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type ExistingSellingLocations =
  | "NONE"
  | "RETAIL"
  | "ONLINE_AND_RETAIL"
  | "ONLINE";

export type ExpireWhitelistProductsInput = {
  readonly merchantId: Scalars["ObjectIdType"];
  readonly productIds: ReadonlyArray<Scalars["ObjectIdType"]>;
};

export type ExpireWhitelistProductsMutation = {
  readonly __typename?: "ExpireWhitelistProductsMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ExpSchema = {
  readonly __typename?: "ExpSchema";
  readonly bucket: Scalars["String"];
};

export type ExpSchemaBucketArgs = {
  name: Scalars["String"];
};

export type ExternalBoostAttributedStats = {
  readonly __typename?: "ExternalBoostAttributedStats";
  readonly orders: Scalars["Int"];
  readonly gmv: CurrencyValue;
};

export type ExternalBoostChargingMethod = "CPA" | "CPC";

export type ExtraCountryDataInput = {
  readonly swedenDeliveredCarrierTypes: ReadonlyArray<SwedenDeliveredCarrierType>;
};

export type ExtractionResultInput = {
  readonly name: Scalars["String"];
  readonly values: ReadonlyArray<Scalars["String"]>;
};

export type FactoryMerchantConversionInput = {
  readonly userId: Scalars["String"];
};

export type FactoryToMerchantConversionMutation = {
  readonly __typename?: "FactoryToMerchantConversionMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly ok: Scalars["Boolean"];
};

export type FactoryUserMutations = {
  readonly __typename?: "FactoryUserMutations";
  readonly convertMerchantToFactory: MerchantToFactoryConversionMutation;
  readonly convertFactoryToMerchant: FactoryToMerchantConversionMutation;
};

export type FactoryUserMutationsConvertMerchantToFactoryArgs = {
  input: FactoryMerchantConversionInput;
};

export type FactoryUserMutationsConvertFactoryToMerchantArgs = {
  input: FactoryMerchantConversionInput;
};

export type FbwInventorySchema = {
  readonly __typename?: "FBWInventorySchema";
  readonly warehouse: FbwWarehouseSchema;
  readonly shippingType: WarehouseShippingType;
  readonly activeInventory: Scalars["Int"];
  readonly pendingInventory: Scalars["Int"];
};

export type FbwRegion = "EU" | "CN" | "US" | "EU_UNBONDED";

export type FbwWarehouseSchema = {
  readonly __typename?: "FBWWarehouseSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly code: Scalars["String"];
  readonly region: FbwRegion;
  readonly address: AddressSchema;
  readonly estimatedFulfillTime: Timedelta;
  readonly maxWeight: Weight;
  readonly name: Scalars["String"];
  readonly feeLink: Scalars["String"];
};

export type FeedProcessingWorkflowSchema = {
  readonly __typename?: "FeedProcessingWorkflowSchema";
  readonly id: Scalars["String"];
  readonly reviewStatus: CommerceProductFpReviewStatus;
  readonly createdAt: Datetime;
  readonly blockingReason?: Maybe<Scalars["String"]>;
  readonly isMainImageBlankError: Scalars["Boolean"];
  readonly originalState?: Maybe<FpProductStateSchema>;
  readonly upsertState?: Maybe<FpProductStateSchema>;
};

export type FileDataSchema = {
  readonly __typename?: "FileDataSchema";
  readonly merchantFileId: Scalars["String"];
  readonly pictureType: PictureType;
  readonly fileUrl: Scalars["String"];
  readonly fileName: Scalars["String"];
};

export type FileInput = {
  readonly url: Scalars["String"];
  readonly fileName: Scalars["String"];
};

export type FileType = "CSV" | "XLSX";

export type FilledCannedResponseSearchType =
  | "TRACKING_DISPUTE_ID"
  | "DISPUTE_ID"
  | "COMMERCE_TICKET_ID";

export type FilledCannedResponseTextSchema = {
  readonly __typename?: "FilledCannedResponseTextSchema";
  readonly text: Scalars["String"];
  readonly customizations: ReadonlyArray<Scalars["String"]>;
};

export type FinalSaleCategory =
  | "HOUSEHOLD_SUPPLIES"
  | "ADULT_TOYS"
  | "PLANT_AND_PLANT_SEEDS"
  | "FOOD_AND_BEVERAGES"
  | "VITAMINS_AND_SUPPLEMENTS"
  | "PET_FOOD"
  | "OTC_MEDICATION"
  | "MAKEUP_AND_BEAUTY";

export type FinalSaleCategorySchema = {
  readonly __typename?: "FinalSaleCategorySchema";
  readonly category: FinalSaleCategory;
  readonly name: Scalars["String"];
  readonly description: Scalars["String"];
  readonly totalProducts: Scalars["Int"];
  readonly finalSaleEnabled: Scalars["Boolean"];
};

export type FineReason =
  | "EARLY_PAYMENT_DEDUCTION"
  | "PROMOTION_FEE"
  | "UNREASONABLE_PRICE_GAUGE"
  | "PRODUCT_LISTING_FEE"
  | "MERCHANT_CANCELLATION"
  | "FAKE_RATING"
  | "LEGAL_SETTLEMENT_RESERVED"
  | "INVALID_EU_RESPONSIBLE_PERSON"
  | "B2B_SALE_FEE"
  | "POLICY_VIOLATION"
  | "STORE_PAYMENT_DEDUCTION"
  | "CN_PROHIBITED_PRODUCTS"
  | "IP_INFRINGEMENT"
  | "LEGAL_SETTLEMENT_PAID"
  | "WITHHOLD_FUND"
  | "ONEOFF_FEE"
  | "UNFULFILLED_ORDER"
  | "MERCHANT_HARASSMENT"
  | "LOGISTIC_FEE"
  | "ONEOFF"
  | "PROHIBITED_PRODUCT_FINE"
  | "WISH_EXPRESS_VIOLATION"
  | "COLLECTIONS_BOOST_CAMPAIGN_FEE"
  | "RETURN_LABEL_FEE"
  | "EXTERNAL_BOOST_FEE"
  | "LEGAL_SETTLEMENT"
  | "WISH_PARCEL_SERVICE_ADJUST_FEE"
  | "WISHPOST_ADJUSTMENT_DEDUCTION"
  | "MERCHANT_INCENTIVE"
  | "FBW_FEE"
  | "PROMOTED_PRODUCT_DISABLE_FINE"
  | "MISLEADING_VARIATION"
  | "FAKE_TRACKING"
  | "UNCONFIRMED_CARRIER"
  | "DEP_INFRACTION"
  | "STORE_PAYMENT_CANCELLATION"
  | "WISH_EXPRESS_WITHHELD_ORDER"
  | "WISHPOST_LOGISTICS_FEE"
  | "SE_CASH_BACK"
  | "EXTERNAL_BOOST_CPA_FEE"
  | "WISHPOST_FULFILLMENT_FEE"
  | "QUALITY_REFUND_FINE"
  | "PAID_PLACEMENT_IMPRESSION_FEE"
  | "CN_ORDER_NOT_SHIP_WITH_WISHPOST"
  | "LCL_FBW_FEE"
  | "CONSOLIDATE_MP_FINE"
  | "REPEAT_IP_INFRINGEMENT"
  | "WISH_PARCEL_SERVICE_FEE"
  | "DECEPTIVE_FULFILLMENT"
  | "MISLEADING_LISTING"
  | "MISLEADING_LISTING_AUTHENTIC_BRAND"
  | "LATE_CONFIRMED_FULFILLMENT"
  | "PAID_PLACEMENT_ENROLLMENT_FEE"
  | "PRODUCT_SWAPPED";

export type FlatRateShippingCountryCandidate = {
  readonly __typename?: "FlatRateShippingCountryCandidate";
  readonly country: Country;
  readonly price: CurrencyValue;
};

export type FlexibleBudgetSchema = {
  readonly __typename?: "FlexibleBudgetSchema";
  readonly enabled: Scalars["Boolean"];
  readonly type: MarketingFlexibleBudgetType;
};

export type FloorBidsSchema = {
  readonly __typename?: "FloorBidsSchema";
  readonly trueTagId: Scalars["ObjectIdType"];
  readonly bidPrice: CurrencyValue;
  readonly date: Datetime;
  readonly trueTag: TrueTagSchema;
};

export type FpProductStateAttributeSchema = {
  readonly __typename?: "FPProductStateAttributeSchema";
  readonly name: Scalars["String"];
  readonly value: Scalars["String"];
};

export type FpProductStateCondition = "NEW" | "USED" | "REFURBISHED";

export type FpProductStateCountryShippingSchema = {
  readonly __typename?: "FPProductStateCountryShippingSchema";
  readonly destination: Scalars["String"];
  readonly isEnabled?: Maybe<Scalars["Boolean"]>;
  readonly maxDeliveryDays?: Maybe<Scalars["Int"]>;
  readonly price?: Maybe<CurrencyValue>;
  readonly overrides?: Maybe<ReadonlyArray<FpProductStateRegionShippingSchema>>;
};

export type FpProductStateDefaultShippingSchema = {
  readonly __typename?: "FPProductStateDefaultShippingSchema";
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly price: CurrencyValue;
};

export type FpProductStateImageSchema = {
  readonly __typename?: "FPProductStateImageSchema";
  readonly id: Scalars["Int"];
  readonly wishUrl?: Maybe<Scalars["String"]>;
  readonly isCleanImage?: Maybe<Scalars["Boolean"]>;
  readonly removed?: Maybe<Scalars["Boolean"]>;
};

export type FpProductStateInventorySchema = {
  readonly __typename?: "FPProductStateInventorySchema";
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly count: Scalars["Int"];
};

export type FpProductStateRegionShippingSchema = {
  readonly __typename?: "FPProductStateRegionShippingSchema";
  readonly destination: Scalars["String"];
  readonly isEnabled?: Maybe<Scalars["Boolean"]>;
  readonly maxDeliveryDays?: Maybe<Scalars["Int"]>;
  readonly price?: Maybe<CurrencyValue>;
  readonly useCountryShippingPrice?: Maybe<Scalars["Boolean"]>;
};

export type FpProductStateSchema = {
  readonly __typename?: "FPProductStateSchema";
  readonly name?: Maybe<Scalars["String"]>;
  readonly description?: Maybe<Scalars["String"]>;
  readonly mainImage?: Maybe<FpProductStateImageSchema>;
  readonly extraImages?: Maybe<ReadonlyArray<FpProductStateImageSchema>>;
  readonly variations?: Maybe<ReadonlyArray<FpProductStateVariationSchema>>;
  readonly brandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly condition?: Maybe<FpProductStateCondition>;
  readonly defaultShipping?: Maybe<
    ReadonlyArray<FpProductStateDefaultShippingSchema>
  >;
  readonly maxQuantity?: Maybe<Scalars["Int"]>;
  readonly msrp?: Maybe<CurrencyValue>;
  readonly parentSku?: Maybe<Scalars["String"]>;
  readonly referenceValue?: Maybe<Scalars["Int"]>;
  readonly tags?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly referenceUnit?: Maybe<UnitCombined>;
  readonly warehouseToShippings?: Maybe<
    ReadonlyArray<FpProductStateWarehouseToShippingSchema>
  >;
  readonly attributes?: Maybe<ReadonlyArray<FpProductStateAttributeSchema>>;
  readonly warningType?: Maybe<FpProductStateWarningType>;
  readonly chemicalNames?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type FpProductStateVariationSchema = {
  readonly __typename?: "FPProductStateVariationSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly sku?: Maybe<Scalars["String"]>;
  readonly size?: Maybe<Scalars["String"]>;
  readonly color?: Maybe<Scalars["String"]>;
  readonly productId: Scalars["String"];
  readonly weight?: Maybe<Weight>;
  readonly height?: Maybe<Length>;
  readonly length?: Maybe<Length>;
  readonly width?: Maybe<Length>;
  readonly customsHsCode?: Maybe<Scalars["String"]>;
  readonly gtin?: Maybe<Scalars["String"]>;
  readonly originCountry?: Maybe<Country>;
  readonly declaredValue?: Maybe<CurrencyValue>;
  readonly declaredName?: Maybe<Scalars["String"]>;
  readonly declaredLocalName?: Maybe<Scalars["String"]>;
  readonly pieces?: Maybe<Scalars["Int"]>;
  readonly hasPowder?: Maybe<Scalars["Boolean"]>;
  readonly hasLiquid?: Maybe<Scalars["Boolean"]>;
  readonly hasBattery?: Maybe<Scalars["Boolean"]>;
  readonly hasMetal?: Maybe<Scalars["Boolean"]>;
  readonly inventory?: Maybe<ReadonlyArray<FpProductStateInventorySchema>>;
  readonly price?: Maybe<CurrencyValue>;
  readonly image?: Maybe<FpProductStateImageSchema>;
  readonly enabled?: Maybe<Scalars["Boolean"]>;
};

export type FpProductStateWarehouseToShippingSchema = {
  readonly __typename?: "FPProductStateWarehouseToShippingSchema";
  readonly shippingDetails: ReadonlyArray<FpProductStateCountryShippingSchema>;
  readonly warehouseId: Scalars["String"];
};

export type FpProductStateWarningType =
  | "ON_PRODUCT_COMBINED_CANCER_REPRODUCTIVE"
  | "RAW_WOOD"
  | "FOOD"
  | "DEP_PASSENGER_OFF_ROAD_VEHICLE"
  | "CHEMICAL"
  | "DIESEL_ENGINE"
  | "ON_PRODUCT_REPRODUCTIVE"
  | "DEP_RECREATIONAL_VESSEL"
  | "ON_PRODUCT_CANCER"
  | "FURNITURE";

export type FranceComplianceMutations = {
  readonly __typename?: "FranceComplianceMutations";
  readonly upsertLink?: Maybe<UpsertFranceLinkProductCompliance>;
  readonly upsertUin?: Maybe<UpsertFranceProductUniqueIdentificationNumber>;
};

export type FranceComplianceMutationsUpsertLinkArgs = {
  input: UpsertFranceLinkProductComplianceInput;
};

export type FranceComplianceMutationsUpsertUinArgs = {
  input?: Maybe<FranceProductUniqueIdentificationNumberUpsertInput>;
};

export type FranceProductUniqueIdentificationNumberAction =
  | "CREATE"
  | "UPDATE"
  | "DELETE";

export type FranceProductUniqueIdentificationNumberCategory =
  | "SECONDARY_PACKAGING"
  | "ELECTRIC_AND_ELECTRONIC_EQUIPMENTS"
  | "PRIMARY_PACKAGING"
  | "TEXTILE"
  | "BATTERIES"
  | "PAPER"
  | "TIRES"
  | "FURNITURE";

export type FranceProductUniqueIdentificationNumberSchema = {
  readonly __typename?: "FranceProductUniqueIdentificationNumberSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly merchant: MerchantSchema;
  readonly uniqueIdentificationNumber: Scalars["String"];
  readonly productResponsibilityOrganization: Scalars["String"];
  readonly status?: Maybe<FranceProductUniqueIdentificationNumberStatus>;
  readonly category?: Maybe<FranceProductUniqueIdentificationNumberCategory>;
  readonly linkCount: Scalars["Int"];
};

export type FranceProductUniqueIdentificationNumberStatus =
  | "DELETED"
  | "ADMIN_APPROVED"
  | "COMPLETE"
  | "REJECTED"
  | "INREVIEW";

export type FranceProductUniqueIdentificationNumberUpsertInput = {
  readonly action: FranceProductUniqueIdentificationNumberAction;
  readonly uinId?: Maybe<Scalars["ObjectIdType"]>;
  readonly category?: Maybe<FranceProductUniqueIdentificationNumberCategory>;
  readonly productResponsibilityOrganization?: Maybe<Scalars["String"]>;
  readonly uniqueIdentificationNumber?: Maybe<Scalars["String"]>;
};

export type FreezeReversalType =
  | "FINE_REVERSAL_ONLY"
  | "FINE_PAYMENT_ONLY"
  | "FINE_REVERSAL_AND_PAYMENT";

export type FulfilledByWishMutations = {
  readonly __typename?: "FulfilledByWishMutations";
  readonly createShippingPlan?: Maybe<CreateShippingPlan>;
};

export type FulfilledByWishMutationsCreateShippingPlanArgs = {
  input: ShippingPlanInput;
};

export type FulfilledByWishSchema = {
  readonly __typename?: "FulfilledByWishSchema";
  readonly lowInventoryCount?: Maybe<Scalars["Int"]>;
  readonly actionRequiredShippingPlans?: Maybe<Scalars["Int"]>;
  readonly totalActionRequired?: Maybe<Scalars["Int"]>;
};

export type FulfillmentCsvSchema = {
  readonly __typename?: "FulfillmentCSVSchema";
  readonly requiredColumns: ReadonlyArray<OrderCsvColumnSchema>;
  readonly optionalColumns: ReadonlyArray<OrderCsvColumnSchema>;
};

export type FulfillmentError = {
  readonly __typename?: "FulfillmentError";
  readonly orderId: Scalars["ObjectIdType"];
  readonly message: Scalars["String"];
};

export type FulfillmentMutation = {
  readonly __typename?: "FulfillmentMutation";
  readonly refundOrders: RefundOrders;
  readonly fulfillOrders: FulfillOrders;
  readonly modifyTrackingOrders: ModifyTrackingOrders;
  readonly editShippingAddresses: EditShippingAddresses;
  readonly editOriginAddresses: EditOriginAddresses;
  readonly fulfillOrdersFromCsv: FulfillmentOrdersFromCsv;
  readonly updateDeliveryConfirmation: UpdateOrderDeliveryConfirmation;
  readonly actionRequiredOrdersCsvDownload: ActionRequiredOrdersCsvDownload;
  readonly ordersCsvDownload: OrdersCsvDownload;
  readonly selectWpsShippingOption: SelectWpsShippingOptionMutation;
  readonly modifyWpsTrackingId: ModifyWpsTrackingIdMutation;
  readonly cancelWpsTrackingId: CancelWpsTrackingIdMutation;
  readonly setWpsPackageType: SetWpsPackageTypeMutation;
  readonly generateTestOrders?: Maybe<GenerateTestOrders>;
};

export type FulfillmentMutationRefundOrdersArgs = {
  input: ReadonlyArray<RefundOrderInput>;
};

export type FulfillmentMutationFulfillOrdersArgs = {
  input: ReadonlyArray<FulfillOrderInput>;
};

export type FulfillmentMutationModifyTrackingOrdersArgs = {
  input: ReadonlyArray<ModifyTrackingOrderInput>;
};

export type FulfillmentMutationEditShippingAddressesArgs = {
  input: ReadonlyArray<EditAddressInput>;
};

export type FulfillmentMutationEditOriginAddressesArgs = {
  input: ReadonlyArray<EditAddressInput>;
};

export type FulfillmentMutationFulfillOrdersFromCsvArgs = {
  input: FulfillmentOrdersFromCsvInput;
};

export type FulfillmentMutationUpdateDeliveryConfirmationArgs = {
  input: UpdateOrderDeliveryConfirmationInput;
};

export type FulfillmentMutationActionRequiredOrdersCsvDownloadArgs = {
  input: ActionRequiredOrdersCsvDownloadInput;
};

export type FulfillmentMutationOrdersCsvDownloadArgs = {
  input: OrdersCsvDownloadInput;
};

export type FulfillmentMutationSelectWpsShippingOptionArgs = {
  input: SelectWpsShippingOptionInput;
};

export type FulfillmentMutationModifyWpsTrackingIdArgs = {
  input: ModifyWpsTrackingIdInput;
};

export type FulfillmentMutationCancelWpsTrackingIdArgs = {
  input: CancelWpsTrackingIdInput;
};

export type FulfillmentMutationSetWpsPackageTypeArgs = {
  input: SetWpsPackageTypeInput;
};

export type FulfillmentMutationGenerateTestOrdersArgs = {
  input: GenerateTestOrdersInput;
};

export type FulfillmentOrdersFromCsv = {
  readonly __typename?: "FulfillmentOrdersFromCsv";
  readonly jobUrl?: Maybe<Scalars["String"]>;
  readonly status?: Maybe<MerchantFeedJobStatus>;
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type FulfillmentOrdersFromCsvInput = {
  readonly fileUrl: Scalars["String"];
  readonly csvDelimiter: Scalars["String"];
  readonly columnIdList: ReadonlyArray<Scalars["String"]>;
};

export type FulfillmentSchema = {
  readonly __typename?: "FulfillmentSchema";
  readonly order?: Maybe<OrderSchema>;
  readonly orders?: Maybe<ReadonlyArray<OrderSchema>>;
  readonly historicalOrders?: Maybe<ReadonlyArray<OrderSchema>>;
  readonly ordersCsvUrl?: Maybe<Scalars["String"]>;
  readonly actionRequiredOrdersCsvUrl?: Maybe<Scalars["String"]>;
  readonly csvFulfillmentJobsCount?: Maybe<Scalars["Int"]>;
  readonly ordersCount?: Maybe<Scalars["Int"]>;
  readonly actionRequiredOrders?: Maybe<ReadonlyArray<OrderSchema>>;
  readonly actionRequiredOrderCount?: Maybe<Scalars["Int"]>;
  readonly fulfillmentCsv?: Maybe<FulfillmentCsvSchema>;
  readonly bulkJobs?: Maybe<ReadonlyArray<CsvFulfillmentJobSchema>>;
  readonly wpsShippingOptions?: Maybe<WpsGetShippingOptionsSchema>;
};

export type FulfillmentSchemaOrderArgs = {
  id: Scalars["String"];
};

export type FulfillmentSchemaOrdersArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<OrderHistorySearchType>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<OrderHistorySort>;
  states?: Maybe<ReadonlyArray<CommerceTransactionState>>;
  wishExpress?: Maybe<Scalars["Boolean"]>;
};

export type FulfillmentSchemaHistoricalOrdersArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<OrderHistorySearchType>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<OrderHistorySort>;
  wishExpress?: Maybe<Scalars["Boolean"]>;
};

export type FulfillmentSchemaOrdersCsvUrlArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<OrderHistorySearchType>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<OrderHistorySort>;
  wishExpress?: Maybe<Scalars["Boolean"]>;
};

export type FulfillmentSchemaActionRequiredOrdersCsvUrlArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ActionRequiredSearchType>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<ActionRequiredSort>;
  wishExpress?: Maybe<Scalars["Boolean"]>;
};

export type FulfillmentSchemaOrdersCountArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<OrderHistorySearchType>;
  states?: Maybe<ReadonlyArray<CommerceTransactionState>>;
  wishExpress?: Maybe<Scalars["Boolean"]>;
};

export type FulfillmentSchemaActionRequiredOrdersArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ActionRequiredSearchType>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<ActionRequiredSort>;
  wishExpress?: Maybe<Scalars["Boolean"]>;
};

export type FulfillmentSchemaActionRequiredOrderCountArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ActionRequiredSearchType>;
  wishExpress?: Maybe<Scalars["Boolean"]>;
};

export type FulfillmentSchemaBulkJobsArgs = {
  offset?: Scalars["Int"];
  limit?: Scalars["Int"];
};

export type FulfillmentSchemaWpsShippingOptionsArgs = {
  orderId: Scalars["String"];
};

export type FulfillOrderInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly trackingId: Scalars["String"];
  readonly providerId: Scalars["Int"];
  readonly shipNote?: Maybe<Scalars["String"]>;
  readonly originCountryCode: CountryCode;
};

export type FulfillOrders = {
  readonly __typename?: "FulfillOrders";
  readonly shippedCount: Scalars["Int"];
  readonly reusedTracking: Scalars["Boolean"];
  readonly errorMessages?: Maybe<ReadonlyArray<FulfillmentError>>;
};

export type GbVatEntityType =
  | "NOT_APPLICABLE"
  | "NO_OBLIGATION"
  | "HAVE_OBLIGATION";

export type GcpeListingReviewSchema = {
  readonly __typename?: "GCPEListingReviewSchema";
  readonly reviewId: Scalars["ObjectIdType"];
  readonly productId: Scalars["ObjectIdType"];
  readonly oldProductName?: Maybe<Scalars["String"]>;
  readonly productName: Scalars["String"];
  readonly oldMainImageUrl?: Maybe<Scalars["String"]>;
  readonly mainImageUrl: Scalars["String"];
  readonly datetimeQueued: Datetime;
  readonly datetimeCompleted?: Maybe<Datetime>;
};

export type Gender = "UNKNOWN" | "MALE" | "FEMALE" | "NEUTRAL";

export type GeneralTaggingManagement = {
  readonly __typename?: "GeneralTaggingManagement";
  readonly localToLocalAllowedSubcategories?: Maybe<
    ReadonlyArray<TaggingViolationSubcategory>
  >;
  readonly taxonomyCategory?: Maybe<TaxonomyCategorySchema>;
};

export type GeneralTaggingManagementTaxonomyCategoryArgs = {
  treeVersion?: Maybe<Scalars["String"]>;
  categoryId?: Maybe<Scalars["Int"]>;
};

export type GenerateTestOrders = {
  readonly __typename?: "GenerateTestOrders";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type GenerateTestOrdersInput = {
  readonly productId?: Maybe<Scalars["ObjectIdType"]>;
  readonly variationId?: Maybe<Scalars["ObjectIdType"]>;
  readonly quantity?: Maybe<Scalars["Int"]>;
  readonly logisticsOption: GenerateTestOrdersLogisticsOptions;
  readonly country?: Maybe<CountryCode>;
  readonly state?: Maybe<Scalars["String"]>;
  readonly zipcode?: Maybe<Scalars["String"]>;
};

export type GenerateTestOrdersLogisticsOptions =
  | "RANDOM"
  | "WISH_EXPRESS"
  | "LESS_THAN_TRUCKLOAD"
  | "ADVANCED_LOGISTICS"
  | "OPTIONAL_ADVANCED_LOGISTICS"
  | "CONFIRMED_DELIVERY_POLICY"
  | "NONE";

export type GenerateVideoInput = {
  readonly slides?: Maybe<ReadonlyArray<VideoSlideSpec>>;
};

export type GenerateVideoMutation = {
  readonly __typename?: "GenerateVideoMutation";
  readonly ok?: Maybe<Scalars["Boolean"]>;
  readonly videoUrl?: Maybe<Scalars["String"]>;
};

export type GenWechatQrInput = {
  readonly scene?: Maybe<Scalars["String"]>;
};

export type GenWechatQrMutation = {
  readonly __typename?: "GenWechatQrMutation";
  readonly ticket?: Maybe<Scalars["String"]>;
};

export type GeoCoordinates = {
  readonly __typename?: "GeoCoordinates";
  readonly latitude: Scalars["String"];
  readonly longitude: Scalars["String"];
};

export type GermanyComplianceMutations = {
  readonly __typename?: "GermanyComplianceMutations";
  readonly upsertLink?: Maybe<UpsertGermanyLinkProductCompliance>;
  readonly upsertUin?: Maybe<UpsertGermanyProductUniqueIdentificationNumber>;
};

export type GermanyComplianceMutationsUpsertLinkArgs = {
  input: UpsertGermanyLinkProductComplianceInput;
};

export type GermanyComplianceMutationsUpsertUinArgs = {
  input?: Maybe<GermanyProductUniqueIdentificationNumberUpsertInput>;
};

export type GermanyProductUniqueIdentificationNumberAction =
  | "CREATE"
  | "UPDATE"
  | "DELETE";

export type GermanyProductUniqueIdentificationNumberCategory =
  | "PACKAGING"
  | "BATTERIES"
  | "ELECTRIC_AND_ELECTRONIC_EQUIPMENTS";

export type GermanyProductUniqueIdentificationNumberSchema = {
  readonly __typename?: "GermanyProductUniqueIdentificationNumberSchema";
  readonly merchant: MerchantSchema;
  readonly id: Scalars["ObjectIdType"];
  readonly category?: Maybe<GermanyProductUniqueIdentificationNumberCategory>;
  readonly status?: Maybe<GermanyProductUniqueIdentificationNumberStatus>;
  readonly updateTime?: Maybe<Datetime>;
  readonly eprNumber: Scalars["String"];
  readonly organizationOrRepresentativeName?: Maybe<Scalars["String"]>;
  readonly linkCount: Scalars["Int"];
};

export type GermanyProductUniqueIdentificationNumberStatus =
  | "DELETED"
  | "ADMIN_APPROVED"
  | "COMPLETE"
  | "REJECTED"
  | "INREVIEW";

export type GermanyProductUniqueIdentificationNumberUpsertInput = {
  readonly action: GermanyProductUniqueIdentificationNumberAction;
  readonly uinId?: Maybe<Scalars["ObjectIdType"]>;
  readonly category?: Maybe<GermanyProductUniqueIdentificationNumberCategory>;
  readonly organizationOrRepresentativeName?: Maybe<Scalars["String"]>;
  readonly eprNumber?: Maybe<Scalars["String"]>;
};

export type GetAndClaimProductTaxonomyCategoryDisputeForReview = {
  readonly __typename?: "GetAndClaimProductTaxonomyCategoryDisputeForReview";
  readonly dispute?: Maybe<ProductTaxonomyCategoryDisputeSchema>;
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type GetAndClaimProductTaxonomyCategoryDisputeForReviewInput = {
  readonly disputeId?: Maybe<Scalars["ObjectIdType"]>;
};

export type GoogleLoginDetails = {
  readonly __typename?: "GoogleLoginDetails";
  readonly authUrl: Scalars["String"];
};

export type GtinProductSchema = {
  readonly __typename?: "GtinProductSchema";
  readonly gtins: ReadonlyArray<Scalars["String"]>;
  readonly gtinFormats?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly asin?: Maybe<Scalars["String"]>;
  readonly title?: Maybe<Scalars["String"]>;
  readonly categories?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly brand?: Maybe<Scalars["String"]>;
  readonly wishBrand?: Maybe<BrandSchema>;
  readonly description?: Maybe<Scalars["String"]>;
  readonly features?: Maybe<Scalars["String"]>;
  readonly imageUrls?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly variations?: Maybe<ReadonlyArray<GtinVariationSchema>>;
};

export type GtinProductServiceSchema = {
  readonly __typename?: "GtinProductServiceSchema";
  readonly product?: Maybe<GtinProductSchema>;
};

export type GtinProductServiceSchemaProductArgs = {
  gtins: ReadonlyArray<Scalars["String"]>;
};

export type GtinVariationSchema = {
  readonly __typename?: "GtinVariationSchema";
  readonly gtin: Scalars["String"];
  readonly mpn?: Maybe<Scalars["String"]>;
  readonly model?: Maybe<Scalars["String"]>;
  readonly manufacturer?: Maybe<Scalars["String"]>;
  readonly ageGroup?: Maybe<Scalars["String"]>;
  readonly ingredients?: Maybe<Scalars["String"]>;
  readonly nutritionFacts?: Maybe<Scalars["String"]>;
  readonly energyEfficiencyClass?: Maybe<Scalars["String"]>;
  readonly color?: Maybe<Scalars["String"]>;
  readonly gender?: Maybe<Scalars["String"]>;
  readonly material?: Maybe<Scalars["String"]>;
  readonly pattern?: Maybe<Scalars["String"]>;
  readonly format?: Maybe<Scalars["String"]>;
  readonly multipack?: Maybe<Scalars["String"]>;
  readonly size?: Maybe<Scalars["String"]>;
  readonly length?: Maybe<Length>;
  readonly width?: Maybe<Length>;
  readonly height?: Maybe<Length>;
  readonly weight?: Maybe<Weight>;
  readonly imageUrls?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly price?: Maybe<CurrencyValue>;
};

export type IdDetails = {
  readonly __typename?: "IdDetails";
  readonly id: Scalars["String"];
  readonly redirectType: RedirectType;
};

export type IdDocTypes =
  | "DRIVER_LICENSE"
  | "GOVERNMENT_ISSUED_STATE_ID"
  | "PASSPORT";

export type IdentityMutations = {
  readonly __typename?: "IdentityMutations";
  readonly updatePermission?: Maybe<UpdatePermissionMutation>;
  readonly updateRole?: Maybe<UpdateRoleMutation>;
  readonly updateUserInfo?: Maybe<UpdateUserInfoMutation>;
  readonly updateQueue?: Maybe<UpdateUserQueuesMutation>;
  readonly factoryMutations?: Maybe<FactoryUserMutations>;
};

export type IdentityMutationsUpdatePermissionArgs = {
  input: UpdatePermissionInput;
};

export type IdentityMutationsUpdateRoleArgs = {
  input: UpdateRoleInput;
};

export type IdentityMutationsUpdateUserInfoArgs = {
  input: UpdateUserInfoInput;
};

export type IdentityMutationsUpdateQueueArgs = {
  input: UpdateUserQueuesInput;
};

export type IdentityServiceSchema = {
  readonly __typename?: "IdentityServiceSchema";
  readonly user?: Maybe<UserSchema>;
  readonly platformRoles: ReadonlyArray<RoleSchema>;
  readonly users?: Maybe<ReadonlyArray<UserSchema>>;
  readonly usersCount?: Maybe<Scalars["Int"]>;
  readonly visibleRoles: ReadonlyArray<RoleSchema>;
  readonly platformBdMerchantCountries: ReadonlyArray<BdMerchantCountryCodeType>;
};

export type IdentityServiceSchemaUserArgs = {
  id: Scalars["String"];
};

export type IdentityServiceSchemaUsersArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  query?: Maybe<Scalars["String"]>;
  sortField?: Maybe<UsersSortFieldType>;
  sortOrder?: Maybe<SortOrderType>;
  includeDisabledUsers?: Maybe<Scalars["Boolean"]>;
  roles?: Maybe<ReadonlyArray<RoleType>>;
};

export type IdentityServiceSchemaUsersCountArgs = {
  query?: Maybe<Scalars["String"]>;
  includeDisabledUsers?: Maybe<Scalars["Boolean"]>;
  roles?: Maybe<ReadonlyArray<RoleType>>;
};

export type ImageChangeMlTaggerJobSchema = {
  readonly __typename?: "ImageChangeMlTaggerJobSchema";
  readonly productId: Scalars["ObjectIdType"];
  readonly jobId: Scalars["ObjectIdType"];
  readonly state: TaggingJobState;
  readonly datetimeQueued: Datetime;
  readonly predictionProbability?: Maybe<Scalars["Float"]>;
  readonly mlEdition?: Maybe<Scalars["Int"]>;
  readonly taggingUser?: Maybe<UserSchema>;
  readonly result?: Maybe<TaggingMlResult>;
  readonly datetimeCompleted?: Maybe<Datetime>;
  readonly gcpeListingReview: GcpeListingReviewSchema;
};

export type ImageInput = {
  readonly id?: Maybe<Scalars["Int"]>;
  readonly url: Scalars["String"];
  readonly isCleanImage?: Maybe<Scalars["Boolean"]>;
};

export type ImageSchema = {
  readonly __typename?: "ImageSchema";
  readonly id: Scalars["Int"];
  readonly wishUrl: Scalars["String"];
  readonly isCleanImage: Scalars["Boolean"];
};

export type ImageSchemaWishUrlArgs = {
  size?: Maybe<ImageSize>;
};

export type ImageSize = "LARGE" | "MEDIUM" | "ORIGINAL" | "SMALL" | "TINY";

export type InappropriateViolationSchema = {
  readonly __typename?: "InappropriateViolationSchema";
  readonly isConfirmed: Scalars["Boolean"];
  readonly reason?: Maybe<CounterfeitReason>;
  readonly reasonDisplayName?: Maybe<Scalars["String"]>;
  readonly reasonExplanation?: Maybe<Scalars["String"]>;
  readonly subcategoryMessage?: Maybe<Scalars["String"]>;
};

export type InfoCollectedForPaymentProvider = {
  readonly __typename?: "InfoCollectedForPaymentProvider";
  readonly email?: Maybe<Scalars["String"]>;
};

export type InfractionSchema = {
  readonly __typename?: "InfractionSchema";
  readonly id: Scalars["String"];
  readonly stateText?: Maybe<Scalars["String"]>;
  readonly reasonText?: Maybe<Scalars["String"]>;
  readonly updatedAt: Datetime;
};

export type InitiateUploadInput = {
  readonly bucket: ClientWritableBucket;
  readonly filename?: Maybe<Scalars["String"]>;
  readonly contentType: Scalars["String"];
};

export type InitiateUploadMutation = {
  readonly __typename?: "InitiateUploadMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly uploadUrl?: Maybe<Scalars["String"]>;
  readonly uploadHeaders?: Maybe<Scalars["JSONString"]>;
  readonly downloadUrl?: Maybe<Scalars["String"]>;
};

export type InjunctionMerchantFreezeBulkCreateFreezes = {
  readonly __typename?: "InjunctionMerchantFreezeBulkCreateFreezes";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type InjunctionMerchantFreezeBulkReverseFreezes = {
  readonly __typename?: "InjunctionMerchantFreezeBulkReverseFreezes";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type InjunctionMerchantFreezeBulkUploadInput = {
  readonly file: FileInput;
};

export type InjunctionMerchantFreezeCreateFreeze = {
  readonly __typename?: "InjunctionMerchantFreezeCreateFreeze";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type InjunctionMerchantFreezeCreateFreezeInput = {
  readonly merchantId: Scalars["ObjectIdType"];
  readonly fine?: Maybe<CurrencyInput>;
  readonly fineType: FineReason;
  readonly notes: Scalars["String"];
  readonly troNumber: Scalars["Int"];
  readonly referenceTicketId: Scalars["String"];
  readonly freezeType: InjunctionMerchantFreezeType;
  readonly creationTimestamp: DatetimeInput;
  readonly isCascading: Scalars["Boolean"];
  readonly useFullAccountBalance: Scalars["Boolean"];
};

export type InjunctionMerchantFreezeFinePaymentInput = {
  readonly amountInUsd: Scalars["Float"];
  readonly fineType: FineReason;
  readonly merchantId: Scalars["ObjectIdType"];
  readonly troNumber: Scalars["Int"];
};

export type InjunctionMerchantFreezeFineReversalInput = {
  readonly fineId: Scalars["ObjectIdType"];
  readonly reversal: CurrencyInput;
  readonly notes: Scalars["String"];
  readonly referenceTicketId: Scalars["String"];
  readonly shouldCascadeFunds: Scalars["Boolean"];
};

export type InjunctionMerchantFreezeMutations = {
  readonly __typename?: "InjunctionMerchantFreezeMutations";
  readonly resolveFreeze?: Maybe<InjunctionMerchantFreezeResolveFreeze>;
  readonly updateLegalTimestamp?: Maybe<InjunctionMerchantFreezeUpdateLegalTimestamp>;
  readonly bulkCreateFreezes?: Maybe<InjunctionMerchantFreezeBulkCreateFreezes>;
  readonly bulkReverseFreezes?: Maybe<InjunctionMerchantFreezeBulkReverseFreezes>;
  readonly createFreeze?: Maybe<InjunctionMerchantFreezeCreateFreeze>;
  readonly reverseFreeze?: Maybe<InjunctionMerchantFreezeReverseFreeze>;
};

export type InjunctionMerchantFreezeMutationsResolveFreezeArgs = {
  input: InjunctionMerchantFreezeResolveFreezeInput;
};

export type InjunctionMerchantFreezeMutationsUpdateLegalTimestampArgs = {
  input: InjunctionMerchantFreezeUpdateLegalTimestampInput;
};

export type InjunctionMerchantFreezeMutationsBulkCreateFreezesArgs = {
  input: InjunctionMerchantFreezeBulkUploadInput;
};

export type InjunctionMerchantFreezeMutationsBulkReverseFreezesArgs = {
  input: InjunctionMerchantFreezeBulkUploadInput;
};

export type InjunctionMerchantFreezeMutationsCreateFreezeArgs = {
  input: InjunctionMerchantFreezeCreateFreezeInput;
};

export type InjunctionMerchantFreezeMutationsReverseFreezeArgs = {
  input: InjunctionMerchantFreezeReverseFreezeInput;
};

export type InjunctionMerchantFreezeResolveFreeze = {
  readonly __typename?: "InjunctionMerchantFreezeResolveFreeze";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type InjunctionMerchantFreezeResolveFreezeInput = {
  readonly freezeId: Scalars["ObjectIdType"];
};

export type InjunctionMerchantFreezeReverseFreeze = {
  readonly __typename?: "InjunctionMerchantFreezeReverseFreeze";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type InjunctionMerchantFreezeReverseFreezeInput = {
  readonly reversalType: FreezeReversalType;
  readonly reversalInput?: Maybe<InjunctionMerchantFreezeFineReversalInput>;
  readonly paymentInput?: Maybe<InjunctionMerchantFreezeFinePaymentInput>;
};

export type InjunctionMerchantFreezeSchema = {
  readonly __typename?: "InjunctionMerchantFreezeSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly merchantId: Scalars["ObjectIdType"];
  readonly freezeType: InjunctionMerchantFreezeType;
  readonly troNumber: Scalars["Int"];
  readonly fineIds: ReadonlyArray<Scalars["ObjectIdType"]>;
  readonly fines: ReadonlyArray<MerchantFineSchema>;
  readonly legalCounselCreationTs: Datetime;
  readonly sumOfFineAmounts: CurrencyValue;
  readonly tentativeFreezeAmount?: Maybe<CurrencyValue>;
  readonly state: InjunctionMerchantFreezeState;
};

export type InjunctionMerchantFreezeState = "ACTIVE" | "RESOLVED";

export type InjunctionMerchantFreezeType =
  | "FULL_ASSET_FREEZE"
  | "ONE_TIME_FREEZE";

export type InjunctionMerchantFreezeUpdateLegalTimestamp = {
  readonly __typename?: "InjunctionMerchantFreezeUpdateLegalTimestamp";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type InjunctionMerchantFreezeUpdateLegalTimestampInput = {
  readonly freezeId: Scalars["ObjectIdType"];
  readonly newTimestamp: DatetimeInput;
};

export type InventoryInput = {
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly count: Scalars["Int"];
};

export type InventorySchema = {
  readonly __typename?: "InventorySchema";
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly shippingType: WarehouseShippingType;
  readonly count: Scalars["Int"];
};

export type IpViolationBrandCategory = {
  readonly __typename?: "IPViolationBrandCategory";
  readonly category: BrandCategoryCode;
  readonly displayName: Scalars["String"];
};

export type IpViolationTaggingManagement = {
  readonly __typename?: "IPViolationTaggingManagement";
  readonly ipViolationReasons: ReadonlyArray<TaggingViolationReason>;
  readonly brandCategories: ReadonlyArray<IpViolationBrandCategory>;
  readonly taggableBrands: ReadonlyArray<BrandSchema>;
};

export type IsRequiredEnum = "NOT_INCLUDED" | "OPTIONAL" | "REQUIRED";

export type IssueRefund = {
  readonly __typename?: "IssueRefund";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type IssueRefundInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly refundReason: ReturnRequestRefundReason;
  readonly message: Scalars["String"];
  readonly refundType: RefundType;
  readonly partialRefundType?: Maybe<PartialRefundType>;
  readonly refundAmount?: Maybe<CurrencyInput>;
  readonly refundQuantity?: Maybe<Scalars["Int"]>;
  readonly refundPercentage?: Maybe<Scalars["Float"]>;
};

export type KycMerchantType = "NOT_SET" | "COMPANY" | "INDIVIDUAL";

export type KycProfilePaymentStatus =
  | "PAYMENT_ALLOWED"
  | "PAYMENT_HELD"
  | "PAYMENT_HOLD_PROPOSED";

export type KycProfileVerificationAdminStatus =
  | "NOT_SET"
  | "IN_PROGRESS"
  | "REJECTED"
  | "APPROVED"
  | "ON_HOLD";

export type KycProfileVerificationRiskScore =
  | "HIGH"
  | "NOT_SET"
  | "VERY_HIGH"
  | "MEDIUM"
  | "LOW";

export type KycProfileVerificationStatus =
  | "REJECTED"
  | "COMPLETE"
  | "INCOMPLETE";

export type KycVerificationSchema = {
  readonly __typename?: "KycVerificationSchema";
  readonly status?: Maybe<KycProfileVerificationStatus>;
  readonly paymentStatus?: Maybe<KycProfilePaymentStatus>;
  readonly adminStatus?: Maybe<KycProfileVerificationAdminStatus>;
  readonly riskScore?: Maybe<KycProfileVerificationRiskScore>;
  readonly merchantType?: Maybe<KycMerchantType>;
  readonly isMandatory?: Maybe<Scalars["Boolean"]>;
  readonly canStart: Scalars["Boolean"];
  readonly fromV2Flow: Scalars["Boolean"];
};

export type LateDeliverySchema = {
  readonly __typename?: "LateDeliverySchema";
  readonly rate?: Maybe<Scalars["Float"]>;
  readonly threshhold?: Maybe<Scalars["Float"]>;
};

export type LedgerAccountBalance = {
  readonly __typename?: "LedgerAccountBalance";
  readonly amount: Scalars["Float"];
  readonly currency: PaymentCurrencyCode;
  readonly balanceType: LedgerAccountBalanceType;
};

export type LedgerAccountBalanceType = "CONFIRMED" | "PENDING";

export type LedgerItem = {
  readonly __typename?: "LedgerItem";
  readonly id?: Maybe<Scalars["String"]>;
  readonly merchantPayableId: Scalars["String"];
  readonly payableType: LedgerPayableType;
  readonly merchantId: Scalars["String"];
  readonly documentId: Scalars["String"];
  readonly state: LedgerPayableState;
  readonly paymentType: PaymentType;
  readonly createdTime: Datetime;
  readonly paymentEligibleTime?: Maybe<Datetime>;
  readonly description: LedgerItemDescriptionDetails;
  readonly creditAmount?: Maybe<CurrencyValue>;
  readonly debitAmount?: Maybe<CurrencyValue>;
  readonly type: LedgerLineItemType;
};

export type LedgerItemDescriptionDetails = {
  readonly __typename?: "LedgerItemDescriptionDetails";
  readonly descriptionText: Scalars["String"];
  readonly idDetailList?: Maybe<ReadonlyArray<IdDetails>>;
};

export type LedgerItemInfo = {
  readonly __typename?: "LedgerItemInfo";
  readonly itemCount?: Maybe<Scalars["Int"]>;
  readonly itemList?: Maybe<ReadonlyArray<LedgerItem>>;
  readonly nextCutoffTime?: Maybe<Datetime>;
  readonly nextCutoffId?: Maybe<Scalars["String"]>;
};

export type LedgerLineItemType =
  | "ORDER"
  | "REFUND"
  | "REBATE"
  | "REBATE_CANCEL"
  | "INITIAL_WP_SHIPPING"
  | "INITIAL_WP_SHIPPING_OFFSET"
  | "INITIAL_WP_SHIPPING_REFUND"
  | "ESTIMATED_WP_SHIPPING"
  | "ESTIMATED_WP_SHIPPING_REFUND"
  | "TAX_ADJUSTMENT"
  | "INITIAL_WP_SHIPPING_REFUND_OFFSET"
  | "TAX"
  | "TAX_REFUND"
  | "FINE_DEDUCTION"
  | "FINE_REVERSAL"
  | "FEE_DEDUCTION"
  | "FEE_REVERSAL"
  | "ONEOFF_PAYMENT"
  | "ONEOFF_PAYMENT_CANCELLATION"
  | "PAYMENT"
  | "CONSOLIDATION";

export type LedgerOrderInfo = {
  readonly __typename?: "LedgerOrderInfo";
  readonly orderReleasedTime?: Maybe<Datetime>;
  readonly isValueOrder?: Maybe<Scalars["Boolean"]>;
  readonly isFbwFastPayment?: Maybe<Scalars["Boolean"]>;
  readonly isAplusOrder?: Maybe<Scalars["Boolean"]>;
  readonly isEpcOrder?: Maybe<Scalars["Boolean"]>;
  readonly isTopStandingMerchant?: Maybe<Scalars["Boolean"]>;
  readonly isExpeditedPolicy?: Maybe<Scalars["Boolean"]>;
  readonly isUnityOrder?: Maybe<Scalars["Boolean"]>;
  readonly isWishExpress?: Maybe<Scalars["Boolean"]>;
  readonly isWishLocal?: Maybe<Scalars["Boolean"]>;
  readonly trackingId?: Maybe<Scalars["String"]>;
  readonly shippedTime?: Maybe<Datetime>;
  readonly confirmedShippedTime?: Maybe<Datetime>;
  readonly carrierTier?: Maybe<OrderCarrierTier>;
  readonly confirmedDeliveredTime?: Maybe<Datetime>;
  readonly isFakeTrackingOrder?: Maybe<Scalars["Boolean"]>;
  readonly removedFromAplusTime?: Maybe<Datetime>;
  readonly warehouseArrivalTime?: Maybe<Datetime>;
  readonly trackingCancelledTime?: Maybe<Datetime>;
  readonly userReceivedTime?: Maybe<Datetime>;
  readonly disputeConfirmedTime?: Maybe<Datetime>;
  readonly disputeDeliveredTime?: Maybe<Datetime>;
  readonly disputeCarrierTier?: Maybe<OrderCarrierTier>;
};

export type LedgerPayableInfo = {
  readonly __typename?: "LedgerPayableInfo";
  readonly ledgerItems?: Maybe<ReadonlyArray<LedgerItem>>;
};

export type LedgerPayableState = "LIMBO" | "NEW" | "SETTLED" | "PAID_IN_CLROOT";

export type LedgerPayableType =
  | "PAYOUT"
  | "SETTLEMENT"
  | "FINE"
  | "ONEOFF"
  | "ORDER";

export type LegacyRefundSource =
  | "MERCHANT"
  | "USER_CANCEL"
  | "WISH_ADMIN_MERCHANT_EATS_COST"
  | "WISH_ADMIN_BOTH_EAT_COST"
  | "WISH_ADMIN_WISH_EATS_COST"
  | "AUTO_LATE_FULFILL";

export type Length = {
  readonly __typename?: "Length";
  readonly value: Scalars["Float"];
  readonly unit: LengthUnit;
};

export type LengthValueArgs = {
  targetUnit?: Maybe<LengthUnit>;
};

export type LengthInput = {
  readonly value: Scalars["Float"];
  readonly unit: LengthUnit;
};

export type LengthUnit = "METER" | "CENTIMETER" | "INCH" | "FEET" | "YARD";

export type LineItemSearchType =
  | "CTXN_REFUND_ITEM_ID"
  | "MERCHANT_ONEOFF_PAYMENT_ID"
  | "FINE_ID"
  | "ORDER_ID"
  | "DISPUTE_ID"
  | "CAMPAIGN_ID"
  | "LOGISTIC_PROVIDER_ID"
  | "FINE_REVERSAL_ID"
  | "REFUND_DETAIL_ID"
  | "CHARGING_ID"
  | "WARNING_ID"
  | "LOGISTIC_OPTION_ID"
  | "TRANSACTION_REFUND_ID"
  | "ID"
  | "MERCHANT_PAYMENT_ID"
  | "FBW_INVOICE_ID";

export type LineItemType =
  | "POLICY_VIOLATION_FINE"
  | "MISLEADING_VARIATION_FINE"
  | "B2B_SALE_FEE"
  | "WISH_PARCEL_SERVICE_ADJUST_PAYMENT"
  | "INITIAL_WISHPOST_SHIPPING_REFUND_OFFSET"
  | "REV_SHARE_ADJUST_PAYMENT"
  | "WISH_EXPRESS_REBATE_REVERSE"
  | "DISPUTE_APPROVED"
  | "WITHHELD_RELEASED"
  | "LOGISTIC_FEE"
  | "EARLY_PAYMENT"
  | "OVERPAY_PAYMENT_AMOUNT"
  | "QUALITY_REFUND_FINE"
  | "MERCHANT_HARASSMENT"
  | "WISHPOST_ADJUSTMENT_PAYMENT"
  | "WITHHOLD_FUND_FINE"
  | "EXTERNAL_BOOST_CPA_FEE"
  | "UNDERPAY_PAYMENT_AMOUNT"
  | "STRATEGIC_ORDER_REBATE"
  | "PAID_PLACEMENT_IMPRESSION_FEE"
  | "LCL_FBW_FEE"
  | "EARLY_PAYMENT_CANCELLATION"
  | "DECEPTIVE_FULFILLMENT_FINE"
  | "STORE_PAYMENT_CANCELLATION"
  | "ESTIMATED_WISHPOST_SHIPPING"
  | "PAYMENT"
  | "MARKETING_REBATE"
  | "UNFULFILLED_ORDER_FINE"
  | "PRODUCT_UNTAGGED_MISLEADING"
  | "FBW_PAYMENT"
  | "CHINA_POST_SUBSIDY_REVERSE"
  | "WISHPOST_LOGISTICS_FEE"
  | "CANCEL_WITHHOLD_PAYMENT"
  | "COUNTERFEIT_REFUND"
  | "COVID19_SUBSIDY_REVERSE"
  | "COLLECTIONS_BOOST_CAMPAIGN_FEE"
  | "RETURN_LABEL_FEE"
  | "ONEOFF_FINE"
  | "WISHPOST_ADJUSTMENT_DEDUCTION"
  | "FINE_REVERSED"
  | "TRANSACTION_FEE_REBATE_REVERSE"
  | "PRODUCT_REBATE"
  | "DOUBLE_DEDUCTION_BOOK_KEEPER"
  | "LATE_CONFIRMED_FULFILLMENT_FINE"
  | "WISHPOST_FULFILLMENT_FEE"
  | "FAKE_TRACKING_FINE"
  | "WITHHOLD_RELEASE"
  | "REFUNDED"
  | "PRODUCT_LISTING_FEE"
  | "CONSOLIDATE_MP_PAYMENT"
  | "OTHER_DEDUCTION"
  | "REGISTRATION_REFUND"
  | "EARLY_PAYMENT_REIMBURSEMENT_FEE"
  | "ONEOFF"
  | "TRANSACTION_FEE_REBATE"
  | "EXTERNAL_BOOST_FEE"
  | "MARKETING_REBATE_REVERSE"
  | "MERCHANT_INCENTIVE"
  | "PROMOTED_PRODUCT_DISABLE_FINE"
  | "INFRACTION_FINE"
  | "MERCHANT_INCENTIVE_REVERSE"
  | "RETROACTIVE_REFUND_FOR_LOW_RATED_PRODUCT"
  | "PRODUCT_BOOST_BALANCE_REFUND"
  | "NEW_REFUNDED"
  | "SE_CASH_BACK"
  | "LEGAL_SETTLEMENT_FINE"
  | "FBW_FEE"
  | "MERCHANT_CANCELLATION_FINE"
  | "EARLY_PAYMENT_DEDUCTION"
  | "PROMOTION_FEE"
  | "LEGAL_SETTLEMENT_RESERVED_PENALTY"
  | "COVID19_SUBSIDY"
  | "STORE_PAYMENT_DEDUCTION"
  | "SE_CASH_BACK_REVERSE"
  | "RETROACTIVE_REFUND_FOR_PROBLEM_PRODUCT"
  | "FAKE_RATING_FINE"
  | "ESTIMATED_WISHPOST_SHIPPING_REFUND"
  | "INITIAL_WISHPOST_SHIPPING_REFUND"
  | "CN_ORDER_NOT_SHIP_WITH_WISHPOST_FINE"
  | "INITIAL_WISHPOST_SHIPPING"
  | "CHINA_POST_SUBSIDY"
  | "STORE_PAYMENT"
  | "WISH_EXPRESS_REBATE"
  | "ONEOFF_ADMIN_TOOL"
  | "SHIPPED"
  | "WITHHOLD_PAYMENT"
  | "INITIAL_WISHPOST_SHIPPING_OFFSET"
  | "LEGAL_SETTLEMENT_PAID_PENALTY"
  | "WISH_PARCEL_SERVICE_ADJUST_FEE"
  | "CONSOLIDATE_MP_FINE"
  | "UNCONFIRMED_CARRIER_FINE"
  | "WISH_PARCEL_SERVICE_FEE"
  | "PAID_PLACEMENT_ENROLLMENT_FEE"
  | "STRATEGIC_ORDER_REBATE_REVERSE";

export type LinkProductComplianceAction =
  | "UPDATE_EU_RP"
  | "UPDATE_GERMANY_UIN"
  | "UPDATE_FRANCE_UIN";

export type LinkProductComplianceSchema = {
  readonly __typename?: "LinkProductComplianceSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly merchantId: Scalars["ObjectIdType"];
  readonly product?: Maybe<ProductSchema>;
  readonly productCategories: ReadonlyArray<MsrCategory>;
  readonly complianceCategories: ReadonlyArray<EuProductComplianceCategory>;
  readonly trueTags?: Maybe<ReadonlyArray<TrueTagSchema>>;
  readonly reviewState: LinkProductComplianceState;
  readonly euResponsiblePerson?: Maybe<ResponsiblePersonSchema>;
  readonly isLinkedWithFranceUin?: Maybe<Scalars["Boolean"]>;
  readonly isLinkedWithGermanyUin?: Maybe<Scalars["Boolean"]>;
  readonly franceUins?: Maybe<
    ReadonlyArray<FranceProductUniqueIdentificationNumberSchema>
  >;
  readonly germanyUins?: Maybe<
    ReadonlyArray<GermanyProductUniqueIdentificationNumberSchema>
  >;
};

export type LinkProductComplianceState =
  | "HAS_UIN"
  | "HAS_RP"
  | "NO_RP"
  | "NO_UIN";

export type LinkProductComplianceType =
  | "DE_COMPLIANCE"
  | "FR_COMPLIANCE"
  | "EU_COMPLIANCE";

export type LinkProductComplianceUpsertInput = {
  readonly action: LinkProductComplianceAction;
  readonly productIds: ReadonlyArray<Scalars["ObjectIdType"]>;
  readonly responsiblePersonId?: Maybe<Scalars["ObjectIdType"]>;
  readonly uinIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
};

export type LinkShippingProfile = {
  readonly __typename?: "LinkShippingProfile";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ListingQualityInsightsReportSchema = {
  readonly __typename?: "ListingQualityInsightsReportSchema";
  readonly presignedS3Url?: Maybe<Scalars["String"]>;
  readonly reportName?: Maybe<Scalars["String"]>;
  readonly errorCode?: Maybe<ErrorCode>;
};

export type ListingQualityInsightsSchema = {
  readonly __typename?: "ListingQualityInsightsSchema";
  readonly report?: Maybe<ListingQualityInsightsReportSchema>;
};

export type ListingStateSchema = {
  readonly __typename?: "ListingStateSchema";
  readonly state: CommerceProductListingState;
  readonly reason?: Maybe<CommerceProductListingStateReason>;
};

export type Locale =
  | "en"
  | "zh"
  | "de"
  | "fr"
  | "es"
  | "pt"
  | "sv"
  | "tr"
  | "pl"
  | "nl"
  | "ar"
  | "cs"
  | "hu"
  | "da"
  | "fi"
  | "nb"
  | "ko"
  | "ja"
  | "it"
  | "th"
  | "vi"
  | "id"
  | "up";

export type LocaleMutations = {
  readonly __typename?: "LocaleMutations";
  readonly changeLocale: ChangeLocale;
};

export type LocaleMutationsChangeLocaleArgs = {
  input: ChangeLocaleInput;
};

export type LoggableTable =
  | "PRODUCT_BOOST_EXPOSURE_BOX_VIEW"
  | "PRODUCT_BOOST_EXPOSURE_BOX_CREATE_CLICK"
  | "PRODUCT_BOOST_EXPOSURE_BOX_LEARN_MORE_CLICK"
  | "PRODUCT_BOOST_SPLASH_PAGE"
  | "PRODUCT_BOOST_LIST_CAMPAIGN_BUDGET_DEPLETION_CLICK"
  | "PRODUCT_BOOST_LIST_CAMPAIGN_BUDGET_DEPLETION_VIEW"
  | "PRODUCT_BOOST_NEW_NAV_TAB_CLICK"
  | "PRODUCT_BOOST_PUBLISH_AUTOMATED_CAMPAIGN_MODAL_VIEW"
  | "PRODUCT_BOOST_PUBLISH_AUTOMATED_CAMPAIGN_MODAL_CLICK"
  | "PRODUCT_BOOST_PRODUCT_FEEDBACK_VIEW"
  | "PB_BUDGET_DEPLETION_NOTI"
  | "PB_AUTOMATED_CAMPAIGN_PUBLISHED_NOTI"
  | "PB_CREATE_CAMPAIGN_ACTIVITY_TRACKER"
  | "PB_CREATE_CAMPAIGN_BUDGET_TRACKER"
  | "PB_CREATE_CAMPAIGN_USER_ERRORS"
  | "PB_PRODUCT_FEED_UPLOAD_PORTAL"
  | "PB_V2_CREATE_CAMPAIGN_ACTIVITY_TRACKER"
  | "PRODUCT_BOOST_FREE_PROMOTION_CAMPAIGN_MODAL_VIEW"
  | "PRODUCT_BOOST_FREE_PROMOTION_CAMPAIGN_MODAL_CLICK"
  | "PRODUCT_BOOST_DUPLICATE_CAMPAIGN_REMINDER_VIEW"
  | "PRODUCT_BOOST_DUPLICATE_CAMPAIGN_REMINDER_CLICK"
  | "PRODUCT_BOOST_PROMOTION_MODAL"
  | "PRODUCT_BOOST_ENABLE_PENDING_CAMPAIGN_MODAL"
  | "PRODUCT_BOOST_ENABLE_PENDING_CAMPAIGN_MODAL_CLICK"
  | "CAMPAIGN_DETAILS_PAGE_MERCHANT_ACTION"
  | "FBW_SPLASH_PAGE"
  | "TAX_DECLINE_ENROLLMENT"
  | "HOME_BANNER_IMPRESSION"
  | "HOME_BANNER_CTA_CLICK"
  | "MERCHANT_TODO_ITEMS"
  | "PRODUCT_BOOST_ONE_CLICK_DUPLICATE_AUTOMATED"
  | "PRODUCT_BOOST_NEW_PAGES_BUTTON_CLICK"
  | "MERCHANT_STANDING_CLICK"
  | "FINE_POLICY_PAGE_CLICK"
  | "MERCHANT_NAV_CLICK"
  | "FBW_RECOMMENDATION_DASHBOARD_CLICK"
  | "FBW_INVENTORY_LISTING_PAGE_ACTION"
  | "FBW_SHIPPING_PLAN_CREATION"
  | "FBS_PERFORMANCE_PAGE_ACTION"
  | "ADD_PRODUCT_BUTTON_CLICK"
  | "PRODUCT_BOOST_PRODUCT_LIFETIME_PERFORMANCE_PAGE_VIEW"
  | "BRAND_EDUCATION_CLICK"
  | "RESELLER_AGREEMENT_PAGE"
  | "SIGNUP_V3_ID_CARD_EXAMPLE"
  | "PB_BUDGET_DEPLETION_SOURCE"
  | "PRODUCT_BOOST_FREE_CREDIT_MODAL"
  | "PRODUCT_BOOST_TRENDING_CATEGORIES_MODAL"
  | "MM_INTERNAL_DOWNLOADS"
  | "EARLY_PAYMENT_REQUESTS"
  | "CLICK_CHECK_MY_MAIL"
  | "RECOMMENDATION_EMAIL_METRICS"
  | "EARLY_PAYMENT_PAGE"
  | "CHROME_SEARCH"
  | "MERCHANT_FAILED_PASSWORD_ATTEMPTS"
  | "HOME_PAGE_TUTORIAL_VIDEO_PLAYS"
  | "BLACKLIST_CRITERIA_DASHBOARD_ACTION"
  | "PRODUCT_BOOST_MANAGE_DAILY_BUDGET_CAMPAIGN_PAGE_VIEW"
  | "PRODUCT_BOOST_UPDATE_DAILY_BUDGET_CAMPAIGN_CLICK"
  | "PRODUCT_BOOST_CREATE_DAILY_BUDGET_CAMPAIGN_PAGE_VIEW"
  | "PRODUCT_BOOST_CREATE_DAILY_BUDGET_CAMPAIGN_CLICK"
  | "COLLECTIONS_BOOST_UI"
  | "PLUS_WISH_EXPRESS_UI"
  | "PLUS_SELLER_VERIFICATION_UI"
  | "PLUS_KYC_VERIFICATION_UI"
  | "PRODUCT_SHIPPING_PAGE_VIEW"
  | "PRODUCT_SHIPPING_CLICK_SAVE"
  | "ADD_GTIN_PRODUCT"
  | "MERCHANT_VACATION_MODE_SURVEY"
  | "PLUS_PRODUCT_UPLOAD"
  | "PERFORMANCE_OVERVIEW_DASHBOARD"
  | "MERCHANT_CS_SURVEY_RESULT"
  | "MERCHANT_WISH_PARCEL_SERVICE"
  | "MFP_MERCHANT_ACTIVITY_LOG";

export type LogicalQueueSchema = {
  readonly __typename?: "LogicalQueueSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name?: Maybe<Scalars["String"]>;
  readonly state?: Maybe<LogicalQueueStateType>;
};

export type LogicalQueueStateType = "ACTIVE" | "DISABLED";

export type LoginAsMutations = {
  readonly __typename?: "LoginAsMutations";
  readonly user?: Maybe<ByUserIdMutation>;
};

export type LoginAsMutationsUserArgs = {
  input: ByUserIdInput;
};

export type LoginErrorState =
  | "TFA_REQUIRED"
  | "CAPTCHA_REQUIRED"
  | "LOGIN_ERROR";

export type LoginMutation = {
  readonly __typename?: "LoginMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly errorState?: Maybe<LoginErrorState>;
  readonly loginOk: Scalars["Boolean"];
  readonly sessionKey?: Maybe<Scalars["String"]>;
  readonly obfuscatedPhoneNumber?: Maybe<Scalars["String"]>;
  readonly preferQr?: Maybe<Scalars["Boolean"]>;
  readonly wechatBound?: Maybe<Scalars["Boolean"]>;
};

export type LoginMutationInput = {
  readonly username: Scalars["String"];
  readonly password: Scalars["String"];
  readonly rememberMe?: Maybe<Scalars["Boolean"]>;
  readonly tfaToken?: Maybe<Scalars["String"]>;
  readonly qrTicket?: Maybe<Scalars["String"]>;
  readonly captchaToken?: Maybe<Scalars["String"]>;
  readonly captchaCode?: Maybe<Scalars["String"]>;
  readonly deviceId?: Maybe<Scalars["String"]>;
  readonly deviceName?: Maybe<Scalars["String"]>;
};

export type LogisticsMetadataSchema = {
  readonly __typename?: "LogisticsMetadataSchema";
  readonly weight?: Maybe<Weight>;
  readonly length?: Maybe<Length>;
  readonly width?: Maybe<Length>;
  readonly height?: Maybe<Length>;
  readonly isFbwRecommended?: Maybe<Scalars["Boolean"]>;
  readonly gmvPer1k?: Maybe<CurrencyValue>;
};

export type LogisticsMutations = {
  readonly __typename?: "LogisticsMutations";
  readonly upsertConfirmedDeliveryCarrier?: Maybe<UpsertConfirmedDeliveryCarrier>;
  readonly createShippingProvider: CreateShippingProvider;
  readonly changeShippingProviderStatus: ChangeShippingProviderStatus;
  readonly updateShippingProviderName: UpdateShippingProviderName;
  readonly updateShippingProvider: UpdateShippingProvider;
  readonly fulfilledByWish?: Maybe<FulfilledByWishMutations>;
};

export type LogisticsMutationsUpsertConfirmedDeliveryCarrierArgs = {
  input: DeliveryCarrierUpsertInput;
};

export type LogisticsMutationsCreateShippingProviderArgs = {
  input: ShippingProviderInput;
};

export type LogisticsMutationsChangeShippingProviderStatusArgs = {
  input: ChangeShippingProviderStatusInput;
};

export type LogisticsMutationsUpdateShippingProviderNameArgs = {
  input: UpdateShippingProviderNameInput;
};

export type LogisticsMutationsUpdateShippingProviderArgs = {
  input: ShippingProviderInput;
};

export type LogisticsSchema = {
  readonly __typename?: "LogisticsSchema";
  readonly confirmedDeliveryCarrier?: Maybe<ConfirmedDeliveryCarriers>;
  readonly shippingProviders?: Maybe<ReadonlyArray<ShippingProviderSchema>>;
  readonly shippingProvidersCount?: Maybe<Scalars["Int"]>;
  readonly nextProviderId?: Maybe<Scalars["Int"]>;
  readonly fbw: FulfilledByWishSchema;
};

export type LogisticsSchemaShippingProvidersArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ShippingProviderSearchType>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  states?: Maybe<ReadonlyArray<ShippingProviderState>>;
  isQualified?: Maybe<Scalars["Boolean"]>;
};

export type LogisticsSchemaShippingProvidersCountArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ShippingProviderSearchType>;
  states?: Maybe<ReadonlyArray<ShippingProviderState>>;
};

export type LogoutMutation = {
  readonly __typename?: "LogoutMutation";
  readonly ok: Scalars["Boolean"];
  readonly error?: Maybe<Scalars["String"]>;
};

export type LogToTreasureData = {
  readonly __typename?: "LogToTreasureData";
  readonly ok?: Maybe<Scalars["Boolean"]>;
};

export type LogToTreasureDataInput = {
  readonly table: LoggableTable;
  readonly data: Scalars["JSONString"];
};

export type LqdCampaignInput = {
  readonly productId: Scalars["ObjectIdType"];
  readonly startDate: DatetimeInput;
};

export type LqdCampaignSchema = {
  readonly __typename?: "LQDCampaignSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly productId: Scalars["ObjectIdType"];
  readonly product: ProductSchema;
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly state: LqdCampaignState;
  readonly impressions: Scalars["Int"];
};

export type LqdCampaignState =
  | "CANCELLED"
  | "ENDED"
  | "STARTED"
  | "SAVED"
  | "NEW";

export type LqdProductStatsByDaySchema = {
  readonly __typename?: "LQDProductStatsByDaySchema";
  readonly productId: Scalars["ObjectIdType"];
  readonly product: ProductSchema;
  readonly date: Datetime;
  readonly clicks: Scalars["Int"];
  readonly impressions: Scalars["Int"];
  readonly lqdOrders: Scalars["Int"];
  readonly orders: Scalars["Int"];
  readonly gmv: CurrencyValue;
};

export type LqdPromotionSchema = {
  readonly __typename?: "LQDPromotionSchema";
  readonly campaigns: ReadonlyArray<LqdCampaignSchema>;
  readonly campaignsCount: Scalars["Int"];
};

export type LqdPromotionSchemaCampaignsArgs = {
  startDate: DatetimeInput;
  endDate: DatetimeInput;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
};

export type LqdPromotionSchemaCampaignsCountArgs = {
  startDate: DatetimeInput;
  endDate: DatetimeInput;
};

export type LqdPromotionStats = {
  readonly __typename?: "LQDPromotionStats";
  readonly byDay: ReadonlyArray<LqdProductStatsByDaySchema>;
};

export type ManualLinkAuthentication = {
  readonly merchant: Scalars["String"];
  readonly password: Scalars["String"];
  readonly sendPhoneCall?: Maybe<Scalars["Boolean"]>;
};

export type ManualLinkAuthenticationMutation = {
  readonly __typename?: "ManualLinkAuthenticationMutation";
  readonly ok: Scalars["Boolean"];
  readonly obfuscatedPhoneNumber?: Maybe<Scalars["String"]>;
  readonly supportVerificationCode?: Maybe<Scalars["String"]>;
  readonly message?: Maybe<Scalars["String"]>;
};

export type ManualLinkDeletion = {
  readonly merchant: Scalars["String"];
};

export type ManualLinkDeletionMutation = {
  readonly __typename?: "ManualLinkDeletionMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ManualLinkVerification = {
  readonly verificationCode: Scalars["String"];
  readonly merchant: Scalars["String"];
};

export type ManualLinkVerificationMutation = {
  readonly __typename?: "ManualLinkVerificationMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type MarketingBonusBudgetType =
  | "CNY_BONUS_BUDGET"
  | "DECREASED_PB_SPEND_BONUS_BUDGET"
  | "VIDEO_PRODUCTS_BONUS_BUDGET"
  | "NO_PROMOTION";

export type MarketingCampaignPropertySchema = {
  readonly __typename?: "MarketingCampaignPropertySchema";
  readonly maxCampaignNameLength: Scalars["Int"];
  readonly minStartDate: Datetime;
  readonly maxStartDate: Datetime;
  readonly maxNumWeeks: Scalars["Int"];
  readonly maxProducts: Scalars["Int"];
  readonly minBid: CurrencyValue;
  readonly maxBid: CurrencyValue;
  readonly minKeywords: Scalars["Int"];
  readonly maxKeywords: Scalars["Int"];
  readonly maxKeywordLen: Scalars["Int"];
  readonly maxCsvDownloadRows: Scalars["Int"];
  readonly learningStatusThreshold: Scalars["Int"];
  readonly flexibleBudgetSuggestedBudgetFactor: Scalars["Float"];
  readonly campaignLockDays: Scalars["Int"];
};

export type MarketingCampaignState =
  | "STARTED"
  | "READY"
  | "PAID"
  | "DRAFTING"
  | "ENDED"
  | "STOPPED"
  | "CANCELLED"
  | "NEW"
  | "SAVED"
  | "PENDING";

export type MarketingFlexibleBudgetType =
  | "ALL_TIER"
  | "DISABLED"
  | "SILVER_TIER";

export type MarketingImpressionDailyStats = {
  readonly __typename?: "MarketingImpressionDailyStats";
  readonly date: Datetime;
  readonly impressions?: Maybe<Scalars["Int"]>;
};

export type MarketingMerchantPropertySchema = {
  readonly __typename?: "MarketingMerchantPropertySchema";
  readonly state: MarketingMerchantState;
  readonly allowMaxboost: Scalars["Boolean"];
  readonly hasAutomatedCampaign: Scalars["Boolean"];
  readonly showCredits: Scalars["Boolean"];
  readonly wishSubsidyDiscountFactor: Scalars["Float"];
  readonly defaultFlexibleBudgetType: MarketingFlexibleBudgetType;
  readonly minBudgetToAdd: CurrencyValue;
  readonly maxBudgetToAdd: CurrencyValue;
  readonly minSpendPerProduct: CurrencyValue;
  readonly dailyMinBudget: CurrencyValue;
  readonly allowLocalizedCurrency: Scalars["Boolean"];
  readonly spending: MarketingSpendingBreakdown;
  readonly latestTosVersion: Scalars["Int"];
  readonly canAcceptTos: Scalars["Boolean"];
  readonly isFreeBudgetMerchant: Scalars["Boolean"];
  readonly refundAssuranceConstants: RefundAssuranceConstants;
  readonly offsiteBoost: OffsiteBoost;
};

export type MarketingMerchantState =
  | "INVITED"
  | "REJECTED"
  | "APPROVED"
  | "PENDING";

export type MarketingPeriodImpressionStats = {
  readonly __typename?: "MarketingPeriodImpressionStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly impressionDailyStats: ReadonlyArray<MarketingImpressionDailyStats>;
  readonly totalImpressions: Scalars["String"];
};

export type MarketingServiceMutations = {
  readonly __typename?: "MarketingServiceMutations";
  readonly acceptTos: ProductBoostAcceptTos;
  readonly updateOffsiteBoost: UpdateOffsiteBoost;
  readonly createLqdCampaign: CreateLqdCampaign;
};

export type MarketingServiceMutationsAcceptTosArgs = {
  input: ProductBoostAcceptTosInput;
};

export type MarketingServiceMutationsUpdateOffsiteBoostArgs = {
  input: OffsiteBoostPropertyInput;
};

export type MarketingServiceMutationsCreateLqdCampaignArgs = {
  input: LqdCampaignInput;
};

export type MarketingServiceSchema = {
  readonly __typename?: "MarketingServiceSchema";
  readonly floorbids: ReadonlyArray<FloorBidsSchema>;
  readonly campaign?: Maybe<CampaignSchema>;
  readonly merchantProperty?: Maybe<MarketingMerchantPropertySchema>;
  readonly currentMerchant?: Maybe<MarketingMerchantPropertySchema>;
  readonly campaignProperty?: Maybe<MarketingCampaignPropertySchema>;
  readonly impressionStats: MarketingPeriodImpressionStats;
  readonly productPromotion?: Maybe<ProductPromotionSchema>;
  readonly productPromotions: ReadonlyArray<ProductPromotionSchema>;
  readonly productPromotionsCount: Scalars["Int"];
  readonly promotableProducts: ReadonlyArray<PromotableProduct>;
  readonly promotableProductsCount: Scalars["Int"];
  readonly trendingCategories: ReadonlyArray<TrueTagSchema>;
  readonly lqdPromotion: LqdPromotionSchema;
  readonly balanceTransactions: ReadonlyArray<BalanceTransactionRecord>;
  readonly balanceTransactionsCount: Scalars["Int"];
  readonly creditTransactions: ReadonlyArray<CreditTransactionRecord>;
  readonly creditTransactionsCount: Scalars["Int"];
  readonly lowBudgetCampaignCount: Scalars["Int"];
  readonly pendingCampaignCount: Scalars["Int"];
  readonly actionRequiredCampaignCount: Scalars["Int"];
};

export type MarketingServiceSchemaCampaignArgs = {
  id: Scalars["ObjectIdType"];
  duplicateId?: Maybe<Scalars["ObjectIdType"]>;
};

export type MarketingServiceSchemaMerchantPropertyArgs = {
  merchantId: Scalars["ObjectIdType"];
};

export type MarketingServiceSchemaImpressionStatsArgs = {
  startTime: DatetimeInput;
  endTime: DatetimeInput;
};

export type MarketingServiceSchemaProductPromotionArgs = {
  productId: Scalars["ObjectIdType"];
};

export type MarketingServiceSchemaProductPromotionsArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ProductPromotionSearchType>;
  promotionStatuses?: Maybe<ReadonlyArray<ProductPromotionStatus>>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  refundAssuranceType?: Maybe<ProductPromotionRefundAssuranceType>;
};

export type MarketingServiceSchemaProductPromotionsCountArgs = {
  query?: Maybe<Scalars["String"]>;
  refundAssuranceType?: Maybe<ProductPromotionRefundAssuranceType>;
  searchType?: Maybe<ProductPromotionSearchType>;
  promotionStatuses?: Maybe<ReadonlyArray<ProductPromotionStatus>>;
};

export type MarketingServiceSchemaPromotableProductsArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ProductPromotionSearchType>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  wishExpressOnly?: Maybe<Scalars["Boolean"]>;
};

export type MarketingServiceSchemaPromotableProductsCountArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ProductPromotionSearchType>;
  wishExpressOnly?: Maybe<Scalars["Boolean"]>;
};

export type MarketingServiceSchemaBalanceTransactionsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
};

export type MarketingServiceSchemaCreditTransactionsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
};

export type MarketingServiceSchemaPendingCampaignCountArgs = {
  createdInPastDays?: Maybe<Scalars["Int"]>;
};

export type MarketingServiceSchemaActionRequiredCampaignCountArgs = {
  createdInPastDays?: Maybe<Scalars["Int"]>;
};

export type MarketingSpendingBreakdown = {
  readonly __typename?: "MarketingSpendingBreakdown";
  readonly accountBalance: CurrencyValue;
  readonly promotionLoan: CurrencyValue;
  readonly budgetAvailable: CurrencyValue;
  readonly promotionLoanDescription: Scalars["String"];
  readonly promotionCredit: CurrencyValue;
  readonly promotionBalance: CurrencyValue;
  readonly pending: CurrencyValue;
};

export type MarketingStats = {
  readonly __typename?: "MarketingStats";
  readonly offsiteBoost: OffsiteBoostStats;
  readonly lqdPromotion: LqdPromotionStats;
};

export type MarketingStatsOffsiteBoostArgs = {
  startDate: DatetimeInput;
  endDate: DatetimeInput;
};

export type MarketingStatsLqdPromotionArgs = {
  campaignId: Scalars["ObjectIdType"];
};

export type MarkProductTaxonomyCategoryDisputeUnchanged = {
  readonly __typename?: "MarkProductTaxonomyCategoryDisputeUnchanged";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type MarkProductTaxonomyCategoryDisputeUnchangedInput = {
  readonly disputeId: Scalars["ObjectIdType"];
  readonly adminUnchangedReason: ProductTaxonomyCategoryDisputeAdminUnchangedReason;
  readonly adminNote?: Maybe<Scalars["String"]>;
};

export type MarkProductTaxonomyCategoryDisputeUpdated = {
  readonly __typename?: "MarkProductTaxonomyCategoryDisputeUpdated";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type MarkProductTaxonomyCategoryDisputeUpdatedInput = {
  readonly disputeId: Scalars["ObjectIdType"];
  readonly categoryIdApproved: Scalars["Int"];
  readonly categoryTreeVersion: Scalars["String"];
  readonly categoryTreeId: Scalars["Int"];
  readonly categoryPath: Scalars["String"];
};

export type MerchantAnnouncementCategory =
  | "LOGISTICS"
  | "INTELLECTUAL_PROPERTY"
  | "POLICIES_AND_TERMS"
  | "TAX"
  | "SHIPPING_CARRIERS"
  | "ACCOUNT_SETTINGS"
  | "LOGISTICS_PRICING"
  | "API"
  | "PRODUCTS"
  | "PAYMENTS"
  | "LOCAL_CURRENCY"
  | "ORDERS"
  | "INSIGHTS";

export type MerchantAnnouncementProgram =
  | "MERCHANT_FUNDED_PROMOTIONS"
  | "ADVANCED_LOGISTICS_PROGRAM"
  | "WISHPOST"
  | "VIDEOS"
  | "MERCHANT_STANDING"
  | "WISH_EXPRESS"
  | "FBW_FBS"
  | "WISH_STANDARDS"
  | "PARTIAL_REFUNDS"
  | "PRODUCTBOOST"
  | "RETURNS_PROGRAM"
  | "EPC";

export type MerchantAnnouncementSchema = {
  readonly __typename?: "MerchantAnnouncementSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly type: MerchantAnnouncementType;
  readonly createdAt?: Maybe<Datetime>;
  readonly expiryDate?: Maybe<Datetime>;
  readonly title?: Maybe<Scalars["String"]>;
  readonly message?: Maybe<Scalars["String"]>;
  readonly ctaText?: Maybe<Scalars["String"]>;
  readonly ctaLink?: Maybe<Scalars["String"]>;
  readonly ctaDueDate?: Maybe<Datetime>;
  readonly sender: UserSchema;
  readonly state: MerchantAnnouncementState;
  readonly categories?: Maybe<ReadonlyArray<AnnouncementCategorySchema>>;
  readonly program?: Maybe<AnnouncementProgramSchema>;
  readonly important?: Maybe<Scalars["Boolean"]>;
};

export type MerchantAnnouncementState =
  | "NEW"
  | "UPDATE"
  | "COMPLETE"
  | "UPDATING"
  | "CREATING";

export type MerchantAnnouncementType = "SYSTEM_UPDATE" | "BD_ANNOUNCEMENT";

export type MerchantAnnouncementV2Schema = {
  readonly __typename?: "MerchantAnnouncementV2Schema";
  readonly id: Scalars["ObjectIdType"];
  readonly type: AnnouncementType;
  readonly publishDate: Datetime;
  readonly expiryDate?: Maybe<Datetime>;
  readonly audienceSourceType: AnnouncementAudienceSourceType;
  readonly contentType?: Maybe<AnnouncementContentType>;
  readonly title?: Maybe<Scalars["String"]>;
  readonly message?: Maybe<Scalars["String"]>;
  readonly link?: Maybe<Scalars["String"]>;
  readonly ctaText?: Maybe<Scalars["String"]>;
  readonly ctaDueDate?: Maybe<Datetime>;
  readonly sender: UserSchema;
  readonly state: AnnouncementState;
  readonly userAnnouncementCount: Scalars["Int"];
  readonly categories: ReadonlyArray<AnnouncementCategorySchemaV2>;
  readonly program?: Maybe<AnnouncementProgramSchemaV2>;
  readonly locales: ReadonlyArray<AnnouncementLocale>;
  readonly important?: Maybe<Scalars["Boolean"]>;
};

export type MerchantBrandSchema = {
  readonly __typename?: "MerchantBrandSchema";
  readonly brand: BrandSchema;
  readonly numProducts: Scalars["Int"];
  readonly lifetimeStatsObject?: Maybe<BrandedMerchantLifeTimeStatsObjectSchema>;
};

export type MerchantConnectionSchema = {
  readonly __typename?: "MerchantConnectionSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly merchants: ReadonlyArray<MerchantSchema>;
  readonly merchantIds: ReadonlyArray<Scalars["String"]>;
  readonly confidence?: Maybe<Scalars["Float"]>;
  readonly reason: Scalars["String"];
  readonly matchedValue: Scalars["String"];
  readonly updatedTime?: Maybe<Datetime>;
};

export type MerchantCountryDetailsSchema = {
  readonly __typename?: "MerchantCountryDetailsSchema";
  readonly detectedDomicileCountry?: Maybe<Country>;
  readonly detectedShipFromCountry?: Maybe<Country>;
  readonly domicileDetectionReason?: Maybe<Scalars["String"]>;
  readonly domicileDetectionFactors: ReadonlyArray<DetectionFactor>;
};

export type MerchantCountryDetectionFactorType =
  | "PHONE_COUNTRY"
  | "SHIP_FROM_OVERRIDE"
  | "PAYMENT_PROVIDER"
  | "BD_REP_COUNTRY"
  | "GEOIP_LOGIN"
  | "MERCHANT_GROUP"
  | "STORE_ADDRESS"
  | "ERP_ENROLLMENT"
  | "WISHPOST_LINKED"
  | "BUSINESS_ADDRESS"
  | "DOMICILE_OVERRIDE"
  | "BOUND_WISHPOST"
  | "EMAIL_PROVIDER"
  | "ORDER_SHIPPING_PROVIDER"
  | "ORDER_TRACKING_ORIGIN"
  | "VERIFIED_PROFILE";

export type MerchantEntityManualLinkMutations = {
  readonly __typename?: "MerchantEntityManualLinkMutations";
  readonly requestManualLink?: Maybe<ManualLinkAuthenticationMutation>;
  readonly completeManualLink?: Maybe<ManualLinkVerificationMutation>;
  readonly deleteManualLink?: Maybe<ManualLinkDeletionMutation>;
};

export type MerchantEntityManualLinkMutationsRequestManualLinkArgs = {
  input: ManualLinkAuthentication;
};

export type MerchantEntityManualLinkMutationsCompleteManualLinkArgs = {
  input: ManualLinkVerification;
};

export type MerchantEntityManualLinkMutationsDeleteManualLinkArgs = {
  input: ManualLinkDeletion;
};

export type MerchantEntitySchema = {
  readonly __typename?: "MerchantEntitySchema";
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly merchants?: Maybe<ReadonlyArray<MerchantSchema>>;
  readonly updatedTime?: Maybe<Datetime>;
  readonly merchantConnections?: Maybe<ReadonlyArray<MerchantConnectionSchema>>;
};

export type MerchantFacingPayoutState =
  | "GENERATING"
  | "SUCCESS"
  | "RELEASED"
  | "NA"
  | "DELAYED"
  | "WITHHOLD"
  | "REISSUED"
  | "FAILED"
  | "RESUBMITTED"
  | "CANCELLED"
  | "IN_PROGRESS"
  | "PENDING";

export type MerchantFbwSchema = {
  readonly __typename?: "MerchantFBWSchema";
  readonly availableWarehouses?: Maybe<ReadonlyArray<FbwWarehouseSchema>>;
  readonly availableWarehousesForShippingPlanSubmission?: Maybe<
    ReadonlyArray<FbwWarehouseSchema>
  >;
};

export type MerchantFeedJobStatus =
  | "EXCEPTION"
  | "NEW_AND_EMAILED"
  | "FINISHED"
  | "RUNNING"
  | "FINISHED_AND_EMAILED"
  | "CANCELLED"
  | "NEW"
  | "PENDING";

export type MerchantFileSchema = {
  readonly __typename?: "MerchantFileSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly displayFilename: Scalars["String"];
  readonly fileUrl: Scalars["String"];
  readonly isImageFile: Scalars["Boolean"];
};

export type MerchantFinalSaleAction = "ENABLE" | "DISABLE";

export type MerchantFinalSaleMutations = {
  readonly __typename?: "MerchantFinalSaleMutations";
  readonly updateMerchantFinalSale?: Maybe<UpdateMerchantFinalSale>;
};

export type MerchantFinalSaleMutationsUpdateMerchantFinalSaleArgs = {
  input?: Maybe<MerchantFinalSaleUpdateInput>;
};

export type MerchantFinalSaleUpdateInput = {
  readonly action: MerchantFinalSaleAction;
  readonly merchantId: Scalars["ObjectIdType"];
  readonly category: FinalSaleCategory;
};

export type MerchantFineExemptionInfoLinkType =
  | "CATEGORY"
  | "ARTICLE"
  | "FULL_LINK";

export type MerchantFineSchema = {
  readonly __typename?: "MerchantFineSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly merchantId: Scalars["ObjectIdType"];
  readonly merchantPaymentId?: Maybe<Scalars["ObjectIdType"]>;
  readonly merchantPaymentTime?: Maybe<Datetime>;
  readonly localizedAmount?: Maybe<CurrencyValue>;
  readonly delayedDeductionDate?: Maybe<Datetime>;
  readonly status: Status;
  readonly fineType: FineReason;
  readonly isExempt: Scalars["Boolean"];
  readonly exemptInfoLink?: Maybe<Scalars["String"]>;
  readonly exemptLinkType?: Maybe<MerchantFineExemptionInfoLinkType>;
  readonly policyLink?: Maybe<Scalars["String"]>;
  readonly amount?: Maybe<Scalars["Float"]>;
  readonly timestamp?: Maybe<Datetime>;
  readonly reversals?: Maybe<ReadonlyArray<Reversal>>;
  readonly phabTicketId?: Maybe<Scalars["String"]>;
  readonly creator?: Maybe<UserSchema>;
};

export type MerchantGamingReviewFieldTicketType = "lastSourceUpsertDate";

export type MerchantGamingReviewMutations = {
  readonly __typename?: "MerchantGamingReviewMutations";
  readonly updateMerchantGamingReviewTicket?: Maybe<UpdateMerchantGamingReviewTicket>;
  readonly manualCreateUpload?: Maybe<MerchantGamingReviewTicketManualCreationUpload>;
  readonly manualCreate?: Maybe<MerchantGamingReviewTicketManualCreation>;
};

export type MerchantGamingReviewMutationsUpdateMerchantGamingReviewTicketArgs =
  {
    input?: Maybe<MerchantGamingReviewUpdateInput>;
  };

export type MerchantGamingReviewMutationsManualCreateUploadArgs = {
  input: MerchantGamingReviewTicketManualCreationUploadInput;
};

export type MerchantGamingReviewMutationsManualCreateArgs = {
  input: MerchantGamingReviewTicketManualCreationUploadInput;
};

export type MerchantGamingReviewPolicyTierType =
  | "SUSPICIOUS_TIER"
  | "HOME_TIER"
  | "PROBATION_TIER";

export type MerchantGamingReviewSourceType =
  | "POLICY"
  | "GATE_KEEPER"
  | "WISH_ADMIN";

export type MerchantGamingReviewState =
  | "AWAITING_ADMIN"
  | "CONFIRMED"
  | "REJECTED"
  | "ESCALATED"
  | "CLOSED";

export type MerchantGamingReviewTicketAction =
  | "COMMENT"
  | "CLAIM"
  | "ESCALATE"
  | "UPDATE_POLICY_TIER"
  | "UNCLAIM"
  | "CLOSE";

export type MerchantGamingReviewTicketCommentSchema = {
  readonly __typename?: "MerchantGamingReviewTicketCommentSchema";
  readonly senderId?: Maybe<Scalars["ObjectIdType"]>;
  readonly senderName?: Maybe<Scalars["String"]>;
  readonly message: Scalars["String"];
  readonly date: Datetime;
};

export type MerchantGamingReviewTicketManualCreation = {
  readonly __typename?: "MerchantGamingReviewTicketManualCreation";
  readonly ok: Scalars["Boolean"];
  readonly logs?: Maybe<Scalars["String"]>;
};

export type MerchantGamingReviewTicketManualCreationSchema = {
  readonly __typename?: "MerchantGamingReviewTicketManualCreationSchema";
  readonly merchantId: Scalars["ObjectIdType"];
  readonly reason: Scalars["String"];
};

export type MerchantGamingReviewTicketManualCreationUpload = {
  readonly __typename?: "MerchantGamingReviewTicketManualCreationUpload";
  readonly ok: Scalars["Boolean"];
  readonly logs?: Maybe<Scalars["String"]>;
  readonly updateList: ReadonlyArray<MerchantGamingReviewTicketManualCreationSchema>;
};

export type MerchantGamingReviewTicketManualCreationUploadInput = {
  readonly fileUrl: Scalars["String"];
};

export type MerchantGamingReviewTicketSchema = {
  readonly __typename?: "MerchantGamingReviewTicketSchema";
  readonly merchant?: Maybe<MerchantSchema>;
  readonly id: Scalars["ObjectIdType"];
  readonly merchantGamingReviewPolicyTier?: Maybe<MerchantGamingReviewPolicyTierType>;
  readonly merchantId: Scalars["ObjectIdType"];
  readonly sources: ReadonlyArray<MerchantGamingReviewTicketSourceSchema>;
  readonly state: MerchantGamingReviewState;
  readonly lastSourceUpsertDate: Datetime;
  readonly isOpen: Scalars["Boolean"];
  readonly isClosed: Scalars["Boolean"];
  readonly isClaimed: Scalars["Boolean"];
  readonly claimedAdminId?: Maybe<Scalars["ObjectIdType"]>;
  readonly claimedDate?: Maybe<Datetime>;
  readonly decisionAdminId?: Maybe<Scalars["ObjectIdType"]>;
  readonly decisionDate?: Maybe<Datetime>;
  readonly infractionIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly comments?: Maybe<
    ReadonlyArray<MerchantGamingReviewTicketCommentSchema>
  >;
  readonly claimedAdminUser?: Maybe<UserSchema>;
};

export type MerchantGamingReviewTicketSort = {
  readonly field: MerchantGamingReviewFieldTicketType;
  readonly order: SortOrderType;
};

export type MerchantGamingReviewTicketSourceSchema = {
  readonly __typename?: "MerchantGamingReviewTicketSourceSchema";
  readonly triggerDate: Datetime;
  readonly sourceType: MerchantGamingReviewSourceType;
  readonly reason?: Maybe<Scalars["String"]>;
  readonly creator?: Maybe<UserSchema>;
};

export type MerchantGamingReviewUpdateInput = {
  readonly action: MerchantGamingReviewTicketAction;
  readonly id: Scalars["ObjectIdType"];
  readonly policyTier?: Maybe<MerchantGamingReviewPolicyTierType>;
  readonly message?: Maybe<Scalars["String"]>;
  readonly infractionIds?: Maybe<Scalars["String"]>;
};

export type MerchantInviteInfo = {
  readonly __typename?: "MerchantInviteInfo";
  readonly valid: Scalars["Boolean"];
  readonly email?: Maybe<Scalars["String"]>;
  readonly promotionRevShare?: Maybe<Scalars["Float"]>;
  readonly promotionPeriodInDays?: Maybe<Scalars["Int"]>;
  readonly useMarketingTransactionBonus?: Maybe<Scalars["Boolean"]>;
};

export type MerchantLeadNumberOfSkUs = {
  readonly start: Scalars["Int"];
  readonly end: Scalars["Int"];
};

export type MerchantLeadProductCategory =
  | "TOYS_AND_GAMES"
  | "HOUSEHOLD_SUPPLIES"
  | "ELECTRONICS_AND_TECHNOLOGY"
  | "ARTS_CRAFTS_AND_SEWING"
  | "BABY_AND_TODDLER"
  | "TOOLS_AND_DIY"
  | "MUSICAL_INSTRUMENTS_AND_DJ"
  | "OTHER"
  | "JEWELLERY_AND_WATCHES"
  | "HOME_GARDEN_AND_PETS"
  | "COLLECTABLES_AND_MEMORABILIA"
  | "MOVIES_VIDEO_GAMES_AND_MUSIC"
  | "REFURBISHED_ELECTRONICS"
  | "CLOTHING_SHOES_AND_ACCESSORIES"
  | "BOOKS"
  | "SPORTS_AND_OUTDOORS"
  | "HEALTH_AND_BEAUTY"
  | "CARS_AND_AUTOMOTIVE"
  | "FOOD_AND_DRINK";

export type MerchantLeadSellingYearsRange = {
  readonly start: Scalars["Int"];
  readonly end: Scalars["Int"];
};

export type MerchantLeadSubmissionInput = {
  readonly emailAddress: Scalars["String"];
  readonly firstName: Scalars["String"];
  readonly lastName: Scalars["String"];
  readonly phoneNumber?: Maybe<Scalars["String"]>;
  readonly websiteUrl: Scalars["String"];
  readonly country: CountryCode;
  readonly merchantType?: Maybe<MerchantType>;
  readonly brandRegistrationCountry?: Maybe<BrandRegistrationCountry>;
  readonly registeredBefore?: Maybe<Scalars["Boolean"]>;
  readonly utmSource?: Maybe<Scalars["String"]>;
  readonly companyLegalName: Scalars["String"];
  readonly channelPartners?: Maybe<Scalars["String"]>;
  readonly howLongSelling: MerchantLeadSellingYearsRange;
  readonly annualRevenue: MerchantLeadYearlyRevenue;
  readonly skuQuantity: MerchantLeadNumberOfSkUs;
  readonly productCategory: MerchantLeadProductCategory;
  readonly merchantPartnerName?: Maybe<Scalars["String"]>;
};

export type MerchantLeadSubmissionMutation = {
  readonly __typename?: "MerchantLeadSubmissionMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type MerchantLeadYearlyRevenue = {
  readonly start: CurrencyInput;
  readonly end: CurrencyInput;
};

export type MerchantMobile = {
  readonly __typename?: "MerchantMobile";
  readonly minimumAppVersion: Scalars["String"];
};

export type MerchantMobileMinimumAppVersionArgs = {
  platform: MobilePlatformType;
  currentVersion: Scalars["String"];
};

export type MerchantMutation = {
  readonly __typename?: "MerchantMutation";
  readonly shippingSetting: ShippingSettingMutations;
  readonly merchantTermsAgreed?: Maybe<MerchantTermsAgreedMutations>;
  readonly vacationSettings: VacationSettings;
  readonly changeDisplayName: ChangeDisplayNameMutation;
  readonly merchantSenderAddress: MerchantSenderAddressMutations;
  readonly changePreferredUnits: ChangePreferredUnitsMutation;
  readonly euVatTax?: Maybe<EuvatTaxMutations>;
  readonly taxSettings: TaxSettingsMutations;
  readonly warehouseSettings?: Maybe<MerchantWarehouseMutations>;
  readonly merchantTaxIdentification: MerchantTaxIdentificationMutations;
  readonly sellerIdentityVerification: SellerIdentityVerificationMutations;
  readonly sellerIdentityCnVerification: SellerIdentityCnVerificationMutations;
  readonly returnSettings: MerchantReturnSettingsMutations;
  readonly returnWarehouseSettings?: Maybe<MerchantReturnWarehouseMutations>;
};

export type MerchantMutationChangeDisplayNameArgs = {
  input: ChangeDisplayNameInput;
};

export type MerchantMutationChangePreferredUnitsArgs = {
  input: ChangePreferredUnitsInput;
};

export type MerchantOnboardingStep =
  | "ADD_PRODUCT"
  | "ENABLE_2FA"
  | "SETUP_SHIPPING"
  | "STORE_IDENTIFICATION"
  | "PAYMENT_INFO"
  | "BUSINESS_INFO"
  | "CONTACT_INFO"
  | "BLUE_DOWNLOAD_APP_DEPRECATED"
  | "BLUE_SET_STORE_HOURS_DEPRECATED"
  | "EXTRA_INFO"
  | "STORE_IDENTIFICATION_DEPRECATED"
  | "LEARN_ABOUT_WE"
  | "DEP_STORE_REGISTRATION_FEE"
  | "CONFIRM_TOS"
  | "BLUE_SET_PAYMENT_INFO_DEPRECATED"
  | "STORE_INFO"
  | "SETUP_ACCOUNT"
  | "CONFIRM_PHONE"
  | "BLUE_SET_STORE_PHOTO_DEPRECATED"
  | "RESELLER_AGREEMENT"
  | "CONFIRM_EMAIL"
  | "BLUE_LIST_FIRST_PRODUCT_DEPRECATED";

export type MerchantOneoffPaymentMutations = {
  readonly __typename?: "MerchantOneoffPaymentMutations";
  readonly createBulkOneoffAdminToolPayments?: Maybe<CreateBulkOneoffAdminToolPayments>;
};

export type MerchantOneoffPaymentMutationsCreateBulkOneoffAdminToolPaymentsArgs =
  {
    input: CreateBulkOneoffAdminToolPaymentsInput;
  };

export type MerchantOneoffPaymentSchema = {
  readonly __typename?: "MerchantOneoffPaymentSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly creationTime: Datetime;
  readonly merchantId: Scalars["ObjectIdType"];
  readonly amount: CurrencyValue;
  readonly localizedAmount?: Maybe<CurrencyValue>;
  readonly eligibleTime: Datetime;
  readonly paymentId?: Maybe<Scalars["ObjectIdType"]>;
  readonly type: OneoffPaymentType;
  readonly merchantPaymentTime?: Maybe<Datetime>;
  readonly status: OneoffPaymentStatus;
  readonly orderId?: Maybe<Scalars["ObjectIdType"]>;
  readonly disputeId?: Maybe<Scalars["ObjectIdType"]>;
  readonly ticketId?: Maybe<Scalars["String"]>;
};

export type MerchantOneoffPaymentSchemaAmountArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type MerchantPaymentCollectorType = "INDIVIDUAL" | "BUSINESS";

export type MerchantPaymentCycle = "WEEKLY" | "NORMAL";

export type MerchantPaymentDetail = {
  readonly __typename?: "MerchantPaymentDetail";
  readonly accountBalance?: Maybe<CurrencyValue>;
  readonly ledgerAccountBalances?: Maybe<ReadonlyArray<LedgerAccountBalance>>;
  readonly messages?: Maybe<ReadonlyArray<MerchantPaymentWarningMessage>>;
  readonly lineItems?: Maybe<ReadonlyArray<MerchantPaymentLineItem>>;
  readonly lineItemCount?: Maybe<Scalars["Int"]>;
  readonly lineItemTypes?: Maybe<ReadonlyArray<MerchantPaymentLineItemType>>;
  readonly lineItemSearchTypes?: Maybe<ReadonlyArray<LineItemSearchType>>;
  readonly ledgerItemInfo?: Maybe<LedgerItemInfo>;
  readonly payoutHistory?: Maybe<ReadonlyArray<MerchantPayoutHistory>>;
  readonly payoutHistoryCount?: Maybe<Scalars["Int"]>;
  readonly chargeTransaction?: Maybe<ChargeTransactionInfo>;
  readonly connectedChargeProviders?: Maybe<
    ReadonlyArray<ChargePaymentProviderType>
  >;
  readonly pendingChargeProviders?: Maybe<
    ReadonlyArray<ChargePaymentProviderType>
  >;
  readonly canEditPaymentInfo: Scalars["Boolean"];
  readonly currentProvider?: Maybe<PaymentProvider>;
  readonly allowedProviders: ReadonlyArray<PaymentProvider>;
  readonly nextPayoutTime?: Maybe<Datetime>;
  readonly hasPayoutInProgress: Scalars["Boolean"];
  readonly hasActiveLoan: Scalars["Boolean"];
  readonly hasPaymentInfoNotice: Scalars["Boolean"];
  readonly releasePayoutRequest?: Maybe<ReleasePayoutRequest>;
  readonly personalInfo?: Maybe<PaymentPersonalInfo>;
  readonly businessInfo?: Maybe<PaymentBusinessInfo>;
  readonly infoCollectedForPaymentProvider?: Maybe<InfoCollectedForPaymentProvider>;
  readonly paymentCycle: MerchantPaymentCycle;
  readonly fullyEnrolledInPaymentCycle: Scalars["Boolean"];
  readonly showLedgerUi: Scalars["Boolean"];
};

export type MerchantPaymentDetailAccountBalanceArgs = {
  currency: PaymentCurrencyCode;
  balanceType: AccountBalanceType;
};

export type MerchantPaymentDetailLineItemsArgs = {
  currency: PaymentCurrencyCode;
  balanceType: AccountBalanceType;
  offset: Scalars["Int"];
  limit: Scalars["Int"];
  startDate?: Maybe<DatetimeInput>;
  endDate?: Maybe<DatetimeInput>;
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<LineItemSearchType>;
  lineItemTypes?: Maybe<ReadonlyArray<LineItemType>>;
};

export type MerchantPaymentDetailLineItemCountArgs = {
  currency: PaymentCurrencyCode;
  balanceType: AccountBalanceType;
  startDate?: Maybe<DatetimeInput>;
  endDate?: Maybe<DatetimeInput>;
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<LineItemSearchType>;
  lineItemTypes?: Maybe<ReadonlyArray<LineItemType>>;
};

export type MerchantPaymentDetailLedgerItemInfoArgs = {
  currency: PaymentCurrencyCode;
  balanceType: LedgerAccountBalanceType;
  cutoffTime?: Maybe<DatetimeInput>;
  cutoffId?: Maybe<Scalars["String"]>;
  limit: Scalars["Int"];
  startDate?: Maybe<DatetimeInput>;
  endDate?: Maybe<DatetimeInput>;
  includeTotalCount?: Maybe<Scalars["Boolean"]>;
};

export type MerchantPaymentDetailPayoutHistoryArgs = {
  offset: Scalars["Int"];
  limit: Scalars["Int"];
  startDate?: Maybe<DatetimeInput>;
  endDate?: Maybe<DatetimeInput>;
  provider?: Maybe<PayoutPaymentProviderType>;
};

export type MerchantPaymentDetailPayoutHistoryCountArgs = {
  startDate?: Maybe<DatetimeInput>;
  endDate?: Maybe<DatetimeInput>;
  provider?: Maybe<PayoutPaymentProviderType>;
};

export type MerchantPaymentDetailChargeTransactionArgs = {
  id: Scalars["ObjectIdType"];
};

export type MerchantPaymentLineItem = {
  readonly __typename?: "MerchantPaymentLineItem";
  readonly createdTime: Datetime;
  readonly description: Scalars["String"];
  readonly creditAmount?: Maybe<CurrencyValue>;
  readonly debitAmount?: Maybe<CurrencyValue>;
  readonly type: LineItemType;
};

export type MerchantPaymentLineItemType =
  | "POLICY_VIOLATION_FINE"
  | "MISLEADING_VARIATION_FINE"
  | "B2B_SALE_FEE"
  | "WISH_PARCEL_SERVICE_ADJUST_PAYMENT"
  | "INITIAL_WISHPOST_SHIPPING_REFUND_OFFSET"
  | "REV_SHARE_ADJUST_PAYMENT"
  | "WISH_EXPRESS_REBATE_REVERSE"
  | "DISPUTE_APPROVED"
  | "WITHHELD_RELEASED"
  | "LOGISTIC_FEE"
  | "EARLY_PAYMENT"
  | "OVERPAY_PAYMENT_AMOUNT"
  | "QUALITY_REFUND_FINE"
  | "MERCHANT_HARASSMENT"
  | "WISHPOST_ADJUSTMENT_PAYMENT"
  | "WITHHOLD_FUND_FINE"
  | "EXTERNAL_BOOST_CPA_FEE"
  | "UNDERPAY_PAYMENT_AMOUNT"
  | "STRATEGIC_ORDER_REBATE"
  | "PAID_PLACEMENT_IMPRESSION_FEE"
  | "LCL_FBW_FEE"
  | "EARLY_PAYMENT_CANCELLATION"
  | "DECEPTIVE_FULFILLMENT_FINE"
  | "STORE_PAYMENT_CANCELLATION"
  | "ESTIMATED_WISHPOST_SHIPPING"
  | "PAYMENT"
  | "MARKETING_REBATE"
  | "UNFULFILLED_ORDER_FINE"
  | "PRODUCT_UNTAGGED_MISLEADING"
  | "FBW_PAYMENT"
  | "CHINA_POST_SUBSIDY_REVERSE"
  | "WISHPOST_LOGISTICS_FEE"
  | "CANCEL_WITHHOLD_PAYMENT"
  | "COUNTERFEIT_REFUND"
  | "COVID19_SUBSIDY_REVERSE"
  | "COLLECTIONS_BOOST_CAMPAIGN_FEE"
  | "RETURN_LABEL_FEE"
  | "ONEOFF_FINE"
  | "WISHPOST_ADJUSTMENT_DEDUCTION"
  | "FINE_REVERSED"
  | "TRANSACTION_FEE_REBATE_REVERSE"
  | "PRODUCT_REBATE"
  | "DOUBLE_DEDUCTION_BOOK_KEEPER"
  | "LATE_CONFIRMED_FULFILLMENT_FINE"
  | "WISHPOST_FULFILLMENT_FEE"
  | "FAKE_TRACKING_FINE"
  | "WITHHOLD_RELEASE"
  | "REFUNDED"
  | "PRODUCT_LISTING_FEE"
  | "CONSOLIDATE_MP_PAYMENT"
  | "OTHER_DEDUCTION"
  | "REGISTRATION_REFUND"
  | "EARLY_PAYMENT_REIMBURSEMENT_FEE"
  | "ONEOFF"
  | "TRANSACTION_FEE_REBATE"
  | "EXTERNAL_BOOST_FEE"
  | "MARKETING_REBATE_REVERSE"
  | "MERCHANT_INCENTIVE"
  | "PROMOTED_PRODUCT_DISABLE_FINE"
  | "INFRACTION_FINE"
  | "MERCHANT_INCENTIVE_REVERSE"
  | "RETROACTIVE_REFUND_FOR_LOW_RATED_PRODUCT"
  | "PRODUCT_BOOST_BALANCE_REFUND"
  | "NEW_REFUNDED"
  | "SE_CASH_BACK"
  | "LEGAL_SETTLEMENT_FINE"
  | "FBW_FEE"
  | "MERCHANT_CANCELLATION_FINE"
  | "EARLY_PAYMENT_DEDUCTION"
  | "PROMOTION_FEE"
  | "LEGAL_SETTLEMENT_RESERVED_PENALTY"
  | "COVID19_SUBSIDY"
  | "STORE_PAYMENT_DEDUCTION"
  | "SE_CASH_BACK_REVERSE"
  | "RETROACTIVE_REFUND_FOR_PROBLEM_PRODUCT"
  | "FAKE_RATING_FINE"
  | "ESTIMATED_WISHPOST_SHIPPING_REFUND"
  | "INITIAL_WISHPOST_SHIPPING_REFUND"
  | "CN_ORDER_NOT_SHIP_WITH_WISHPOST_FINE"
  | "INITIAL_WISHPOST_SHIPPING"
  | "CHINA_POST_SUBSIDY"
  | "STORE_PAYMENT"
  | "WISH_EXPRESS_REBATE"
  | "ONEOFF_ADMIN_TOOL"
  | "SHIPPED"
  | "WITHHOLD_PAYMENT"
  | "INITIAL_WISHPOST_SHIPPING_OFFSET"
  | "LEGAL_SETTLEMENT_PAID_PENALTY"
  | "WISH_PARCEL_SERVICE_ADJUST_FEE"
  | "CONSOLIDATE_MP_FINE"
  | "UNCONFIRMED_CARRIER_FINE"
  | "WISH_PARCEL_SERVICE_FEE"
  | "PAID_PLACEMENT_ENROLLMENT_FEE"
  | "STRATEGIC_ORDER_REBATE_REVERSE";

export type MerchantPaymentLinkInfo = {
  readonly __typename?: "MerchantPaymentLinkInfo";
  readonly text?: Maybe<Scalars["String"]>;
  readonly url?: Maybe<Scalars["String"]>;
};

export type MerchantPaymentsMutation = {
  readonly __typename?: "MerchantPaymentsMutation";
  readonly updatePaypalSetting?: Maybe<UpdatePayPalSettingMutation>;
  readonly updatePayoneerSetting?: Maybe<UpdatePayoneerSettingMutation>;
  readonly payoneerSignup?: Maybe<PayoneerSignupMutation>;
  readonly payableValidation?: Maybe<PayableValidationMutation>;
  readonly payableCleanup?: Maybe<PayableCleanupMutation>;
  readonly resetPayment?: Maybe<ResetReleasePaymentRequestMutation>;
  readonly createChargeTransaction?: Maybe<CreateChargeTransactionMutation>;
  readonly cancelChargeTransaction?: Maybe<CancelChargeTransactionMutation>;
  readonly charge?: Maybe<ChargeMutation>;
};

export type MerchantPaymentsMutationUpdatePaypalSettingArgs = {
  input: UpdatePayPalSettingInput;
};

export type MerchantPaymentsMutationUpdatePayoneerSettingArgs = {
  input: UpdatePayoneerSettingInput;
};

export type MerchantPaymentsMutationPayableValidationArgs = {
  input: PayableValidationInput;
};

export type MerchantPaymentsMutationPayableCleanupArgs = {
  input: PayableCleanupInput;
};

export type MerchantPaymentsMutationResetPaymentArgs = {
  input: ResetReleasePaymentRequestInput;
};

export type MerchantPaymentsMutationCreateChargeTransactionArgs = {
  input: CreateChargeTransactionInput;
};

export type MerchantPaymentsMutationCancelChargeTransactionArgs = {
  input: CancelChargeTransactionInput;
};

export type MerchantPaymentsMutationChargeArgs = {
  input: ChargeInput;
};

export type MerchantPaymentsService = {
  readonly __typename?: "MerchantPaymentsService";
  readonly paymentInfo?: Maybe<MerchantPaymentDetail>;
  readonly currentMerchant?: Maybe<MerchantPaymentDetail>;
  readonly ledgerOrderInfo?: Maybe<LedgerOrderInfo>;
  readonly ledgerPayableInfo?: Maybe<LedgerPayableInfo>;
  readonly disbursementScheduleInfo?: Maybe<DisbursementScheduleInfo>;
};

export type MerchantPaymentsServicePaymentInfoArgs = {
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
};

export type MerchantPaymentsServiceLedgerOrderInfoArgs = {
  orderId: Scalars["String"];
};

export type MerchantPaymentsServiceLedgerPayableInfoArgs = {
  payableId: Scalars["String"];
  payableType: Scalars["String"];
};

export type MerchantPaymentsServiceDisbursementScheduleInfoArgs = {
  year: Scalars["Int"];
  paymentCycle: Scalars["Int"];
};

export type MerchantPaymentStatus =
  | "PAID_BT"
  | "REFUNDED"
  | "DEDUCTED_WITHOUT_REFUND"
  | "PAID"
  | "UNPAID";

export type MerchantPaymentWarningMessage = {
  readonly __typename?: "MerchantPaymentWarningMessage";
  readonly title?: Maybe<Scalars["String"]>;
  readonly text?: Maybe<Scalars["String"]>;
  readonly sentiment?: Maybe<SentimentType>;
  readonly link?: Maybe<MerchantPaymentLinkInfo>;
};

export type MerchantPayoutHistory = {
  readonly __typename?: "MerchantPayoutHistory";
  readonly id: Scalars["String"];
  readonly payoutDate: Datetime;
  readonly payoutProvider: PaymentProvider;
  readonly merchantFacingState: MerchantFacingPayoutState;
  readonly currency: PaymentCurrencyCode;
  readonly totalAmount: CurrencyValue;
  readonly description?: Maybe<MerchantPayoutHistoryDescription>;
  readonly rebateAmount?: Maybe<CurrencyValue>;
};

export type MerchantPayoutHistoryDescription = {
  readonly __typename?: "MerchantPayoutHistoryDescription";
  readonly title?: Maybe<Scalars["String"]>;
  readonly text?: Maybe<Scalars["String"]>;
};

export type MerchantPolicyAgreementSource =
  | "CN_SIGNUP_VALIDATION_FLOW"
  | "SELLER_PROFILE_VALIDATION_FLOW"
  | "EEA_KYC_VALIDATION_FLOW";

export type MerchantPolicyTierFactorSettings = {
  readonly __typename?: "MerchantPolicyTierFactorSettings";
  readonly factor: PolicyFactor;
  readonly exemptions: ReadonlyArray<Maybe<MerchantPriviledge>>;
};

export type MerchantPolicyTierSchema = {
  readonly __typename?: "MerchantPolicyTierSchema";
  readonly tier: MerchantTier;
  readonly policyFactorSettings: ReadonlyArray<
    Maybe<MerchantPolicyTierFactorSettings>
  >;
};

export type MerchantPreorder = {
  readonly __typename?: "MerchantPreorder";
  readonly isPreorderMerchant: Scalars["Boolean"];
  readonly productsAreSyncing: Scalars["Boolean"];
};

export type MerchantPriviledge =
  | "WAIVE_BAN_MERCHANT"
  | "WAIVE_ISSUE_FINE"
  | "WAIVE_PRODUCT_TAKEDOWN"
  | "WAIVE_PAYMENT_WITHHOLD"
  | "WAIVE_CREATE_WARNING"
  | "WAIVE_IMPRESSION_SUSPENSION";

export type MerchantProofDocSchema = {
  readonly __typename?: "MerchantProofDocSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly docName: Scalars["String"];
  readonly docType: Scalars["String"];
  readonly idNumber?: Maybe<Scalars["String"]>;
  readonly fileDataList?: Maybe<ReadonlyArray<FileDataSchema>>;
  readonly layoutTag?: Maybe<Scalars["String"]>;
  readonly expDate?: Maybe<Datetime>;
  readonly wishValidationCode?: Maybe<Scalars["String"]>;
};

export type MerchantProvidedAttributeSchema = {
  readonly __typename?: "MerchantProvidedAttributeSchema";
  readonly name: Scalars["String"];
  readonly value: ReadonlyArray<Scalars["String"]>;
};

export type MerchantReturnSettingPolicyTypeOptionSchema = {
  readonly __typename?: "MerchantReturnSettingPolicyTypeOptionSchema";
  readonly policyType: PolicyType;
  readonly policyTypeText: Scalars["String"];
};

export type MerchantReturnSettingsMutations = {
  readonly __typename?: "MerchantReturnSettingsMutations";
  readonly upsertMerchantReturnSettings: UpsertMerchantReturnSettingsMutation;
};

export type MerchantReturnSettingsMutationsUpsertMerchantReturnSettingsArgs = {
  input: UpsertMerchantReturnSettingsMutationInput;
};

export type MerchantReturnSettingsSchema = {
  readonly __typename?: "MerchantReturnSettingsSchema";
  readonly country: Country;
  readonly isActive: Scalars["Boolean"];
  readonly policyType: PolicyType;
  readonly policyTypeText: Scalars["String"];
  readonly authType?: Maybe<AuthType>;
  readonly useWishReturnWarehouse: Scalars["Boolean"];
  readonly returnWarehouses?: Maybe<MerchantReturnWarehouseSchema>;
};

export type MerchantReturnWarehouseMutations = {
  readonly __typename?: "MerchantReturnWarehouseMutations";
  readonly upsertWarehouse?: Maybe<UpsertMerchantReturnWarehouseMutation>;
};

export type MerchantReturnWarehouseMutationsUpsertWarehouseArgs = {
  input: UpsertReturnWarehouseInput;
};

export type MerchantReturnWarehouseSchema = {
  readonly __typename?: "MerchantReturnWarehouseSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
  readonly address?: Maybe<AddressSchema>;
};

export type MerchantSafetyMutations = {
  readonly __typename?: "MerchantSafetyMutations";
  readonly reportOrder?: Maybe<ReportOrderMutation>;
};

export type MerchantSafetyMutationsReportOrderArgs = {
  input: ReportOrderInput;
};

export type MerchantSafetySchema = {
  readonly __typename?: "MerchantSafetySchema";
  readonly reportOrderReasons: ReadonlyArray<OrderReportReasonSchema>;
};

export type MerchantSchema = {
  readonly __typename?: "MerchantSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly accountManager?: Maybe<UserSchema>;
  readonly originCountry?: Maybe<Country>;
  readonly suspectedCountry?: Maybe<Country>;
  readonly restrictedProductDefaultCountry?: Maybe<Country>;
  readonly canAccessRestrictedProduct: Scalars["Boolean"];
  readonly canAccessFinalSale: Scalars["Boolean"];
  readonly canAccessHome: Scalars["Boolean"];
  readonly restrictedProductRegions?: Maybe<
    ReadonlyArray<RestrictedProductRegion>
  >;
  readonly merchantPolicyTier?: Maybe<MerchantPolicyTierSchema>;
  readonly displayName: Scalars["String"];
  readonly onVacationMode: Scalars["Boolean"];
  readonly vacationSettings?: Maybe<VacationSettingsSchema>;
  readonly signupTime: Datetime;
  readonly revShare: Scalars["Float"];
  readonly canManageShipping: Scalars["Boolean"];
  readonly shippingSettings?: Maybe<ReadonlyArray<ShippingSettingsSchema>>;
  readonly merchantTermsAgreed?: Maybe<MerchantTermsAgreedSchema>;
  readonly useShopifyShippingRate: Scalars["Boolean"];
  readonly standardWarehouseId: Scalars["ObjectIdType"];
  readonly primaryCurrency: PaymentCurrencyCode;
  readonly usdConversionRate: Scalars["Float"];
  readonly hasSetupPaymentInfo: Scalars["Boolean"];
  readonly storeStats: MerchantStats;
  readonly wishSellerStandard: MerchantWishSellerStandardDetails;
  readonly shopify?: Maybe<ShopifySchema>;
  readonly state: CommerceMerchantState;
  readonly canUseVacationMode: Scalars["Boolean"];
  readonly inEuComplianceScope: Scalars["Boolean"];
  readonly hasEuComplianceImpressionBlock: Scalars["Boolean"];
  readonly countryOfDomicile?: Maybe<Country>;
  readonly businessName?: Maybe<Scalars["String"]>;
  readonly businessAddress?: Maybe<AddressSchema>;
  readonly countryDetails?: Maybe<MerchantCountryDetailsSchema>;
  readonly daysToFulfill: Scalars["Int"];
  readonly preorder: MerchantPreorder;
  readonly branding: BrandingSchema;
  readonly marketing: MarketingMerchantPropertySchema;
  readonly shippingOrigins: ReadonlyArray<ShippingOriginSettings>;
  readonly tax?: Maybe<MerchantTaxSchema>;
  readonly isStoreMerchant: Scalars["Boolean"];
  readonly isPayable: Scalars["Boolean"];
  readonly isCnMerchant: Scalars["Boolean"];
  readonly isCnForFulfillment: Scalars["Boolean"];
  readonly maxDeliveryDays: Scalars["Int"];
  readonly isUnityEnabled: Scalars["Boolean"];
  readonly isMerchantInCalculatedShippingBeta: Scalars["Boolean"];
  readonly canAccessAdditionalItemShipping: Scalars["Boolean"];
  readonly signupSource?: Maybe<SignupSource>;
  readonly proofOfIdentity?: Maybe<ReadonlyArray<MerchantFileSchema>>;
  readonly sellerVerification: SellerVerificationSchema;
  readonly senderAddresses: ReadonlyArray<MerchantSenderAddressSchema>;
  readonly warehouses?: Maybe<ReadonlyArray<MerchantWarehouseSchema>>;
  readonly returnWarehouses?: Maybe<
    ReadonlyArray<MerchantReturnWarehouseSchema>
  >;
  readonly fulfilledByWish: MerchantFbwSchema;
  readonly wps?: Maybe<MerchantWpsSchema>;
  readonly preferredWeightUnit?: Maybe<WeightUnit>;
  readonly preferredLengthUnit?: Maybe<LengthUnit>;
  readonly isWhiteGlove: Scalars["Boolean"];
  readonly canAccessEarlyPayment: Scalars["Boolean"];
  readonly hasReducedRevShare: Scalars["Boolean"];
  readonly lead: UserSchema;
  readonly users: ReadonlyArray<UserSchema>;
  readonly exp: ExpSchema;
  readonly euVatTax?: Maybe<EuvatTaxSchema>;
  readonly isBba?: Maybe<Scalars["Boolean"]>;
  readonly bypassProductRestrictions?: Maybe<
    ReadonlyArray<TaggingViolationSubcategory>
  >;
  readonly productListingPlan?: Maybe<ProductListingPlanHub>;
  readonly isWishBlueSelfInventory: Scalars["Boolean"];
  readonly isFactory: Scalars["Boolean"];
  readonly taxIdentification?: Maybe<MerchantTaxIdentificationSchema>;
  readonly email: Scalars["String"];
  readonly isIdentifiedUsTax?: Maybe<Scalars["Boolean"]>;
  readonly eligibleForExpeditedPaymentPolicy?: Maybe<Scalars["Boolean"]>;
  readonly eatCostWarningId?: Maybe<Scalars["ObjectIdType"]>;
  readonly displayPictureUrl?: Maybe<Scalars["String"]>;
  readonly showMfp: Scalars["Boolean"];
  readonly allowMfpEligibleProducts: Scalars["Boolean"];
  readonly hasMfpWhitelistProducts: Scalars["Boolean"];
  readonly allowMfp: Scalars["Boolean"];
  readonly returnSettings?: Maybe<ReadonlyArray<MerchantReturnSettingsSchema>>;
  readonly returnSettingPolicyTypeOptions?: Maybe<
    ReadonlyArray<MerchantReturnSettingPolicyTypeOptionSchema>
  >;
  readonly canAccessPaidPlacement: Scalars["Boolean"];
  readonly showFeedProcessing: Scalars["Boolean"];
  readonly disableWarningId?: Maybe<Scalars["ObjectIdType"]>;
  readonly disableReasonCategory?: Maybe<Scalars["String"]>;
  readonly isFlatRateShippingOptedIn?: Maybe<Scalars["Boolean"]>;
  readonly canAccessFlatRateShippingOptInOptOut?: Maybe<Scalars["Boolean"]>;
};

export type MerchantSchemaShippingSettingsArgs = {
  enabled?: Maybe<Scalars["Boolean"]>;
};

export type MerchantSchemaWarehousesArgs = {
  id?: Maybe<Scalars["String"]>;
};

export type MerchantSchemaReturnWarehousesArgs = {
  id?: Maybe<Scalars["String"]>;
};

export type MerchantSchemaUsersArgs = {
  includeLead?: Maybe<Scalars["Boolean"]>;
};

export type MerchantSchemaReturnSettingsArgs = {
  isActive?: Maybe<Scalars["Boolean"]>;
};

export type MerchantSenderAddressMutations = {
  readonly __typename?: "MerchantSenderAddressMutations";
  readonly upsertMerchantSenderAddress: UpsertMerchantSenderAddressMutation;
  readonly deleteMerchantSenderAddress: DeleteMerchantSenderAddressMutation;
};

export type MerchantSenderAddressMutationsUpsertMerchantSenderAddressArgs = {
  input: UpsertMerchantSenderAddressInput;
};

export type MerchantSenderAddressMutationsDeleteMerchantSenderAddressArgs = {
  input: DeleteMerchantSenderAddressInput;
};

export type MerchantSenderAddressSchema = {
  readonly __typename?: "MerchantSenderAddressSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly warehouseName: Scalars["String"];
  readonly address: AddressSchema;
  readonly isDefault: Scalars["Boolean"];
};

export type MerchantServiceSchema = {
  readonly __typename?: "MerchantServiceSchema";
  readonly merchant?: Maybe<MerchantSchema>;
  readonly mainUser?: Maybe<UserSchema>;
  readonly vipoutlet?: Maybe<MerchantSchema>;
  readonly merchants?: Maybe<ReadonlyArray<MerchantSchema>>;
};

export type MerchantServiceSchemaMerchantArgs = {
  id?: Maybe<Scalars["ObjectIdType"]>;
  userId?: Maybe<Scalars["ObjectIdType"]>;
};

export type MerchantServiceSchemaMainUserArgs = {
  merchantId: Scalars["ObjectIdType"];
};

export type MerchantServiceSchemaMerchantsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<MerchantSort>;
  states?: Maybe<ReadonlyArray<CommerceMerchantState>>;
  name?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["ObjectIdType"]>;
  bdRep?: Maybe<Scalars["ObjectIdType"]>;
  query?: Maybe<Scalars["String"]>;
};

export type MerchantSignupInput = {
  readonly emailAddress: Scalars["String"];
  readonly storeName: Scalars["String"];
  readonly password: Scalars["String"];
  readonly source?: Maybe<MerchantSignupSourceType>;
  readonly bdSignupCode?: Maybe<Scalars["String"]>;
  readonly salesforceLeadId?: Maybe<Scalars["String"]>;
  readonly salesforceCmCat?: Maybe<Scalars["String"]>;
  readonly googleClickId?: Maybe<Scalars["String"]>;
  readonly googleAdsGroupId?: Maybe<Scalars["String"]>;
  readonly landingSource?: Maybe<Scalars["String"]>;
  readonly landingSourceSubpage?: Maybe<Scalars["String"]>;
  readonly invite?: Maybe<Scalars["String"]>;
  readonly referralId?: Maybe<Scalars["String"]>;
  readonly utmSource?: Maybe<Scalars["String"]>;
  readonly utmCampaign?: Maybe<Scalars["String"]>;
  readonly utmTerm?: Maybe<Scalars["String"]>;
  readonly utmContent?: Maybe<Scalars["String"]>;
  readonly deviceId?: Maybe<Scalars["String"]>;
  readonly deviceName?: Maybe<Scalars["String"]>;
  readonly paypalMerchantId?: Maybe<Scalars["String"]>;
  readonly greenChannelCode?: Maybe<Scalars["String"]>;
  readonly merchantInvitationCode?: Maybe<Scalars["String"]>;
  readonly captchaToken?: Maybe<Scalars["String"]>;
  readonly captchaCode?: Maybe<Scalars["String"]>;
  readonly existingStoreUrl?: Maybe<Scalars["String"]>;
};

export type MerchantSignupMutation = {
  readonly __typename?: "MerchantSignupMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly shouldRedirectCnMerchant?: Maybe<Scalars["Boolean"]>;
  readonly userId?: Maybe<Scalars["ObjectIdType"]>;
  readonly session?: Maybe<Scalars["String"]>;
};

export type MerchantSignupSendPhoneVerificationInput = {
  readonly newPhoneNumber: Scalars["String"];
};

export type MerchantSignupSendPhoneVerificationMutation = {
  readonly __typename?: "MerchantSignupSendPhoneVerificationMutation";
  readonly message?: Maybe<Scalars["String"]>;
  readonly ok: Scalars["Boolean"];
};

export type MerchantSignupSourceType =
  | "SIGNUP_GREEN_CHANNEL"
  | "SIGNUP_V4"
  | "SIGNUP_V5"
  | "SIGNUP_LEGACY"
  | "SIGNUP_V3"
  | "SIGNUP_MOBILE"
  | "SIGNUP_MERCHANT_PLUS"
  | "SIGNUP_EXPRESS";

export type MerchantSort = {
  readonly field: MerchantSortFieldType;
  readonly order: SortOrderType;
};

export type MerchantSortFieldType = "MERCHANT_ID" | "NAME";

export type MerchantStats = {
  readonly __typename?: "MerchantStats";
  readonly totalSold: Scalars["Int"];
  readonly totalImpressions: Scalars["Int"];
  readonly totalWishes: Scalars["Int"];
  readonly totalGmv: CurrencyValue;
  readonly lastThirtyDayGmv: CurrencyValue;
  readonly updateTime?: Maybe<Datetime>;
  readonly marketing: MarketingStats;
  readonly totals: MerchantTotalStats;
  readonly daily: ReadonlyArray<MerchantTotalStats>;
  readonly weekly: ReadonlyArray<MerchantWeeklyStats>;
  readonly storeRatings: ReadonlyArray<StoreRating>;
  readonly storeRatingsCount: Scalars["Int"];
  readonly productRatings: ReadonlyArray<ProductRating>;
  readonly productRatingsCount: Scalars["Int"];
  readonly tracking?: Maybe<TrackingPerformanceStats>;
  readonly delivery?: Maybe<DeliveryPerformanceStats>;
  readonly refunds?: Maybe<RefundPerformanceStats>;
  readonly rating?: Maybe<RatingPerformanceStats>;
  readonly cs?: Maybe<CsPerformanceStats>;
  readonly topMerchantPerformer?: Maybe<SalesPerformanceStats>;
  readonly topProductPerformer?: Maybe<SalesPerformanceStats>;
};

export type MerchantStatsTotalsArgs = {
  days?: Maybe<Scalars["Int"]>;
  coreMetricsOnly?: Maybe<Scalars["Boolean"]>;
};

export type MerchantStatsDailyArgs = {
  days?: Maybe<Scalars["Int"]>;
  offsetDays?: Maybe<Scalars["Int"]>;
  coreMetricsOnly?: Maybe<Scalars["Boolean"]>;
};

export type MerchantStatsWeeklyArgs = {
  weeks?: Maybe<Scalars["Int"]>;
};

export type MerchantStatsStoreRatingsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  filterByStars?: Maybe<Scalars["Int"]>;
};

export type MerchantStatsStoreRatingsCountArgs = {
  filterByStars?: Maybe<Scalars["Int"]>;
};

export type MerchantStatsProductRatingsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  listingTab?: Maybe<ProductRatingListingTab>;
};

export type MerchantSupportConfigSchema = {
  readonly __typename?: "MerchantSupportConfigSchema";
  readonly isEnBd: Scalars["Boolean"];
  readonly isNonEnBd: Scalars["Boolean"];
};

export type MerchantTaxIdentificationBusinessType =
  | "S_CORP"
  | "TRUST_OR_ESTATE"
  | "PARTNERSHIP"
  | "C_CORP"
  | "LCC";

export type MerchantTaxIdentificationFormType = "W_8BEN_E" | "W_9" | "W_8BEN";

export type MerchantTaxIdentificationMutations = {
  readonly __typename?: "MerchantTaxIdentificationMutations";
  readonly upsertMerchantTaxIdentification: UpsertMerchantTaxIdentificationMutation;
};

export type MerchantTaxIdentificationMutationsUpsertMerchantTaxIdentificationArgs =
  {
    input: UpsertMerchantTaxIdentificationInput;
  };

export type MerchantTaxIdentificationPaymentReceiverEntity = "US" | "NON_US";

export type MerchantTaxIdentificationRejectReson = "WRONG_DOC" | "INVALID_TIN";

export type MerchantTaxIdentificationReviewAction = "APPROVE" | "REJECT";

export type MerchantTaxIdentificationSchema = {
  readonly __typename?: "MerchantTaxIdentificationSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly firstName?: Maybe<Scalars["String"]>;
  readonly lastName?: Maybe<Scalars["String"]>;
  readonly address: AddressSchema;
  readonly businessType?: Maybe<MerchantTaxIdentificationBusinessType>;
  readonly businessName?: Maybe<Scalars["String"]>;
  readonly employeeIdNumber?: Maybe<Scalars["String"]>;
  readonly foreignTaxId?: Maybe<Scalars["String"]>;
  readonly domicileExplanation?: Maybe<Scalars["String"]>;
  readonly formType: MerchantTaxIdentificationFormType;
  readonly paymentReceiverIdentity: MerchantTaxIdentificationPaymentReceiverEntity;
  readonly selfIdentityClassification: MerchantTaxIdentificationSelfIdentityClassification;
  readonly status: MerchantTaxIdentificationStatus;
  readonly lastUpdated: Datetime;
  readonly signDate: Datetime;
  readonly actionDate?: Maybe<Datetime>;
  readonly rejectedReason?: Maybe<MerchantTaxIdentificationRejectReson>;
  readonly actionUsername?: Maybe<Scalars["String"]>;
};

export type MerchantTaxIdentificationSearchType = "MERCHANT_ID";

export type MerchantTaxIdentificationSelfIdentityClassification =
  | "INDIVIDUAL"
  | "BUSINESS";

export type MerchantTaxIdentificationSortFieldType = "SUBMITTED_DATE";

export type MerchantTaxIdentificationStatus =
  | "REJECTED"
  | "NOT_SUBMIT"
  | "APPROVED"
  | "PENDING";

export type MerchantTaxSchema = {
  readonly __typename?: "MerchantTaxSchema";
  readonly settings?: Maybe<ReadonlyArray<TaxSetting>>;
  readonly hasConfiguredTaxesBefore: Scalars["Boolean"];
  readonly enrollableCountries: ReadonlyArray<Country>;
};

export type MerchantTermsActionEnum = "DISAGREE" | "AGREE" | "VIEW";

export type MerchantTermsAgreedMutations = {
  readonly __typename?: "MerchantTermsAgreedMutations";
  readonly acceptTermsOfService: AcceptTermsOfService;
  readonly acceptEuComplianceTermsOfService: AcceptEuComplianceTermsOfService;
  readonly acceptFrComplianceTermsOfService: AcceptFrComplianceTermsOfService;
  readonly acceptDeComplianceTermsOfService: AcceptDeComplianceTermsOfService;
  readonly viewTermsOfService: ViewTermsOfService;
  readonly viewTermsOfServiceById: ViewTermsOfServiceById;
  readonly actOnWpsTermsOfService: MerchantWpsTermsOfServiceMutation;
  readonly acceptMerchantPolicy: AcceptMerchantPolicy;
};

export type MerchantTermsAgreedMutationsAcceptTermsOfServiceArgs = {
  input: AcceptTermsOfServiceInput;
};

export type MerchantTermsAgreedMutationsViewTermsOfServiceByIdArgs = {
  input: ViewTermsOfServiceByIdInput;
};

export type MerchantTermsAgreedMutationsActOnWpsTermsOfServiceArgs = {
  input: MerchantWpsTermsOfServiceInput;
};

export type MerchantTermsAgreedMutationsAcceptMerchantPolicyArgs = {
  input: AcceptMerchantPolicyInput;
};

export type MerchantTermsAgreedSchema = {
  readonly __typename?: "MerchantTermsAgreedSchema";
  readonly agreedToTermsOfService: Scalars["Boolean"];
  readonly agreedToRealNameAuth?: Maybe<Scalars["Boolean"]>;
  readonly agreedToEuComplianceTos?: Maybe<Scalars["Boolean"]>;
  readonly agreedToFrComplianceTos?: Maybe<Scalars["Boolean"]>;
  readonly agreedToDeComplianceTos?: Maybe<Scalars["Boolean"]>;
  readonly wpsTermsOfService?: Maybe<MerchantWpsTermsOfServiceSchema>;
};

export type MerchantTermsOfServiceAgreementSchema = {
  readonly __typename?: "MerchantTermsOfServiceAgreementSchema";
  readonly state?: Maybe<MerchantTosAgreementStateType>;
};

export type MerchantTermsOfServiceSchema = {
  readonly __typename?: "MerchantTermsOfServiceSchema";
  readonly latestVersion: Scalars["Int"];
};

export type MerchantTier =
  | "WISH_STORE_TRUST"
  | "SUSPICIOUS"
  | "NON_CN_ERP_REFERRED"
  | "CN_BRAND_OWNER"
  | "US_SHOPIFY_REFERRED"
  | "LATAM_BD_BRAND_OWNER"
  | "CN_DEFAULT"
  | "EU_DEFAULT"
  | "LATAM_BD_REFERRED"
  | "CN_BD_REFERRED"
  | "NON_CN_DEFAULT"
  | "US_CONTROL"
  | "EU_BD_REFERRED"
  | "PHANTOM"
  | "PROMOTED_WHITELIST_FINE_EXEMPTION"
  | "US_DELIVERR_REFERRED"
  | "US_BD_REFERRED"
  | "NON_CN_BRAND_OWNER"
  | "US_PAYPAL_REFERRED"
  | "CPG"
  | "CN_ERP_REFERRED"
  | "US_BRAND_OWNER"
  | "NOT_ENROLL"
  | "SELF_INVENTORY"
  | "US_DEFAULT"
  | "NON_CN_BD_REFERRED"
  | "EU_BRAND_OWNER"
  | "PROBATION";

export type MerchantTodoItemSentiment =
  | "INFO"
  | "POSITIVE"
  | "WARNING"
  | "NEGATIVE";

export type MerchantTodoItemType =
  | "SETUP_TAX_INFO"
  | "REJECTED_VIDEOS"
  | "REVIEW_CURRENCY"
  | "EU_PRODUCT_COMPLIANCE"
  | "ENABLE_2FA"
  | "VALIDATE_TAX_IDENTITY"
  | "RESELLER_AGREEMENT"
  | "PRICE_DROP_NEW_OFFERS"
  | "REAUTHENTICATION_ATO"
  | "ADD_PAYMENT"
  | "COMPLETE_EU_VAT_TAX_QUESTIONNAIRE"
  | "ADD_WAREHOUSE"
  | "BIND_WECHAT"
  | "WE_REAPPLICATION_ELIGIBLE"
  | "PRICE_DROP_VIEW_ONGOING_CAMPAIGNS"
  | "TAX_VERIFICATION_FAILED"
  | "UPLOAD_NEW_PRODUCTS"
  | "ENROLL_PRODUCTS_IN_RETURNS"
  | "UK_VAT_OBLIGATION_NOTICE"
  | "PRE_ORDER_UNFULFILLED_ORDER"
  | "GERMANY_PRODUCT_COMPLIANCE"
  | "GBP_CURRENCY_CODE_MIGRATION"
  | "APPLY_RESTRICTED_PRODUCT_REQUEST"
  | "REAUTHENTICATION_REGINFO"
  | "EUR_CURRENCY_CODE_MIGRATION"
  | "JOIN_WISH_EXPRESS"
  | "BRL_CURRENCY_CODE_MIGRATION"
  | "CURRENCY_CODE_MIGRATION"
  | "REAUTHENTICATION_SELLER_PROFILE"
  | "NON_CN_UPLOAD_NEW_PRODUCTS"
  | "REAUTHENTICATION_KYC_PROFILE"
  | "FRANCE_PRODUCT_COMPLIANCE"
  | "VERIFY_PRODUCT_BRANDS"
  | "PRICE_DROP_UNCOMPETITIVE_CAMPAIGN"
  | "ACCEPT_TERMS_OF_SERVICE";

export type MerchantToFactoryConversionMutation = {
  readonly __typename?: "MerchantToFactoryConversionMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly ok: Scalars["Boolean"];
};

export type MerchantTosAgreementStateType =
  | "DISAGREED"
  | "AGREED"
  | "IMPLICIT_AGREED";

export type MerchantTotalStats = {
  readonly __typename?: "MerchantTotalStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly gmv: CurrencyValue;
  readonly impressions: Scalars["BigInt"];
  readonly pageViews: Scalars["BigInt"];
  readonly addToCarts: Scalars["Int"];
  readonly orders: Scalars["Int"];
  readonly averageFulfillmentTime?: Maybe<Timedelta>;
  readonly refundRate30d?: Maybe<Scalars["Float"]>;
  readonly averageShippingTime?: Maybe<Timedelta>;
  readonly averageShippingDelay?: Maybe<Timedelta>;
  readonly averageRating30d?: Maybe<Scalars["Float"]>;
};

export type MerchantType = "Brand" | "Factory" | "Trading_Company" | "Others";

export type MerchantUserGateAllowAll = {
  readonly __typename?: "MerchantUserGateAllowAll";
  readonly ok?: Maybe<Scalars["Boolean"]>;
};

export type MerchantUserGateAllowAllInput = {
  readonly name: Scalars["String"];
};

export type MerchantUserGateAllowMerchants = {
  readonly __typename?: "MerchantUserGateAllowMerchants";
  readonly ok?: Maybe<Scalars["Boolean"]>;
};

export type MerchantUserGateAllowMerchantsInput = {
  readonly name: Scalars["String"];
  readonly merchantIds: ReadonlyArray<Scalars["ObjectIdType"]>;
};

export type MerchantUserGateAllowUsers = {
  readonly __typename?: "MerchantUserGateAllowUsers";
  readonly ok?: Maybe<Scalars["Boolean"]>;
};

export type MerchantUserGateAllowUsersInput = {
  readonly name: Scalars["String"];
  readonly userIds: ReadonlyArray<Scalars["ObjectIdType"]>;
};

export type MerchantUserGateMutations = {
  readonly __typename?: "MerchantUserGateMutations";
  readonly allowUsers?: Maybe<MerchantUserGateAllowUsers>;
  readonly allowMerchants?: Maybe<MerchantUserGateAllowMerchants>;
  readonly allowAll?: Maybe<MerchantUserGateAllowAll>;
};

export type MerchantUserGateMutationsAllowUsersArgs = {
  input: MerchantUserGateAllowUsersInput;
};

export type MerchantUserGateMutationsAllowMerchantsArgs = {
  input: MerchantUserGateAllowMerchantsInput;
};

export type MerchantUserGateMutationsAllowAllArgs = {
  input: MerchantUserGateAllowAllInput;
};

export type MerchantWarehouseMutations = {
  readonly __typename?: "MerchantWarehouseMutations";
  readonly upsertWarehouse?: Maybe<UpsertMerchantWarehouseMutation>;
  readonly deleteWarehouse?: Maybe<DeleteMerchantWarehouseMutation>;
  readonly submitWarehouseVerificationRequest?: Maybe<SubmitWarehouseVerificationRequestMutation>;
};

export type MerchantWarehouseMutationsUpsertWarehouseArgs = {
  input: UpsertWarehouseInput;
};

export type MerchantWarehouseMutationsDeleteWarehouseArgs = {
  input: DeleteMerchantWarehouseInput;
};

export type MerchantWarehouseMutationsSubmitWarehouseVerificationRequestArgs = {
  input: SubmitWarehouseVerificationRequestInput;
};

export type MerchantWarehouseSchema = {
  readonly __typename?: "MerchantWarehouseSchema";
  readonly id: Scalars["String"];
  readonly unitId: Scalars["String"];
  readonly address?: Maybe<AddressSchema>;
  readonly weekStats?: Maybe<ReadonlyArray<MerchantWarehouseWeekStatsSchema>>;
  readonly weekStatsCount: Scalars["Int"];
  readonly enabledCountries: ReadonlyArray<Country>;
  readonly verificationState?: Maybe<WarehouseVerificationState>;
  readonly verificationRequest?: Maybe<WarehouseVerificationRequestSchema>;
};

export type MerchantWarehouseSchemaWeekStatsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<MerchantWarehouseWeekStatsSort>;
  startDate?: Maybe<DatetimeInput>;
  endDate?: Maybe<DatetimeInput>;
};

export type MerchantWarehouseSchemaWeekStatsCountArgs = {
  startDate?: Maybe<DatetimeInput>;
  endDate?: Maybe<DatetimeInput>;
};

export type MerchantWarehouseWeekStatsSchema = {
  readonly __typename?: "MerchantWarehouseWeekStatsSchema";
  readonly lateDeliveryRate?: Maybe<Scalars["Float"]>;
  readonly maxExpectedGmv: CurrencyValue;
  readonly expectedDeliveries: Scalars["Int"];
  readonly lateDeliveries: Scalars["Int"];
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly isLateDeliveryRateHigh?: Maybe<Scalars["Boolean"]>;
  readonly isLateDeliveryRateAtRisk?: Maybe<Scalars["Boolean"]>;
  readonly merchantId: Scalars["ObjectIdType"];
};

export type MerchantWarehouseWeekStatsSchemaLateDeliveryRateArgs = {
  orderPolicyType?: Maybe<OrderPolicyType>;
};

export type MerchantWarehouseWeekStatsSchemaIsLateDeliveryRateHighArgs = {
  orderPolicyType?: Maybe<OrderPolicyType>;
};

export type MerchantWarehouseWeekStatsSchemaIsLateDeliveryRateAtRiskArgs = {
  orderPolicyType?: Maybe<OrderPolicyType>;
};

export type MerchantWarehouseWeekStatsSort = {
  readonly field: MerchantWarehouseWeekStatsSortFieldType;
  readonly order: SortOrderType;
};

export type MerchantWarehouseWeekStatsSortFieldType = "START_DATE";

export type MerchantWarningAction =
  | "REPLY"
  | "MERCHANT_LEVEL_DISPUTE"
  | "REQUEST_PAYMENT_RELEASE"
  | "LISTING_LEVEL_DISPUTE";

export type MerchantWarningAuditAction =
  | "CLAIM"
  | "REVERT"
  | "BATCH_CLAIM"
  | "CONFIRM";

export type MerchantWarningAuditRevertReason =
  | "POLICY_UPDATE"
  | "INCORRECTED_DATA"
  | "AGENT_ERROR";

export type MerchantWarningAuditStatus =
  | "REQUIRE_AUDIT"
  | "CONFIRMED"
  | "REVERTED";

export type MerchantWarningClaimStatus =
  | "CLAIMED"
  | "NOT_CLAIMED"
  | "CLAIMED_BY_ME"
  | "ALL";

export type MerchantWarningCorrespondenceStatus = "NEW" | "HOLD" | "OPEN";

export type MerchantWarningFixAction =
  | "PROVE_AUTHENTICITY"
  | "EDIT_PRODUCT_LISTING"
  | "UPDATE_MAX_DELIVERY_DAYS"
  | "REQUEST_PAYMENT_RELEASE"
  | "PRODUCT_AUTHORIZATION"
  | "ADDRESS_UNDERLYING_INFRACTION"
  | "MESSAGE"
  | "PAY_WISHPOST_BALANCE"
  | "DISPUTE";

export type MerchantWarningImpactSchema = {
  readonly __typename?: "MerchantWarningImpactSchema";
  readonly type: MerchantWarningImpactType;
  readonly startDate?: Maybe<Datetime>;
  readonly endDate?: Maybe<Datetime>;
  readonly countries?: Maybe<ReadonlyArray<Country>>;
};

export type MerchantWarningImpactType =
  | "PRODUCT_PAYMENT_HOLD"
  | "ORDER_PAYMENT_HOLD"
  | "AUTO_REFUND"
  | "GEOBLOCK"
  | "MERCHANT_BAN"
  | "MERCHANT_IMPRESSION_BLOCK"
  | "MERCHANT_PAYMENT_HOLD"
  | "PRODUCT_TAKEDOWN"
  | "EAT_COST_FOR_PRODUCT"
  | "PRODUCT_IMPRESSION_BLOCK"
  | "VARIATION_TAKEDOWN";

export type MerchantWarningMutations = {
  readonly __typename?: "MerchantWarningMutations";
  readonly updateAuditQueueWarning?: Maybe<UpdateAuditQueueWarning>;
  readonly upsertMerchantWarning?: Maybe<UpsertMerchantWarning>;
};

export type MerchantWarningMutationsUpdateAuditQueueWarningArgs = {
  input?: Maybe<UpdateAuditQueueWarningInput>;
};

export type MerchantWarningMutationsUpsertMerchantWarningArgs = {
  input?: Maybe<UpsertMerchantWarningInput>;
};

export type MerchantWarningProofDisputeStatus =
  | "DISPUTING"
  | "DISPUTE_FAILED"
  | "NOT_DISPUTED"
  | "DISPUTE_SUCCESS";

export type MerchantWarningProofSchema = {
  readonly __typename?: "MerchantWarningProofSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly type: MerchantWarningProofType;
  readonly disputeStatus: MerchantWarningProofDisputeStatus;
  readonly product?: Maybe<ProductSchema>;
  readonly order?: Maybe<OrderSchema>;
  readonly message?: Maybe<Scalars["String"]>;
  readonly brandAuthorization?: Maybe<BrandAuthorizationSchema>;
  readonly warningId?: Maybe<Scalars["ObjectIdType"]>;
  readonly note?: Maybe<Scalars["String"]>;
};

export type MerchantWarningProofType =
  | "MERCHANT"
  | "PRODUCT"
  | "VARIATION"
  | "PRODUCT_RATING"
  | "TICKET"
  | "ORDER";

export type MerchantWarningReason =
  | "INVALID_TRACKING_NUMBERS"
  | "HIGH_CHARGEBACK_RATIO"
  | "REQUEST_MONEY"
  | "PRODUCT_HIGH_REFUND_RATIO"
  | "VIOLATE_TS_POLICY"
  | "DUPLICATE_PRODUCTS"
  | "INACTIVE_ACCOUNT"
  | "HIGH_GMV_FROM_GAMING_AUDIT"
  | "INVALID_EU_RESPONSIBLE_PERSON"
  | "FAKE_RATING"
  | "DEP_BAIT_VARIABLE_PRICING"
  | "DUPLICATE_ACCOUNTS"
  | "DISINGENUOUS_CUSTOMER_SERVICE"
  | "REQUEST_USER_EMAIL"
  | "EXTREMELY_HIGH_PRICE_SPREAD"
  | "HIGH_IP_INFRINGEMENT"
  | "HIGH_GMV_FROM_GAMING_BAN"
  | "HIGH_CHARGEBACK_AND_FRAUD_REFUND_RATIO"
  | "WISHPOST_NEGATIVE_BALANCE"
  | "CN_PROHIBITED_PRODUCTS"
  | "PRODUCT_LOW_RATING"
  | "FINE_UPDATE_TO_COUNTERFEIT"
  | "WISH_STANDARDS_BAN"
  | "RELATED_ACCOUNT_IS_BANNED"
  | "VIOLATE_POLICY"
  | "DEP_FINE_DISABLE_PROMOTED_PRODUCT_FOR_COUNTRY"
  | "UNFULFILLED_ORDER"
  | "HIGH_GMV_FROM_GAMING_FREEZE"
  | "WISH_EXPRESS_POLICY_MERCHANT"
  | "EMPTY_PACKAGES"
  | "VIOLATION_OF_POLICY_TIER"
  | "FAKE_TRACKING"
  | "CS_LATE_RESPONSE_RATE"
  | "LEGAL_TRO_TAKEDOWN"
  | "WAREHOUSE_FULFILLMENT_POLICY_VIOLATION"
  | "WISH_EXPRESS_POLICY_VIOLATION"
  | "REPEAT_IP_INFRINGEMENT_ON_BRAND_OWNER"
  | "MERCHANT_CONTACT_INFO_INVALID"
  | "HIGH_AUTO_REFUND"
  | "MERCHANT_HIGH_CANCEL_ORDER_RATE"
  | "LATE_CONFIRMED_FULFILLMENT_VIOLATION"
  | "WISH_EXPRESS_POLICY_PRODUCT"
  | "BAD_CUSTOMER_SERVICE"
  | "PRODUCT_HIGH_QUALITY_REFUND_RATIO"
  | "MISLEADING_VARIATION"
  | "FINE_FOR_COUNTERFEIT_GOODS"
  | "MERCHANT_HIGH_REFUND_EAT_COST"
  | "PRODUCT_GEOBLOCK"
  | "PRODUCT_IS_INAPPROPRIATE"
  | "BRANDED_PRODUCT_GEOBLOCK"
  | "DEP_FINE_DISABLE_PROMOTED_PRODUCT"
  | "UNCONFIRMED_TRACKING_NUMBERS"
  | "FINE_WISH_EXPRESS_POLICY_VIOLATION"
  | "PRODUCT_HIGH_REFUND_RATIO_NO_REMOVE"
  | "RESPOND_TO_ADMIN"
  | "US_TAX_INFO_UNVALIDATED"
  | "STRIKE_BASED_HIGH_RISK_PROHIBITED"
  | "PENALTY_FOR_AUTO_REFUND"
  | "FINAL_JUDGEMENT_ORDER"
  | "CONFIRMED_DELIVERY_POLICY"
  | "BAN_EARLY_STAGE_MERCHANT"
  | "HIGH_REFUND_RATIO"
  | "TAKE_USER_OUTSIDE_WISH"
  | "POLICY_TIER_DEMOTION"
  | "MERCHANT_HIGH_QUALITY_REFUND_RATIO"
  | "REPEAT_PRODUCT_SWAPPING"
  | "MERCHANT_CANCELLATION_VIOLATION"
  | "WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION"
  | "SUSPECTED_FRAUD"
  | "HIGH_GMV_FROM_MISLEADING_PRODUCTS"
  | "PRODUCT_HIGH_CANCEL_ORDER_RATE"
  | "COUNTERFEIT_GOODS"
  | "CS_LOW_CSAT_SCORE"
  | "LATE_FULFILLMENT_RATE"
  | "FINE_PRODUCT_SWAPPED"
  | "DECEPTIVE_FULFILLMENT"
  | "VIOLATION_OF_TERMS"
  | "STORE_VALIDATION_INCOMPLETE"
  | "TAX_SETTING_NOT_UPDATED"
  | "MERCHANT_HARASSMENT"
  | "REUPLOADING_COUNTERFEITS"
  | "PRODUCT_LOW_RATING_NO_REMOVE"
  | "ORDER_NOT_DELIVERED";

export type MerchantWarningReasonSchema = {
  readonly __typename?: "MerchantWarningReasonSchema";
  readonly reason: MerchantWarningReason;
  readonly text: Scalars["String"];
};

export type MerchantWarningReplySchema = {
  readonly __typename?: "MerchantWarningReplySchema";
  readonly senderType?: Maybe<MerchantWarningReplySenderType>;
  readonly senderName?: Maybe<Scalars["String"]>;
  readonly displayName?: Maybe<Scalars["String"]>;
  readonly date?: Maybe<Datetime>;
  readonly message?: Maybe<Scalars["String"]>;
  readonly translatedMessage?: Maybe<Scalars["String"]>;
  readonly type?: Maybe<MerchantWarningReplyType>;
  readonly files?: Maybe<ReadonlyArray<MerchantFileSchema>>;
  readonly images?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type MerchantWarningReplySenderType =
  | "ADMIN"
  | "MERCHANT"
  | "ADMIN_BAN"
  | "ADMIN_UNBAN"
  | "ADMIN_UNBAN_PENDING";

export type MerchantWarningReplyType =
  | "ADMIN_COMMENT"
  | "APPROVE_PAYMENT_RELEASE"
  | "UNBAN_EXPLANATION"
  | "REGULAR_REPLY"
  | "AUTOBOT_REPLY"
  | "WITHHOLD_FUNDS_EXPLANATION"
  | "SEND_PB_INCENTIVE"
  | "CLOSE_REPLY"
  | "REQUEST_PAYMENT_RELEASE"
  | "BAN_EXPLANATION"
  | "REJECT_PAYMENT_RELEASE"
  | "BD_APPROVE_PAYMENT_RELEASE"
  | "REMOVE_WITHHOLD_FUNDS_EXPLANATION"
  | "REOPEN_REPLY"
  | "RESET_PAYMENT_RELEASE";

export type MerchantWarningSchema = {
  readonly __typename?: "MerchantWarningSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly state: MerchantWarningState;
  readonly fineAmount?: Maybe<CurrencyValue>;
  readonly reason: MerchantWarningReasonSchema;
  readonly correspondenceStatus?: Maybe<MerchantWarningCorrespondenceStatus>;
  readonly adminReasonText?: Maybe<Scalars["String"]>;
  readonly merchantReasonText?: Maybe<Scalars["String"]>;
  readonly counterfeitReasonText?: Maybe<Scalars["String"]>;
  readonly banned?: Maybe<Scalars["Boolean"]>;
  readonly lastUpdate: Datetime;
  readonly createdTime: Datetime;
  readonly creatorName?: Maybe<Scalars["String"]>;
  readonly proofs: ReadonlyArray<MerchantWarningProofSchema>;
  readonly fine?: Maybe<MerchantFineSchema>;
  readonly counterfeitBrand?: Maybe<BrandSchema>;
  readonly merchant?: Maybe<MerchantSchema>;
  readonly product?: Maybe<ProductSchema>;
  readonly products?: Maybe<ReadonlyArray<ProductSchema>>;
  readonly order?: Maybe<OrderSchema>;
  readonly productGmvAtAudit?: Maybe<CurrencyValue>;
  readonly claimedBy?: Maybe<UserSchema>;
  readonly auditStatus?: Maybe<MerchantWarningAuditStatus>;
  readonly effectiveDisputeDeadlineDate: Datetime;
  readonly trackingDispute?: Maybe<TrackingDisputeSchema>;
  readonly wssImpact: WssImpactState;
  readonly impacts?: Maybe<ReadonlyArray<MerchantWarningImpactSchema>>;
  readonly merchantActions?: Maybe<ReadonlyArray<MerchantWarningFixAction>>;
  readonly outstandingMerchantActions?: Maybe<
    ReadonlyArray<MerchantWarningFixAction>
  >;
  readonly productTrueTagInfo?: Maybe<ProductTrueTagInfoSchema>;
  readonly takedownRequest?: Maybe<TakedownRequestSchema>;
  readonly replies?: Maybe<ReadonlyArray<MerchantWarningReplySchema>>;
  readonly resolved?: Maybe<Scalars["Boolean"]>;
};

export type MerchantWarningSchemaFineAmountArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type MerchantWarningSort = {
  readonly field: MerchantWarningSortFieldType;
  readonly order: SortOrderType;
};

export type MerchantWarningSortFieldType =
  | "CREATED_TIME"
  | "PRODUCT_GMV_AT_AUDIT"
  | "LAST_UPDATE";

export type MerchantWarningState =
  | "AWAITING_AUTH_TAGGING_HIGH_GMV"
  | "US_BD_REVIEW_PAYMENT"
  | "CN_BD_REVIEW_PAYMENT"
  | "REQUEST_PAYMENT"
  | "AWAITING_ADMIN"
  | "REQUIRES_ADMIN_REVIEW"
  | "AWAITING_ADMIN_BOT"
  | "CLOSED"
  | "CANCELLED"
  | "NEW"
  | "AWAITING_MERCHANT"
  | "AWAITING_AUTH_TAGGING_LOW_GMV";

export type MerchantWeeklyStats = {
  readonly __typename?: "MerchantWeeklyStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly sales: SalesPerformanceStats;
  readonly rating: RatingPerformanceStats;
  readonly product: ProductPerformanceStats;
  readonly refund: RefundPerformanceStats;
  readonly tracking: TrackingPerformanceStats;
  readonly delivery: DeliveryPerformanceStats;
  readonly cs: CsPerformanceStats;
};

export type MerchantWishSellerStandardDetails = {
  readonly __typename?: "MerchantWishSellerStandardDetails";
  readonly stats?: Maybe<WishSellerStandardStats>;
  readonly thingsToWatchBoard?: Maybe<WssThingsToWatchBoard>;
  readonly monthlyUpdateStats?: Maybe<WishSellerStandardStats>;
  readonly complianceUpdateStats?: Maybe<WishSellerStandardStats>;
  readonly level?: Maybe<WssMerchantLevelType>;
  readonly prevLevel?: Maybe<WssMerchantLevelType>;
  readonly rawLevel?: Maybe<WssMerchantLevelType>;
  readonly layer1Level?: Maybe<WssMerchantLevelType>;
  readonly lastUpdatedStats?: Maybe<Datetime>;
  readonly lastTierUpdateDate?: Maybe<Datetime>;
  readonly nextMonthlyTierUpdateDate?: Maybe<Datetime>;
  readonly endDateForLastMonthlyUpdateCalcWindow?: Maybe<Datetime>;
  readonly policyInfractionWindowStartDate?: Maybe<Datetime>;
  readonly policyInfractionWindowEndDate?: Maybe<Datetime>;
  readonly fulfillmentInfractionWindowStartDate?: Maybe<Datetime>;
  readonly fulfillmentInfractionWindowEndDate?: Maybe<Datetime>;
  readonly deepDive?: Maybe<WssPerformanceDeepDiveHub>;
  readonly recentStats?: Maybe<ReadonlyArray<WishSellerStandardStats>>;
};

export type MerchantWishSellerStandardDetailsRecentStatsArgs = {
  days?: Maybe<Scalars["Int"]>;
};

export type MerchantWpsSchema = {
  readonly __typename?: "MerchantWPSSchema";
  readonly enabledDestinationCountries: ReadonlyArray<Country>;
  readonly enabledOriginCountries: ReadonlyArray<Country>;
};

export type MerchantWpsTermsOfServiceInput = {
  readonly merchantAction: MerchantTermsActionEnum;
  readonly tos: WpsTermsTypeEnum;
};

export type MerchantWpsTermsOfServiceMutation = {
  readonly __typename?: "MerchantWPSTermsOfServiceMutation";
  readonly ok: Scalars["Boolean"];
};

export type MerchantWpsTermsOfServiceSchema = {
  readonly __typename?: "MerchantWPSTermsOfServiceSchema";
  readonly viewedWpsTos: Scalars["Boolean"];
  readonly viewedUpsTos: Scalars["Boolean"];
  readonly agreedWpsTos: Scalars["Boolean"];
  readonly agreedUpsTos: Scalars["Boolean"];
};

export type MfpCampaignCancelInfo = {
  readonly __typename?: "MFPCampaignCancelInfo";
  readonly reason: MfpCampaignCancelReason;
  readonly comment?: Maybe<Scalars["String"]>;
  readonly cancelledTime: Datetime;
};

export type MfpCampaignCancelReason =
  | "WISH_CANCELLED_FAILED_DEPENDENCIES"
  | "WISH_CANCELLED_UNQUALIFIED_MERCHANT"
  | "MERCHANT_CANCELLED_WRONG_CAMPAIGN_INFO"
  | "WRONG_PRODUCTS"
  | "OTHER";

export type MfpCampaignConstantsSchema = {
  readonly __typename?: "MFPCampaignConstantsSchema";
  readonly maxAllowedQuantity: Scalars["Int"];
  readonly maxCampaignNameLength: Scalars["Int"];
  readonly minCampaignDelayInHour: Scalars["Int"];
  readonly maxCampaignDelayInHour: Scalars["Int"];
  readonly maxCampaignDurationInDays: Scalars["Int"];
  readonly minDiscountPercentage: Scalars["Float"];
  readonly maxDiscountPercentage: Scalars["Float"];
  readonly maxProductVariations: Scalars["Int"];
  readonly maxCampaignsPerRequest: Scalars["Int"];
  readonly pricingGamingIgnoreThreshold: Scalars["Float"];
  readonly pricingGamingCancelThreshold: Scalars["Float"];
};

export type MfpCampaignEventConfig =
  | "UNSPECIFIED"
  | "EXCLUDE_EVENT"
  | "EVENT_ONLY";

export type MfpCampaignEventSortBy =
  | "SUBMISSION_DEADLINE"
  | "START_TIME"
  | "END_TIME";

export type MfpCampaignPriceDiscounted = "PRICE" | "SHIPPING";

export type MfpCampaignPromotionType =
  | "PRICE_DISCOUNT"
  | "FLASH_SALE"
  | "SPEND_MORE_AND_SAVE_MORE";

export type MfpCampaignSchema = {
  readonly __typename?: "MFPCampaignSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
  readonly promotionType: MfpCampaignPromotionType;
  readonly creationTime: Datetime;
  readonly startTime: Datetime;
  readonly endTime: Datetime;
  readonly cancelInfo?: Maybe<MfpCampaignCancelInfo>;
  readonly state: MfpCampaignState;
  readonly unqualifiedProductVariations?: Maybe<
    ReadonlyArray<MfpUnqualifiedVariationData>
  >;
  readonly discountDetails?: Maybe<ReadonlyArray<MfpVariationDiscountData>>;
  readonly flashSaleDetails?: Maybe<ReadonlyArray<MfpVariationDiscountData>>;
  readonly countries?: Maybe<ReadonlyArray<Country>>;
  readonly skipShipping: Scalars["Boolean"];
  readonly event?: Maybe<CampaignEventInfo>;
  readonly genericUnqualifiedProductVariations?: Maybe<
    Scalars["GenericScalar"]
  >;
  readonly genericDiscountDetails?: Maybe<Scalars["GenericScalar"]>;
  readonly genericFlashSaleDetails?: Maybe<Scalars["GenericScalar"]>;
};

export type MfpCampaignSchemaGenericDiscountDetailsArgs = {
  performanceStartDate?: Maybe<DatetimeInput>;
  performanceEndDate?: Maybe<DatetimeInput>;
};

export type MfpCampaignSchemaGenericFlashSaleDetailsArgs = {
  performanceStartDate?: Maybe<DatetimeInput>;
  performanceEndDate?: Maybe<DatetimeInput>;
};

export type MfpCampaignSearchType =
  | "CAMPAIGN_NAME"
  | "CAMPAIGN_ID"
  | "PRODUCT_ID";

export type MfpCampaignState = "PENDING" | "CANCELLED" | "APPROVED";

export type MfpConstantsSchema = {
  readonly __typename?: "MFPConstantsSchema";
  readonly campaign?: Maybe<MfpCampaignConstantsSchema>;
  readonly discountCampaign?: Maybe<MfpDiscountCampaignConstantsSchema>;
  readonly flashSaleCampaign?: Maybe<MfpFlashSaleConstantsSchema>;
};

export type MfpDiscountCampaignConstantsSchema = {
  readonly __typename?: "MFPDiscountCampaignConstantsSchema";
  readonly minimumProductRatingRequired: Scalars["Int"];
  readonly minimumProductSaleRequired: Scalars["Int"];
  readonly minimumProductHistoryDays: Scalars["Int"];
  readonly minimumCooldownDays: Scalars["Int"];
  readonly minimumPercentageRequired: Scalars["Int"];
  readonly productAndShippingPriceDays: Scalars["Int"];
  readonly minDiscountPercentage: Scalars["Float"];
  readonly maxDiscountPercentage: Scalars["Float"];
  readonly maxDiscountDifference: Scalars["Float"];
  readonly maxShippingIncreasePercentage: Scalars["Float"];
  readonly minStartTimeForLaunch: Datetime;
  readonly minDaysProductListed: Scalars["Int"];
  readonly minDaysVariationListed: Scalars["Int"];
};

export type MfpFlashSaleConstantsSchema = {
  readonly __typename?: "MFPFlashSaleConstantsSchema";
  readonly minimumProductRatingRequired: Scalars["Int"];
  readonly minimumProductSaleRequired: Scalars["Int"];
  readonly minimumProductHistoryDays: Scalars["Int"];
  readonly minimumCooldownDays: Scalars["Int"];
  readonly minimumPercentageRequired: Scalars["Int"];
  readonly productAndShippingPriceDays: Scalars["Int"];
  readonly minDiscountPercentage: Scalars["Float"];
  readonly maxDiscountPercentage: Scalars["Float"];
  readonly minDealQuantityPercentage: Scalars["Float"];
  readonly maxDiscountDifference: Scalars["Float"];
  readonly maxShippingIncreasePercentage: Scalars["Float"];
  readonly minStartTimeForLaunch: Datetime;
  readonly minDaysProductListed: Scalars["Int"];
  readonly minDaysVariationListed: Scalars["Int"];
};

export type MfpProductSearchType = "ID" | "NAME" | "SKU";

export type MfpServiceAdminMutations = {
  readonly __typename?: "MFPServiceAdminMutations";
  readonly createWhitelistProducts: CreateWhitelistProductsMutation;
  readonly expireWhitelistProducts: ExpireWhitelistProductsMutation;
};

export type MfpServiceAdminMutationsCreateWhitelistProductsArgs = {
  input: CreateWhitelistProductsInput;
};

export type MfpServiceAdminMutationsExpireWhitelistProductsArgs = {
  input: ExpireWhitelistProductsInput;
};

export type MfpServiceMutations = {
  readonly __typename?: "MFPServiceMutations";
  readonly upsertDiscountCampaign: UpsertDiscountCampaignMutation;
  readonly upsertFlashSaleCampaign: UpsertFlashSaleCampaignMutation;
  readonly cancelMfpCampaign: CancelMfpCampaign;
  readonly admin?: Maybe<MfpServiceAdminMutations>;
};

export type MfpServiceMutationsUpsertDiscountCampaignArgs = {
  input: UpsertDiscountCampaignInput;
};

export type MfpServiceMutationsUpsertFlashSaleCampaignArgs = {
  input: UpsertFlashSaleCampaignInput;
};

export type MfpServiceMutationsCancelMfpCampaignArgs = {
  input: CancelMfpCampaignInput;
};

export type MfpServiceSchema = {
  readonly __typename?: "MFPServiceSchema";
  readonly genericCampaigns?: Maybe<ReadonlyArray<Scalars["GenericScalar"]>>;
  readonly campaigns?: Maybe<ReadonlyArray<MfpCampaignSchema>>;
  readonly campaignsCount?: Maybe<Scalars["Int"]>;
  readonly genericEligibleProducts?: Maybe<Scalars["GenericScalar"]>;
  readonly eligibleProducts?: Maybe<ReadonlyArray<EligibleProductInfo>>;
  readonly eligibleProductsCount?: Maybe<Scalars["Int"]>;
  readonly activeWhitelistProducts?: Maybe<ReadonlyArray<WhitelistProductInfo>>;
  readonly activeWhitelistProductsCount?: Maybe<Scalars["Int"]>;
  readonly campaignEvents?: Maybe<ReadonlyArray<CampaignEventInfo>>;
  readonly campaignEventsCount?: Maybe<Scalars["Int"]>;
  readonly checkEligibility?: Maybe<Scalars["GenericScalar"]>;
};

export type MfpServiceSchemaGenericCampaignsArgs = {
  startAtMin?: Maybe<DatetimeInput>;
  startAtMax?: Maybe<DatetimeInput>;
  endAtMin?: Maybe<DatetimeInput>;
  endAtMax?: Maybe<DatetimeInput>;
  searchType?: Maybe<MfpCampaignSearchType>;
  searchQuery?: Maybe<Scalars["String"]>;
  states?: Maybe<ReadonlyArray<MfpCampaignState>>;
  promotionTypes?: Maybe<ReadonlyArray<MfpCampaignPromotionType>>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  performanceStartDate?: Maybe<DatetimeInput>;
  performanceEndDate?: Maybe<DatetimeInput>;
};

export type MfpServiceSchemaCampaignsArgs = {
  startAtMin?: Maybe<DatetimeInput>;
  startAtMax?: Maybe<DatetimeInput>;
  endAtMin?: Maybe<DatetimeInput>;
  endAtMax?: Maybe<DatetimeInput>;
  searchType?: Maybe<MfpCampaignSearchType>;
  searchQuery?: Maybe<Scalars["String"]>;
  states?: Maybe<ReadonlyArray<MfpCampaignState>>;
  promotionTypes?: Maybe<ReadonlyArray<MfpCampaignPromotionType>>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  eventIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  eventConfig?: Maybe<MfpCampaignEventConfig>;
};

export type MfpServiceSchemaCampaignsCountArgs = {
  startAtMin?: Maybe<DatetimeInput>;
  startAtMax?: Maybe<DatetimeInput>;
  endAtMin?: Maybe<DatetimeInput>;
  endAtMax?: Maybe<DatetimeInput>;
  searchType?: Maybe<MfpCampaignSearchType>;
  searchQuery?: Maybe<Scalars["String"]>;
  states?: Maybe<ReadonlyArray<MfpCampaignState>>;
  promotionTypes?: Maybe<ReadonlyArray<MfpCampaignPromotionType>>;
  eventIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  eventConfig?: Maybe<MfpCampaignEventConfig>;
};

export type MfpServiceSchemaGenericEligibleProductsArgs = {
  currency: PaymentCurrencyCode;
  promotionType?: Maybe<MfpCampaignPromotionType>;
  searchQuery?: Maybe<Scalars["String"]>;
  searchType?: Maybe<MfpProductSearchType>;
  eventId?: Maybe<Scalars["ObjectIdType"]>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<ProductSort>;
};

export type MfpServiceSchemaEligibleProductsArgs = {
  promotionType?: Maybe<MfpCampaignPromotionType>;
  searchQuery?: Maybe<Scalars["String"]>;
  searchType?: Maybe<MfpProductSearchType>;
  eventId?: Maybe<Scalars["ObjectIdType"]>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<ProductSort>;
};

export type MfpServiceSchemaEligibleProductsCountArgs = {
  promotionType?: Maybe<MfpCampaignPromotionType>;
  searchQuery?: Maybe<Scalars["String"]>;
  searchType?: Maybe<MfpProductSearchType>;
  eventId?: Maybe<Scalars["ObjectIdType"]>;
};

export type MfpServiceSchemaActiveWhitelistProductsArgs = {
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  productIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<WhitelistProductSort>;
};

export type MfpServiceSchemaActiveWhitelistProductsCountArgs = {
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  productIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
};

export type MfpServiceSchemaCampaignEventsArgs = {
  startAtMin?: Maybe<DatetimeInput>;
  startAtMax?: Maybe<DatetimeInput>;
  submitAtMin?: Maybe<DatetimeInput>;
  submitAtMax?: Maybe<DatetimeInput>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<CampaignEventSort>;
  promotionTypes?: Maybe<ReadonlyArray<MfpCampaignPromotionType>>;
};

export type MfpServiceSchemaCampaignEventsCountArgs = {
  startAtMin?: Maybe<DatetimeInput>;
  startAtMax?: Maybe<DatetimeInput>;
  submitAtMin?: Maybe<DatetimeInput>;
  submitAtMax?: Maybe<DatetimeInput>;
  promotionTypes?: Maybe<ReadonlyArray<MfpCampaignPromotionType>>;
};

export type MfpServiceSchemaCheckEligibilityArgs = {
  variationIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  promotionType?: Maybe<MfpCampaignPromotionType>;
  eventId?: Maybe<Scalars["ObjectIdType"]>;
};

export type MfpUnqualifiedVariationData = {
  readonly __typename?: "MFPUnqualifiedVariationData";
  readonly productId: Scalars["ObjectIdType"];
  readonly product: ProductSchema;
  readonly variationId: Scalars["ObjectIdType"];
  readonly variation: VariationSchema;
  readonly reason: MfpVariationUnqualifiedReason;
};

export type MfpVariationDiscountData = {
  readonly __typename?: "MFPVariationDiscountData";
  readonly productId: Scalars["ObjectIdType"];
  readonly product: ProductSchema;
  readonly variationId: Scalars["ObjectIdType"];
  readonly variation: VariationSchema;
  readonly maxQuantity?: Maybe<Scalars["Int"]>;
  readonly discountPercentage: Scalars["Float"];
  readonly scheduledStartTime?: Maybe<Datetime>;
  readonly scheduledEndTime?: Maybe<Datetime>;
};

export type MfpVariationUnqualifiedReason =
  | "LOW_RATING"
  | "SALE_HISTORY"
  | "PRODUCT_CATEGORY"
  | "NOT_IN_STOCK"
  | "PRODUCT_PRICE"
  | "PRODUCT_SHIPPING_PRICE"
  | "CAMPAIGN_LIMIT"
  | "FLASH_SALE_MINIMUM_DEAL_QUANTITY"
  | "MININUM_VARIATION_PERCENTAGE"
  | "VARIATIONS_PRICING_GAMING"
  | "PRODUCT_LISTED_DAYS"
  | "MERCHANT_ELIGIBILITY"
  | "NOT_OWNED_BY_MERCHANT"
  | "UNITY_PRODUCT"
  | "INVALID_ID"
  | "FRS_LOW_DISCOUNT"
  | "FRS_HIGH_DISCOUNT"
  | "FRS_DISCOUNT_PRICE"
  | "FRS_NEGATIVE_PRICE";

export type MfpWhitelistProductSortBy = "START_TIME" | "END_TIME";

export type MmsLeadProductCategory =
  | "TOYS_AND_GAMES"
  | "HOUSEHOLD_SUPPLIES"
  | "ELECTRONICS_AND_TECHNOLOGY"
  | "ARTS_CRAFTS_AND_SEWING"
  | "BABY_AND_TODDLER"
  | "TOOLS_AND_DIY"
  | "MUSICAL_INSTRUMENTS_AND_DJ"
  | "OTHER"
  | "JEWELLERY_AND_WATCHES"
  | "HOME_GARDEN_AND_PETS"
  | "COLLECTABLES_AND_MEMORABILIA"
  | "MOVIES_VIDEO_GAMES_AND_MUSIC"
  | "REFURBISHED_ELECTRONICS"
  | "CLOTHING_SHOES_AND_ACCESSORIES"
  | "BOOKS"
  | "SPORTS_AND_OUTDOORS"
  | "HEALTH_AND_BEAUTY"
  | "CARS_AND_AUTOMOTIVE"
  | "FOOD_AND_DRINK";

export type MmsLeadSubmissionInput = {
  readonly companyLegalName: Scalars["String"];
  readonly firstName: Scalars["String"];
  readonly lastName: Scalars["String"];
  readonly phoneNumber?: Maybe<Scalars["String"]>;
  readonly emailAddress: Scalars["String"];
  readonly productCategory: MmsLeadProductCategory;
  readonly annualRevenue: MmsLeadYearlyRevenue;
  readonly websiteUrl: Scalars["String"];
};

export type MmsLeadSubmissionMutation = {
  readonly __typename?: "MMSLeadSubmissionMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type MmsLeadYearlyRevenue = {
  readonly start: CurrencyInput;
  readonly end: CurrencyInput;
};

export type MobilePlatformType = "ANDROID" | "IOS";

export type ModifyTrackingError = {
  readonly __typename?: "ModifyTrackingError";
  readonly orderId: Scalars["ObjectIdType"];
  readonly message: Scalars["String"];
};

export type ModifyTrackingOrderInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly trackingId: Scalars["String"];
  readonly providerId: Scalars["Int"];
  readonly shipNote?: Maybe<Scalars["String"]>;
  readonly originCountryCode: CountryCode;
};

export type ModifyTrackingOrders = {
  readonly __typename?: "ModifyTrackingOrders";
  readonly modifyTrackingCount: Scalars["Int"];
  readonly errorMessages?: Maybe<ReadonlyArray<ModifyTrackingError>>;
};

export type ModifyWpsTrackingIdInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly shippingOptionId: Scalars["String"];
  readonly additionalServiceOptions?: Maybe<
    ReadonlyArray<WpsAvailableServices>
  >;
};

export type ModifyWpsTrackingIdMutation = {
  readonly __typename?: "ModifyWPSTrackingIDMutation";
  readonly ok: Scalars["Boolean"];
  readonly wpsShipmentId?: Maybe<Scalars["String"]>;
  readonly trackingId?: Maybe<Scalars["String"]>;
  readonly providerId?: Maybe<Scalars["Int"]>;
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type MsrCategory =
  | "ELECTRONICS"
  | "PPE"
  | "ELECTRICAL_PRODUCTS"
  | "TOYS";

export type NavigationResultSchema = {
  readonly __typename?: "NavigationResultSchema";
  readonly imageUrl?: Maybe<Scalars["String"]>;
  readonly url: Scalars["String"];
  readonly type: NavigationResultType;
  readonly title: Scalars["String"];
  readonly description?: Maybe<Scalars["String"]>;
  readonly nuggets?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type NavigationResultType = "MERCHANT" | "PRODUCT" | "WARNING" | "ORDER";

export type NotificationsServiceSchema = {
  readonly __typename?: "NotificationsServiceSchema";
  readonly notificationCount: Scalars["Int"];
};

export type NotificationsServiceSchemaNotificationCountArgs = {
  viewed?: Maybe<Scalars["Boolean"]>;
};

export type NotifyPasswordRecoveryMutation = {
  readonly __typename?: "NotifyPasswordRecoveryMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly ok: Scalars["Boolean"];
};

export type NotifyPasswordRecoveryMutationInput = {
  readonly email: Scalars["String"];
};

export type OffsiteBoost = {
  readonly __typename?: "OffsiteBoost";
  readonly enabled: Scalars["Boolean"];
  readonly dailyBudget: CurrencyValue;
  readonly maxDailyBudget: CurrencyValue;
  readonly minDailyBudget: CurrencyValue;
  readonly chargingMethod: ExternalBoostChargingMethod;
  readonly statsAvailableDate: Datetime;
};

export type OffsiteBoostDailyStats = {
  readonly __typename?: "OffsiteBoostDailyStats";
  readonly date: Datetime;
  readonly clicks: Scalars["Int"];
  readonly orders: Scalars["Int"];
  readonly gmv: CurrencyValue;
  readonly attributed?: Maybe<ExternalBoostAttributedStats>;
  readonly spend: CurrencyValue;
};

export type OffsiteBoostPropertyInput = {
  readonly enabled?: Maybe<Scalars["Boolean"]>;
  readonly dailyBudget?: Maybe<CurrencyInput>;
};

export type OffsiteBoostStats = {
  readonly __typename?: "OffsiteBoostStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly daily: ReadonlyArray<OffsiteBoostDailyStats>;
};

export type OnboardingSchema = {
  readonly __typename?: "OnboardingSchema";
  readonly steps?: Maybe<ReadonlyArray<OnboardingStep>>;
  readonly numStepsLeft: Scalars["Int"];
  readonly numStepsCompleted: Scalars["Int"];
  readonly numSteps: Scalars["Int"];
  readonly completed: Scalars["Boolean"];
};

export type OnboardingSchemaStepsArgs = {
  completed?: Maybe<Scalars["Boolean"]>;
  requiredForSubmission?: Maybe<Scalars["Boolean"]>;
};

export type OnboardingSchemaNumStepsLeftArgs = {
  requiredForSubmission?: Maybe<Scalars["Boolean"]>;
};

export type OnboardingSchemaNumStepsCompletedArgs = {
  requiredForSubmission?: Maybe<Scalars["Boolean"]>;
};

export type OnboardingSchemaNumStepsArgs = {
  requiredForSubmission?: Maybe<Scalars["Boolean"]>;
};

export type OnboardingStep = {
  readonly __typename?: "OnboardingStep";
  readonly name: MerchantOnboardingStep;
  readonly title: Scalars["String"];
  readonly description: Scalars["String"];
  readonly ctaText: Scalars["String"];
  readonly ctaLink?: Maybe<Scalars["String"]>;
  readonly illustration?: Maybe<Scalars["String"]>;
  readonly completed: Scalars["Boolean"];
};

export type OneoffPaymentStatus = "CANCELLED" | "UNPAID" | "PAID";

export type OneoffPaymentType =
  | "WISHPOST_ADJUSTMENT_PAYMENT"
  | "WITHHOLD_RELEASE"
  | "MERCHANT_INCENTIVE"
  | "EARLY_PAYMENT_REIMBURSEMENT_FEE"
  | "CONSOLIDATE_MP_PAYMENT"
  | "PRODUCT_REBATE"
  | "FINE_REVERSED"
  | "ONEOFF_ADMIN_TOOL"
  | "DISPUTE_APPROVED"
  | "FBW_PAYMENT"
  | "PRODUCT_BOOST_BALANCE_REFUND"
  | "REV_SHARE_ADJUSTMENT"
  | "REGISTRATION_REFUND"
  | "ONEOFF"
  | "EARLY_PAYMENT"
  | "SE_CASH_BACK"
  | "STORE_PAYMENT"
  | "PRODUCT_UNTAGGED_MISLEADING"
  | "WISH_PARCEL_SERVICE_ADJUSTMENT";

export type OrderAdvancedLogisticsInfoSchema = {
  readonly __typename?: "OrderAdvancedLogisticsInfoSchema";
  readonly canUncombine: Scalars["Boolean"];
};

export type OrderBadge =
  | "WPS_ELIGIBLE"
  | "PREMIUM_SHIPPING_CARRIER_UPGRADE"
  | "LESS_THAN_TRUCK_LOAD"
  | "COUNTRY_BADGE_KR"
  | "ADVANCED_LOGISTICS"
  | "TRACKING_CANCELLED"
  | "UNIFICATION_INITIATIVE"
  | "PAY_CUSTOMER_VAT_REQUIRED_LEGACY_DE"
  | "NON_COMPLIANT_WISH_EXPRESS"
  | "OPTIONAL_ADVANCED_LOGISTICS"
  | "EPC_FAST_PAYMENT"
  | "CONFIRMED_DELIVERY_REQUIRED"
  | "COUNTRY_BADGE_BR"
  | "COMBINED"
  | "APLUS_FAST_PAYMENT"
  | "STRATEGIC_COUNTRY_REBATE"
  | "CHINA_POST_SUBSIDY"
  | "PAY_CUSTOMER_VAT_REQUIRED_UK"
  | "SE_CASHBACK"
  | "COUNTRY_BADGE_NO"
  | "PAY_CUSTOMER_VAT_REQUIRED_EU"
  | "MERCHANT_STANDING_BENEFIT"
  | "EU_VAT"
  | "STRATEGIC_ORDER_REBATE"
  | "FBW"
  | "COUNTRY_BADGE_CL"
  | "COUNTRY_BADGE_GB"
  | "WISH_EXPRESS"
  | "TRACKING_CANCELLED_A_PLUS";

export type OrderCarrierTier = "Tier1" | "Tier3" | "Tier2" | "Tier4";

export type OrderConstants = {
  readonly __typename?: "OrderConstants";
  readonly dadaPolicyDaysToConfirmedDelivered?: Maybe<Scalars["Int"]>;
};

export type OrderCsvColumnSchema = {
  readonly __typename?: "OrderCSVColumnSchema";
  readonly name: Scalars["String"];
  readonly description: Scalars["String"];
};

export type OrderEpcInfoSchema = {
  readonly __typename?: "OrderEPCInfoSchema";
  readonly canUncombine: Scalars["Boolean"];
};

export type OrderEstimatedShippingTimelineSchema = {
  readonly __typename?: "OrderEstimatedShippingTimelineSchema";
  readonly maxShipTime: Datetime;
  readonly maxDeliveryTime?: Maybe<Datetime>;
};

export type OrderFbwDetailsSchema = {
  readonly __typename?: "OrderFBWDetailsSchema";
  readonly isFbw: Scalars["Boolean"];
  readonly warehouseName: Scalars["String"];
  readonly warehouseId: Scalars["String"];
};

export type OrderHistorySearchType =
  | "ORDER_ID"
  | "PRODUCT_ID"
  | "TRACKING_NUMBER"
  | "USER_NAME"
  | "DISPUTE_ID"
  | "TRANSACTION_ID";

export type OrderHistorySort = {
  readonly field: OrderHistorySortFieldType;
  readonly order: SortOrderType;
};

export type OrderHistorySortFieldType = "ORDER_TIME" | "LAST_UPDATE";

export type OrderInfractionDisputeAction =
  | "CLAIM"
  | "ADMIN_COMMENT"
  | "CREATE"
  | "REOPEN"
  | "REJECT"
  | "CANCEL"
  | "CLOSE"
  | "HOLD"
  | "APPROVE"
  | "REPLY";

export type OrderInfractionDisputeMutations = {
  readonly __typename?: "OrderInfractionDisputeMutations";
  readonly upsertOrderInfractionDispute?: Maybe<UpsertOrderInfractionDispute>;
};

export type OrderInfractionDisputeMutationsUpsertOrderInfractionDisputeArgs = {
  input?: Maybe<UpsertOrderInfractionDisputeInput>;
};

export type OrderInfractionDisputeSubreason =
  | "INCORRECT_CONFIRMED_DELIVERY_DATE_FROM_CARRIER"
  | "AMBIGUOUS_CUSTOMER_ADDRESS"
  | "CAN_PROVIDE_CORRECT_TRACKING_INFO"
  | "NATURAL_DISASTER"
  | "RESHIP_PACKAGE"
  | "NATIONAL_HOLIDAY"
  | "UNVERIFIABLE_ADDRESS"
  | "SHIPMENT_RETURNED"
  | "INCORRECT_CONFIRMED_FULFILLMENT_DATE"
  | "CANNOT_SHIP_TO_REGION"
  | "TECHNICAL_ISSUE"
  | "OTHER"
  | "OPERATIONAL_OR_IT_ISSUE"
  | "ADDRESS_PO_BOX"
  | "WISH_LOGISTICS_CANNOT_FULFILL"
  | "INCORRECT_TRACKING_INFO"
  | "SHIPMENT_STUCK_AT_CUSTOMS";

export type OrderLimboState =
  | "LIMBO_AND_ROUTED"
  | "NOT_LIMBO"
  | "LIMBO_AND_CUSTOMER_REFUNDED"
  | "LIMBO_AND_NOT_ROUTED";

export type OrderLogicalPaymentState =
  | "TO_BE_PAID"
  | "PENDING_WFP_WITHHOLD"
  | "PENDING_WISHPOST_SHIPPING"
  | "WILL_NOT_BE_PAID"
  | "HAS_BEEN_PAID"
  | "FBW_PAID"
  | "PENDING_CONFIRMED_SHIP"
  | "UNDER_REVIEW"
  | "WITHHELD";

export type OrderMfpCampaignSchema = {
  readonly __typename?: "OrderMFPCampaignSchema";
  readonly priceDiscountType: MfpCampaignPriceDiscounted;
  readonly campaignName: Scalars["String"];
  readonly campaignId: Scalars["String"];
  readonly campaign?: Maybe<MfpCampaignSchema>;
};

export type OrderNoFulfillSchema = {
  readonly __typename?: "OrderNOFulfillSchema";
  readonly isBoundOrder: Scalars["Boolean"];
};

export type OrderOnTimeDeliveryCriteria = "WISH_EXPRESS" | "DADA";

export type OrderPolicyType = "WISH_EXPRESS" | "WAREHOUSE_FULFILLMENT_POLICY";

export type OrderRebateCancelType =
  | "CANCEL_BEFORE_PAYMENT"
  | "CANCEL_AFTER_PAYMENT"
  | "NO_CANCEL";

export type OrderRebateSchema = {
  readonly __typename?: "OrderRebateSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly type: OrderRebateType;
  readonly paymentId?: Maybe<Scalars["ObjectIdType"]>;
  readonly refundPaymentId?: Maybe<Scalars["ObjectIdType"]>;
  readonly amount: CurrencyValue;
  readonly localizedRebateAmount: CurrencyValue;
  readonly cancelState?: Maybe<OrderRebateCancelType>;
};

export type OrderRebateSchemaAmountArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type OrderRebateType =
  | "STRATEGIC_ORDER_REBATE"
  | "WISH_EXPRESS_REBATE"
  | "CHINA_POST_SUBSITY"
  | "COVID19_SUBSIDY"
  | "TRANSACTION_FEE_REBATE"
  | "MARKETING_REBATE";

export type OrderRefundBuyerFraudSubreasonSchema = {
  readonly __typename?: "OrderRefundBuyerFraudSubreasonSchema";
  readonly reason: BuyerFraudReasonCategory;
  readonly text: Scalars["String"];
};

export type OrderRefundDeductedStatus =
  | "DEDUCTED_AFTER_PAYMENT"
  | "DEDUCTED_BEFORE_PAYMENT"
  | "UNDEDUCTED";

export type OrderRefundItemDisputeSchema = {
  readonly __typename?: "OrderRefundItemDisputeSchema";
  readonly supportingPolicy: Scalars["String"];
  readonly paymentId?: Maybe<Scalars["ObjectIdType"]>;
  readonly isApproved: Scalars["Boolean"];
};

export type OrderRefundItemSchema = {
  readonly __typename?: "OrderRefundItemSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly refundTime: Datetime;
  readonly quantity: Scalars["Int"];
  readonly localizedMerchantResponsibleAmount?: Maybe<CurrencyValue>;
  readonly merchantResponsibleAmount?: Maybe<CurrencyValue>;
  readonly merchantResponsibilityRatio: Scalars["Float"];
  readonly reasonInfo: OrderRefundReasonSchema;
  readonly eatCostWarning?: Maybe<MerchantWarningSchema>;
  readonly dispute?: Maybe<OrderRefundItemDisputeSchema>;
  readonly disputeId?: Maybe<Scalars["ObjectIdType"]>;
  readonly isDisputable: Scalars["Boolean"];
  readonly canReportFraud: Scalars["Boolean"];
  readonly refundTax?: Maybe<CurrencyValue>;
  readonly payment: OrderRefundPaymentSchema;
  readonly note?: Maybe<Scalars["String"]>;
  readonly source: RefundSource;
};

export type OrderRefundItemSchemaMerchantResponsibleAmountArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
  includeWishpostFee?: Maybe<Scalars["Boolean"]>;
};

export type OrderRefundItemSchemaRefundTaxArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type OrderRefundItemsSummarySchema = {
  readonly __typename?: "OrderRefundItemsSummarySchema";
  readonly isPartialAmountRefunded: Scalars["Boolean"];
  readonly refundedQuantity: Scalars["Int"];
  readonly refundedPercentage?: Maybe<Scalars["Float"]>;
};

export type OrderRefundPaymentSchema = {
  readonly __typename?: "OrderRefundPaymentSchema";
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly time?: Maybe<Datetime>;
  readonly status: OrderRefundDeductedStatus;
  readonly merchantAmount?: Maybe<CurrencyValue>;
};

export type OrderRefundPaymentSchemaMerchantAmountArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
  includeWishpostFee?: Maybe<Scalars["Boolean"]>;
};

export type OrderRefundReasonSchema = {
  readonly __typename?: "OrderRefundReasonSchema";
  readonly reason: RefundReasonCategory;
  readonly text?: Maybe<Scalars["String"]>;
};

export type OrderReportReasonSchema = {
  readonly __typename?: "OrderReportReasonSchema";
  readonly reportOrderReason: ReportOrderReasons;
  readonly reportOrderReasonText: Scalars["String"];
};

export type OrderReturnLabelFeeSchema = {
  readonly __typename?: "OrderReturnLabelFeeSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly amount: CurrencyValue;
};

export type OrderReturnLabelFeeSchemaAmountArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type OrderReturnsSchema = {
  readonly __typename?: "OrderReturnsSchema";
  readonly canOpenReturnDispute: Scalars["Boolean"];
};

export type OrderRevShareProductCategory =
  | "APPAREL_ACCESSORY"
  | "HOUSEHOLD"
  | "WATCH"
  | "JEWELRY_AND_ACCESSORY"
  | "OTHER"
  | "ELECTRONICS"
  | "CLOTHING"
  | "SEX_TOY"
  | "SHOES";

export type OrderSalesTaxDetailsSchema = {
  readonly __typename?: "OrderSalesTaxDetailsSchema";
  readonly netTax: CurrencyValue;
  readonly salesTax: CurrencyValue;
  readonly refundedTax: CurrencyValue;
  readonly items: ReadonlyArray<OrderTaxItemSchema>;
  readonly remitTypes: ReadonlyArray<CommerceTransactionTaxRemitType>;
  readonly itemCount: Scalars["Int"];
  readonly authorityCountry?: Maybe<Country>;
};

export type OrderSalesTaxDetailsSchemaNetTaxArgs = {
  remitType?: Maybe<CommerceTransactionTaxRemitType>;
  inMerchantCurrency?: Maybe<Scalars["Boolean"]>;
  targetCurrency?: Maybe<TaxTargetCurrency>;
};

export type OrderSalesTaxDetailsSchemaSalesTaxArgs = {
  remitType?: Maybe<CommerceTransactionTaxRemitType>;
  inMerchantCurrency?: Maybe<Scalars["Boolean"]>;
  eventTypes?: Maybe<ReadonlyArray<CommerceTransactionTaxEventType>>;
  targetCurrency?: Maybe<TaxTargetCurrency>;
};

export type OrderSalesTaxDetailsSchemaRefundedTaxArgs = {
  remitType?: Maybe<CommerceTransactionTaxRemitType>;
  inMerchantCurrency?: Maybe<Scalars["Boolean"]>;
  targetCurrency?: Maybe<TaxTargetCurrency>;
};

export type OrderSalesTaxDetailsSchemaItemsArgs = {
  remitType?: Maybe<CommerceTransactionTaxRemitType>;
};

export type OrderSchema = {
  readonly __typename?: "OrderSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly transactionId?: Maybe<Scalars["ObjectIdType"]>;
  readonly merchantId: Scalars["ObjectIdType"];
  readonly merchantPaymentStatus: MerchantPaymentStatus;
  readonly merchantPaymentId?: Maybe<Scalars["ObjectIdType"]>;
  readonly merchantPaymentTime?: Maybe<Datetime>;
  readonly paidAmount: CurrencyValue;
  readonly orderTime?: Maybe<Datetime>;
  readonly releasedTime?: Maybe<Datetime>;
  readonly state: CommerceTransactionState;
  readonly merchantTotal: CurrencyValue;
  readonly merchantTotalAfterMfpDiscount: CurrencyValue;
  readonly totalCost: CurrencyValue;
  readonly priceCost: CurrencyValue;
  readonly hoursLeftToFulfill?: Maybe<Scalars["Int"]>;
  readonly paymentStatus: OrderLogicalPaymentState;
  readonly shippingDetails?: Maybe<ShippingDetailsSchema>;
  readonly variation?: Maybe<VariationSchema>;
  readonly product?: Maybe<ProductSchema>;
  readonly productName: Scalars["String"];
  readonly warehouse?: Maybe<MerchantWarehouseSchema>;
  readonly quantity: Scalars["Int"];
  readonly requiresConfirmedDelivery: Scalars["Boolean"];
  readonly isFbwFastPayment: Scalars["Boolean"];
  readonly isTopStandingMerchant: Scalars["Boolean"];
  readonly isExpeditedPolicy: Scalars["Boolean"];
  readonly isWishLocal: Scalars["Boolean"];
  readonly removedFromAplusTime?: Maybe<Datetime>;
  readonly userReceivedTime?: Maybe<Datetime>;
  readonly availableShippingProviders: ReadonlyArray<ShippingProviderSchema>;
  readonly shippingProviderId?: Maybe<Scalars["Int"]>;
  readonly acceptableShippingOrigins: ReadonlyArray<Country>;
  readonly shippingOrigin?: Maybe<Country>;
  readonly shippingOriginAddress?: Maybe<AddressSchema>;
  readonly tax?: Maybe<OrderTaxSchema>;
  readonly productId: Scalars["ObjectIdType"];
  readonly skuAtPurchaseTime: Scalars["String"];
  readonly sizeAtPurchaseTime?: Maybe<Scalars["String"]>;
  readonly colorAtPurchaseTime?: Maybe<Scalars["String"]>;
  readonly canRefund: Scalars["Boolean"];
  readonly canEditShippingAddress: Scalars["Boolean"];
  readonly isProcessing: Scalars["Boolean"];
  readonly isWishExpress: Scalars["Boolean"];
  readonly shouldDisplayDeliveryStatus: Scalars["Boolean"];
  readonly isStreamline: Scalars["Boolean"];
  readonly warehouseFulfillmentPolicyInfo?: Maybe<OrderWfpInfoSchema>;
  readonly specialPrograms: ReadonlyArray<SpecialOrderProgramSchema>;
  readonly shopifyDetails?: Maybe<OrderShopifyDetailsSchema>;
  readonly deliveryDeadline?: Maybe<Datetime>;
  readonly reReleasedTime?: Maybe<Datetime>;
  readonly trackingCancelledDate?: Maybe<Datetime>;
  readonly validRefundReasons: ReadonlyArray<OrderRefundReasonSchema>;
  readonly isAdvancedLogistics: Scalars["Boolean"];
  readonly isCombinedOrder: Scalars["Boolean"];
  readonly isRemovedFromAdvancedLogistics: Scalars["Boolean"];
  readonly isUnityOrder: Scalars["Boolean"];
  readonly initialWishpostShipping?: Maybe<CurrencyValue>;
  readonly estimatedWishpostShipping?: Maybe<CurrencyValue>;
  readonly unityWishpostShipping?: Maybe<CurrencyValue>;
  readonly wishpostShippingUpdates: ReadonlyArray<WishPostShippingUpdatesSchema>;
  readonly shippedDate?: Maybe<Datetime>;
  readonly hasShipped: Scalars["Boolean"];
  readonly refundedTime?: Maybe<Datetime>;
  readonly legacyRefundSource?: Maybe<LegacyRefundSource>;
  readonly isBlueFusion: Scalars["Boolean"];
  readonly isStoreUploaded: Scalars["Boolean"];
  readonly isPickupNow: Scalars["Boolean"];
  readonly merchantPrice: CurrencyValue;
  readonly merchantPriceAfterMfpDiscount: CurrencyValue;
  readonly merchantShipping: CurrencyValue;
  readonly merchantShippingAfterMfpDiscount: CurrencyValue;
  readonly shippingCost: CurrencyValue;
  readonly warehouseId?: Maybe<Scalars["String"]>;
  readonly limboState: OrderLimboState;
  readonly merchantCurrencyAtPurchaseTime: PaymentCurrencyCode;
  readonly customerPaidCurrency: Scalars["String"];
  readonly combinedOrderId?: Maybe<Scalars["ObjectIdType"]>;
  readonly chargeback: Scalars["Boolean"];
  readonly rebates?: Maybe<ReadonlyArray<OrderRebateSchema>>;
  readonly fbwDetails?: Maybe<OrderFbwDetailsSchema>;
  readonly returnLabelFee?: Maybe<OrderReturnLabelFeeSchema>;
  readonly returnDetailsId?: Maybe<Scalars["ObjectIdType"]>;
  readonly trackingDispute?: Maybe<TrackingDisputeSchema>;
  readonly cartPrice?: Maybe<CartPriceDetailSchema>;
  readonly requiresDeliveredDutyPaid: Scalars["Boolean"];
  readonly inRefundLimbo: Scalars["Boolean"];
  readonly wishExpressExtensionDays: Scalars["Int"];
  readonly isRouted: Scalars["Boolean"];
  readonly isFreeShippingEligible: Scalars["Boolean"];
  readonly routedTo?: Maybe<OrderSchema>;
  readonly confirmedDelivered: Scalars["Boolean"];
  readonly canModifyTrackingInfo: Scalars["Boolean"];
  readonly wasDeliveredOnTime?: Maybe<Scalars["Boolean"]>;
  readonly ttd?: Maybe<Scalars["Int"]>;
  readonly ttdBusinessDays?: Maybe<Scalars["Int"]>;
  readonly expectedTtdBusinessDays?: Maybe<Scalars["Int"]>;
  readonly expectedDeliveryDate?: Maybe<Datetime>;
  readonly isInIncentiveProgram: Scalars["Boolean"];
  readonly isShippedWithQualifiedDadaCarrier: Scalars["Boolean"];
  readonly isEligibleToShipWithWps: Scalars["Boolean"];
  readonly wpsFulfillment?: Maybe<WpsFulfillmentInfoSchema>;
  readonly epc?: Maybe<OrderEpcInfoSchema>;
  readonly advancedLogistics?: Maybe<OrderAdvancedLogisticsInfoSchema>;
  readonly returns?: Maybe<OrderReturnsSchema>;
  readonly supportTicket?: Maybe<CustomerSupportTicket>;
  readonly ukDetails?: Maybe<OrderUkFulfillSchema>;
  readonly norwayDetails?: Maybe<OrderNoFulfillSchema>;
  readonly packageOverviewDocumentUrl?: Maybe<Scalars["String"]>;
  readonly shippingEstimate?: Maybe<OrderShippingEstimate>;
  readonly canRequestAddressVerification: Scalars["Boolean"];
  readonly canUploadDeliveryConfirmation: Scalars["Boolean"];
  readonly routingOriginalOrderId?: Maybe<Scalars["ObjectIdType"]>;
  readonly canShowCarrierTier: Scalars["Boolean"];
  readonly customerIdentifyInfo?: Maybe<CustomerIdentityInfo>;
  readonly tracking?: Maybe<OrderTrackingInfoSchema>;
  readonly pastTracking?: Maybe<PastOrderTrackingInfoSchema>;
  readonly penalties: ReadonlyArray<PenaltySchema>;
  readonly infractions: ReadonlyArray<MerchantWarningSchema>;
  readonly badges: ReadonlyArray<OrderBadge>;
  readonly isNewRefund: Scalars["Boolean"];
  readonly refundItems?: Maybe<ReadonlyArray<OrderRefundItemSchema>>;
  readonly refundItemsSummary?: Maybe<OrderRefundItemsSummarySchema>;
  readonly client?: Maybe<CommerceTransactionClient>;
  readonly estimatedShippingTimeline?: Maybe<OrderEstimatedShippingTimelineSchema>;
  readonly updatedRevShare?: Maybe<Scalars["Float"]>;
  readonly originalRevShare?: Maybe<Scalars["Float"]>;
  readonly merchantCommissionFees?: Maybe<CurrencyValue>;
  readonly showMerchantCommissionFees?: Maybe<Scalars["Boolean"]>;
  readonly oneoffPayment?: Maybe<MerchantOneoffPaymentSchema>;
  readonly productCategoryDispute?: Maybe<ProductCategoryDisputeSchema>;
  readonly revShare: RevShareInfoSchema;
  readonly counterfeitRefundWarningId?: Maybe<Scalars["ObjectIdType"]>;
  readonly withholdWarningId?: Maybe<Scalars["ObjectIdType"]>;
  readonly withholdReasonText?: Maybe<Scalars["String"]>;
  readonly warehouseShippingType?: Maybe<OrderWarehouseShippingType>;
  readonly customer: CustomerSchema;
  readonly showAplusShippingAddressTooltip: Scalars["Boolean"];
  readonly merchantFundedPromotions?: Maybe<
    ReadonlyArray<OrderMfpCampaignSchema>
  >;
  readonly returnRequest?: Maybe<ReturnRequestSchema>;
};

export type OrderSchemaAvailableShippingProvidersArgs = {
  originCountryCode: CountryCode;
};

export type OrderSchemaMerchantPriceArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type OrderSchemaMerchantShippingArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type OrderSchemaShippingCostArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type OrderSchemaWasDeliveredOnTimeArgs = {
  criteria?: Maybe<OrderOnTimeDeliveryCriteria>;
};

export type OrdersCsvDownload = {
  readonly __typename?: "OrdersCsvDownload";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type OrdersCsvDownloadInput = {
  readonly query?: Maybe<Scalars["String"]>;
  readonly searchType?: Maybe<OrderHistorySearchType>;
  readonly offset?: Maybe<Scalars["Int"]>;
  readonly sort?: Maybe<OrderHistorySort>;
  readonly filter?: Maybe<CsvExportFilterType>;
  readonly startDate: DatetimeInput;
  readonly endDate: DatetimeInput;
  readonly wishExpressOnly?: Maybe<Scalars["Boolean"]>;
};

export type OrderShippingEstimate = {
  readonly __typename?: "OrderShippingEstimate";
  readonly minTime?: Maybe<Timedelta>;
  readonly maxTime?: Maybe<Timedelta>;
};

export type OrderShopifyDetailsSchema = {
  readonly __typename?: "OrderShopifyDetailsSchema";
  readonly shopifyOrderId: Scalars["String"];
};

export type OrderTaxItemSchema = {
  readonly __typename?: "OrderTaxItemSchema";
  readonly id: Scalars["String"];
  readonly createdTime: Datetime;
  readonly transactionId: Scalars["ObjectIdType"];
  readonly variationId: Scalars["ObjectIdType"];
  readonly orderId: Scalars["ObjectIdType"];
  readonly refundItemId?: Maybe<Scalars["ObjectIdType"]>;
  readonly taxType: TaxType;
  readonly eventType: CommerceTransactionTaxEventType;
  readonly remitType: CommerceTransactionTaxRemitType;
  readonly isRefund: Scalars["Boolean"];
  readonly isSale: Scalars["Boolean"];
  readonly quantity: Scalars["Int"];
  readonly grossAmount: CurrencyValue;
  readonly taxableAmount: CurrencyValue;
  readonly taxRate: Scalars["Float"];
  readonly taxAmount: CurrencyValue;
  readonly exemptAmount?: Maybe<CurrencyValue>;
  readonly authority: TaxAuthoritySchema;
  readonly taxableAddress: AddressSchema;
};

export type OrderTaxSchema = {
  readonly __typename?: "OrderTaxSchema";
  readonly norwayVatNumber?: Maybe<Scalars["String"]>;
  readonly salesTax: OrderSalesTaxDetailsSchema;
  readonly isVatOrder?: Maybe<Scalars["Boolean"]>;
  readonly euVat?: Maybe<EuvatSchema>;
  readonly isWishReseller: Scalars["Boolean"];
};

export type OrderTrackingInfoSchema = {
  readonly __typename?: "OrderTrackingInfoSchema";
  readonly confirmedFulfillmentDate?: Maybe<Datetime>;
  readonly deliveredDate?: Maybe<Datetime>;
  readonly isTrackingConfirmed: Scalars["Boolean"];
  readonly checkpoints?: Maybe<ReadonlyArray<TrackingCheckpointSchema>>;
  readonly carrierTier?: Maybe<OrderCarrierTier>;
  readonly wishReceivedShippedTime?: Maybe<Datetime>;
  readonly confirmedDeliveredTime?: Maybe<Datetime>;
  readonly isFakeTrackingOrder: Scalars["Boolean"];
  readonly warehouseArrivalTime?: Maybe<Datetime>;
  readonly disputeConfirmedTime?: Maybe<Datetime>;
  readonly disputeDeliveredTime?: Maybe<Datetime>;
  readonly disputeCarrierTier?: Maybe<OrderCarrierTier>;
};

export type OrderUkFulfillSchema = {
  readonly __typename?: "OrderUKFulfillSchema";
  readonly isBoundOrder: Scalars["Boolean"];
};

export type OrderWarehouseShippingType =
  | "MERCHANT_TTD_13_DAY"
  | "REGULAR"
  | "MERCHANT_TTD_40_DAY"
  | "MERCHANT_TTD_38_DAY"
  | "MERCHANT_TTD_3_DAY"
  | "MERCHANT_TTD_17_DAY"
  | "MERCHANT_TTD_20_DAY"
  | "MERCHANT_TTD_7_DAY"
  | "MERCHANT_TTD_35_DAY"
  | "MERCHANT_TTD_44_DAY"
  | "MERCHANT_TTD_23_DAY"
  | "WISH_EXPRESS_2_DAY"
  | "MERCHANT_TTD_27_DAY"
  | "FBW_V1_WLC"
  | "WISH_EXPRESS"
  | "MERCHANT_TTD_19_DAY"
  | "MERCHANT_TTD_9_DAY"
  | "WISH_BLUE"
  | "MERCHANT_TTD_15_DAY"
  | "MERCHANT_TTD_25_DAY"
  | "MERCHANT_TTD_31_DAY"
  | "FBW_V2_REGULAR"
  | "MERCHANT_TTD_11_DAY"
  | "MERCHANT_TTD_16_DAY"
  | "MERCHANT_TTD_33_DAY"
  | "MERCHANT_TTD_21_DAY"
  | "MERCHANT_TTD_12_DAY"
  | "MERCHANT_TTD_42_DAY"
  | "MERCHANT_TTD_4_DAY"
  | "MERCHANT_TTD_41_DAY"
  | "FBW_V2"
  | "MERCHANT_TTD_45_DAY"
  | "MERCHANT_TTD_37_DAY"
  | "FBW_V1"
  | "MERCHANT_TTD_39_DAY"
  | "MERCHANT_TTD_2_DAY"
  | "MERCHANT_TTD_22_DAY"
  | "MERCHANT_TTD_18_DAY"
  | "MERCHANT_TTD_34_DAY"
  | "WISH_EXPRESS_7_DAY"
  | "FBW_V2_CALCULATED"
  | "MERCHANT_TTD_30_DAY"
  | "MERCHANT_TTD_10_DAY"
  | "FBW_V2_EXPRESS"
  | "MERCHANT_TTD_43_DAY"
  | "MERCHANT_TTD_32_DAY"
  | "MERCHANT_TTD_26_DAY"
  | "MERCHANT_TTD_14_DAY"
  | "WAIT_AND_SAVE"
  | "MERCHANT_TTD_6_DAY"
  | "MERCHANT_TTD_8_DAY"
  | "MERCHANT_TTD_24_DAY"
  | "MERCHANT_TTD_36_DAY"
  | "MERCHANT_TTD_28_DAY"
  | "MERCHANT_TTD_5_DAY"
  | "MERCHANT_TTD_29_DAY"
  | "MERCHANT_TTD_1_DAY";

export type OrderWfpInfoSchema = {
  readonly __typename?: "OrderWFPInfoSchema";
  readonly deliveryState: WfpOrderDeliveryState;
  readonly wishExpress?: Maybe<WishExpressInfoSchema>;
  readonly wfpWithholdReason?: Maybe<WfpWithholdReasonSchema>;
};

export type OtherCountriesShippingSetting = {
  readonly enabled: Scalars["Boolean"];
  readonly price: CurrencyInput;
};

export type PackageDimensionsInput = {
  readonly weight: WeightInput;
  readonly height?: Maybe<LengthInput>;
  readonly length?: Maybe<LengthInput>;
  readonly width?: Maybe<LengthInput>;
};

export type PartialRefundType =
  | "PRODUCT_PRICE"
  | "QUANTITY"
  | "PARTIAL_AMOUNT"
  | "PERCENTAGE";

export type PasswordEvaluation = {
  readonly __typename?: "PasswordEvaluation";
  readonly valid: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type PasswordMutations = {
  readonly __typename?: "PasswordMutations";
  readonly change?: Maybe<ChangePasswordMutation>;
};

export type PasswordMutationsChangeArgs = {
  input: ChangePasswordInput;
};

export type PastOrderTrackingInfoSchema = {
  readonly __typename?: "PastOrderTrackingInfoSchema";
  readonly tracking?: Maybe<OrderTrackingInfoSchema>;
  readonly provider?: Maybe<ShippingProviderSchema>;
  readonly lastUpdatedDate?: Maybe<Datetime>;
  readonly trackingId?: Maybe<Scalars["String"]>;
};

export type PayableCleanupInput = {
  readonly payableIds: ReadonlyArray<Scalars["String"]>;
  readonly payableTypes: ReadonlyArray<Scalars["String"]>;
  readonly validationId?: Maybe<Scalars["String"]>;
  readonly localCleanUp: Scalars["Boolean"];
};

export type PayableCleanupMutation = {
  readonly __typename?: "PayableCleanupMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type PayableInfoSchema = {
  readonly __typename?: "PayableInfoSchema";
  readonly orderPayables?: Maybe<ReadonlyArray<OrderSchema>>;
  readonly finePayables?: Maybe<ReadonlyArray<MerchantFineSchema>>;
  readonly oneoffPayables?: Maybe<ReadonlyArray<MerchantOneoffPaymentSchema>>;
  readonly validationResult?: Maybe<ReadonlyArray<ValidationResultSchema>>;
};

export type PayableInfoSchemaOrderPayablesArgs = {
  payableIds?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type PayableInfoSchemaFinePayablesArgs = {
  payableIds?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type PayableInfoSchemaOneoffPayablesArgs = {
  payableIds?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type PayableInfoSchemaValidationResultArgs = {
  validationId?: Maybe<Scalars["String"]>;
};

export type PayableValidationInput = {
  readonly payableIds: ReadonlyArray<Scalars["String"]>;
  readonly payableTypes: ReadonlyArray<Scalars["String"]>;
};

export type PayableValidationMutation = {
  readonly __typename?: "PayableValidationMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly validationId?: Maybe<Scalars["String"]>;
};

export type PaymentBusinessInfo = {
  readonly __typename?: "PaymentBusinessInfo";
  readonly name: Scalars["String"];
  readonly businessId: Scalars["String"];
};

export type PaymentCurrencyCode =
  | "JPY"
  | "USD"
  | "AUD"
  | "CHF"
  | "UAH"
  | "TRY"
  | "CNY"
  | "MXN"
  | "CZK"
  | "BRL"
  | "GBP"
  | "CAD"
  | "SEK"
  | "DKK"
  | "EUR";

export type PaymentPersonalInfo = {
  readonly __typename?: "PaymentPersonalInfo";
  readonly name: Scalars["String"];
  readonly id?: Maybe<Scalars["String"]>;
  readonly phoneNumber: Scalars["String"];
};

export type PaymentProvider = {
  readonly __typename?: "PaymentProvider";
  readonly logo: Scalars["String"];
  readonly name: Scalars["String"];
  readonly type: PayoutPaymentProviderType;
  readonly contactInfo?: Maybe<PaymentProviderContactInfo>;
};

export type PaymentProviderContactInfo = {
  readonly __typename?: "PaymentProviderContactInfo";
  readonly email: Scalars["String"];
  readonly phone?: Maybe<Scalars["String"]>;
  readonly website?: Maybe<Scalars["String"]>;
  readonly wechatUsername?: Maybe<Scalars["String"]>;
  readonly qqUserId?: Maybe<Scalars["String"]>;
};

export type PaymentType = "CREDIT" | "DEBIT";

export type PayoneerSignupMutation = {
  readonly __typename?: "PayoneerSignupMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly redirectUrl?: Maybe<Scalars["String"]>;
  readonly alreadyRegistered?: Maybe<Scalars["Boolean"]>;
};

export type PayoutPaymentProviderType =
  | "LIANLIAN"
  | "PAYONEER"
  | "UMPAY_ENTERPRISE"
  | "UMPAY"
  | "BILL"
  | "PAYPAL"
  | "PAYPAL_EEA"
  | "PINGPONG"
  | "PAYPAL_MERCH"
  | "WISHPAY"
  | "UMPAY2"
  | "CARDINFOLINK"
  | "ALLPAY"
  | "PAYECO2";

export type PenaltySchema = {
  readonly __typename?: "PenaltySchema";
  readonly reason: FineReason;
};

export type PermissionSchema = {
  readonly __typename?: "PermissionSchema";
  readonly id: PermissionType;
  readonly name: Scalars["String"];
  readonly description?: Maybe<Scalars["String"]>;
};

export type PermissionStatusType = "ASSIGNED" | "ASSIGNABLE" | "DEFAULT";

export type PermissionType =
  | "ADD_PRODUCTS"
  | "COUNTERFEIT_TAG"
  | "CAN_ACCESS_ONEOFF_API_GET_APPROVERS"
  | "CAN_CHECK_EXTERNAL_TRACKING"
  | "SHOW_SHIPPING_PROVIDERS"
  | "CAN_VIEW_ALL_INTERNAL_USERS"
  | "VIEW_TERM_OF_SERVICE_EPC_BILL_HOLD"
  | "REVIEW_ONEOFF_REQ_DISABLE_DYNAMIC_PRICING"
  | "EDIT_TAGGING_PERMISSIONS"
  | "CAN_ACT_ON_KR_MERCHANT"
  | "CAN_BE_ASSIGNED_MERCHANT_COUNTRY"
  | "CREATE_ADMIN_ACCOUNT"
  | "REVIEW_ONEOFF_REQ_SET_REV_SHARE"
  | "VIEW_PRODUCTS"
  | "IMAGE_CHANGE_AUDIT_TAG"
  | "CAN_MANAGE_US_BDS"
  | "VIEW_GS_MERCHANTS"
  | "BOOST"
  | "MANAGE_BRAND_PARTNERS"
  | "CREATE_B2B_SALE_FEE"
  | "CAN_REVIEW_CN_PAYMENT_REQUEST"
  | "CAN_ACCESS_ONEOFF_VIEW_ALL_REQUESTS"
  | "UPDATE_LOCAL_TO_LOCAL"
  | "CAN_ACCESS_ONEOFF_API_SAVE"
  | "CREATE_LEGAL_SETTLEMENT_FINE"
  | "CAN_PERFORM_CHARGEBACK_REVIEW"
  | "CAN_TOGGLE_ADMIN_EDIT_ON_ALL_USERS"
  | "VIEW_PENDING_SANCTION_SCREENING_HOLD"
  | "COUNTERFEIT_TAG_AUDIT_IN_HOUSE"
  | "CREATE_ATO_HOLD"
  | "SHOW_DETAIL_TAGGER_TEST_SPEC"
  | "CAN_ACCESS_CONFIRM_DELIVERED_CARRIER"
  | "SHOW_ORDER_PENALTIES"
  | "VIEW_LEGAL_INJUNCTION"
  | "VIEW_HIGH_IP_INFRINGEMENT_HOLD"
  | "CAN_MANAGE_MERCHANT_ACCOUNT_BALANCES"
  | "SUPPLY_CHAIN_FINANCE"
  | "CAN_GROUP_MERCHANTS"
  | "PROMO_TAG"
  | "TRIGGER_SELLER_PROFILE_REVERIFICATION"
  | "MANAGE_LEGAL_INJUNCTION"
  | "DEP_TRUE_BRAND_RESOLUTION_TAG"
  | "REVIEW_ONEOFF_REQ_ISSUE_PB_CREDITS_TO_SELF_INVENTORY_MERCHANTS"
  | "EDIT_MERCHANT_PERMISSIONS"
  | "CAN_SEND_SMS"
  | "MANAGE_TAX_ENROLLMENT"
  | "CREATE_DECEPTIVE_FULFILLMENT_FINE"
  | "CAN_CREATE_WECHAT_OFFICIAL_ACCOUNT_MENU"
  | "CREATE_ADMIN"
  | "CAN_ACT_ON_US_MERCHANT"
  | "EDIT_ORDERS"
  | "LISTING_REVIEW_TAG"
  | "LOGIN_TO_WISH_LOCAL"
  | "PRODUCT_RATING_IMAGE_MANUAL_TAG"
  | "CREATE_PUBLIC_MERCHANT_APP"
  | "MANAGE_ERP_PARTNERS"
  | "TAG_AUTHORIZATION"
  | "REVIEW_ONEOFF_REQ_WHITELIST_MERCHANTS"
  | "CAN_HANDLE_FRAUD_INFRACTION"
  | "FAST_QUEUE_TAGGING_JOBS"
  | "SUPPLY_CHAIN_MERCHANDISE"
  | "REVIEW_ONEOFF_REQ_SET_HEDGES"
  | "CAN_ACCESS_ONEOFF_PAGE_LIST"
  | "USER_GENERATED_PRODUCT_IMAGE_TAG"
  | "COMPLETE_AUTHENTIC_BRAND_SELLER_BADGE_APPLICATIONS"
  | "CAN_VIEW_TRANSACTION_DETAIL"
  | "MGC_IP_MANUAL_TAG"
  | "EDIT_ADMIN_PERMISSIONS"
  | "CAN_VIEW_BRAND_LIST"
  | "SHOW_PRODUCT_BOOST"
  | "SHOW_ALL_MERCHANT_PROFILES"
  | "REVIEW_COUNTERFEIT_INFRACTION"
  | "VIEW_OTHER_HOLD"
  | "SHOW_DETAIL_TAGGER_TEST_RESULT"
  | "MANAGE_FBW_ORDERS"
  | "VIEW_FRAUDULENT_ACTIVITES_HOLD"
  | "GET_PAYMENTS"
  | "CREATE_VARIATION"
  | "CAN_REVIEW_DISPUTES"
  | "DEP_IP_VIOLATION_TAG_RESOLUTION"
  | "CREATE_TAKEDOWN_REQUESTS"
  | "CAN_ACCESS_MANUAL_REVIEW_ONLY_TOOL"
  | "CREATE_PENDING_SANCTION_SCREENING_HOLD"
  | "CREATE_TRO_HOLD"
  | "CAN_ACT_ON_EU_MERCHANT"
  | "SHOW_COUNTERFEIT_TAGGER_TEST_RESULT"
  | "TAG_STATUS_CHECK"
  | "CAN_ACCESS_MERCHANT_RISK_REVIEW_OUTCOME_ONEOFF"
  | "VIEW_HOLDS_FOR_LOCAL_MERCHANTS"
  | "CREATE_LISTING_REVIEW_JOB"
  | "MANAGE_SHIPPING_SETTINGS"
  | "CAN_CREATE_USERS"
  | "DETAIL_TAG_MANUAL"
  | "ADD_SIZE_COLOR"
  | "UNDO_INFRACTION_ACTION"
  | "AUDIT_TAGGING_BY_TAGGERS"
  | "REMOVE_WISH_EXPRESS_PRODUCTS"
  | "VIEW_LOGICAL_TICKET_QUEUES"
  | "LISTING_REVIEW_TAG_RESOLUTION"
  | "CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_KR"
  | "YANWEN_LOGISTIC"
  | "SHIP_ORDERS"
  | "REVIEW_ONEOFF_REQ_TEMP_EXEMPT_PROMOTE_PRODUCT_POLICY"
  | "REVIEW_ONEOFF_REQ_MIGRATE_MERCHANT_CURRENCY"
  | "VIEW_SHIP_FRAUD_HOLD"
  | "CAN_VIEW_MERCHANT_IDS"
  | "EDIT_LOGICAL_TICKET_QUEUE_ASSIGNMENT"
  | "CAN_MANAGE_MY_MERCHANT"
  | "SEND_SYSTEM_UPDATE_TO_MERCHANTS"
  | "VIEW_TRUE_BRAND_DIRECTORY"
  | "EDIT_BD_PERMISSIONS"
  | "CAN_CREATE_BULK_ONEOFF_PAYMENTS"
  | "CS_REP_LEAD_STATS"
  | "EDIT_PRODUCTS"
  | "PROMO_MANUAL_TAG"
  | "VIEW_GLOBAL_LEADERBOARD"
  | "REVIEW_ONEOFF_REQ_ENABLE_DISABLE_CSP_FOR_ALL_ELIGIBLE_PRODUCTS"
  | "COUNTERFEIT_TAG_RESOLUTION"
  | "MANAGE_WHITE_GLOVE"
  | "CAN_VIEW_ORDERS"
  | "CAN_VIEW_CN_INFRACTIONS"
  | "CAN_GET_COLLECTIONBOOST"
  | "SYNC_SHOPIFY_PRODUCTS"
  | "SHOW_REFUND_PERFORMANCE"
  | "CAN_REVIEW_US_PAYMENT_REQUEST"
  | "CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_TW"
  | "SHOW_ORDERS"
  | "CAN_USE_TFA_ADMIN_TOOL"
  | "CAN_DOWNLOAD_ENTIRE_ORDER_HISTORY"
  | "DEP_BRAND_REVIEW_RESOLUTION_TAG"
  | "CAN_BE_VIEWED_BY_OUTSOURCE_MERCHANT"
  | "REQUEST_EARLY_PAYMENT"
  | "VIEW_BD_ANNOUNCEMENTS"
  | "SAFELIST_PRODUCTS"
  | "BOXC_LOGISTIC"
  | "REVIEW_ALL_INFRACTION"
  | "CAN_SEND_EMAIL"
  | "ESCALATE_TO_MERCHANT"
  | "ACCEPT_MERCHANT_TERMS"
  | "CREATE_INTERNAL_HOLD"
  | "SUPPLY_CHAIN_ADMIN"
  | "REVIEW_ONEOFF_REQ_ENABLE_DYNAMIC_PRICING"
  | "CAN_REVIEW_TRUE_BRAND_REQUEST"
  | "UPDATE_BLUE_STORE_ADVANCE"
  | "EDIT_MERCHANTS"
  | "CAN_ACT_ON_BR_MERCHANT"
  | "CAN_ACT_ON_ASIAN_MERCHANT"
  | "CAN_REVIEW_MERCHANT_INFO_ONLY"
  | "UPDATE_SANCTION_SCREENING_HITS"
  | "SHOW_STORE_ASSETS"
  | "CAN_HANDLE_ORDER_CHANGE_REQUEST"
  | "CAN_ACCESS_ONEOFF_REQ_TOOL"
  | "ACCESS_EXTERNAL_APIS"
  | "VIEW_TERM_OF_SERVICE_HOLD"
  | "CAN_REVIEW_UNSAFE"
  | "CAN_VIEW_TRACKING_DISPUTES"
  | "CAN_REVIEW_MERCHANTS"
  | "COUNTERFEIT_TAG_AUDIT"
  | "VIEW_FAKE_TRACKING_FINE"
  | "CAN_SEND_ANNOUNCEMENTS_AS_EDUCATION_TEAM"
  | "SHOW_PRODUCT_BRAND_DETECTION"
  | "TRIGGER_CN_VERIFICATION"
  | "CREATE_POLICY_VIOLATION_FINE"
  | "MANAGE_PRODUCT_GEOBLOCK"
  | "SHOW_MERCHANT_PROFILE"
  | "VIEW_DISBURSEMENT_INFO"
  | "CAN_VIEW_GS_MERCHANT_INFO"
  | "PRODUCT_CATEGORY_DISPUTE_EDIT"
  | "VIEW_JP_MERCHANTS"
  | "CAN_USE_TFA_BD_TOOL"
  | "SUPPLY_CHAIN_AP"
  | "CAN_MANAGE_SG_MERCHANT"
  | "LOGIN_AS_CS"
  | "VIEW_WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION"
  | "VIEW_MERCHANTS"
  | "CAN_ACCESS_IPV_DETECTION_EXTERNAL_V3_API"
  | "SHOW_TAKEDOWN_REQUESTS"
  | "CAN_BE_ASSIGNED_MANAGER"
  | "VALIDATE_PROVIDER_DISBURSEMENT"
  | "COUNTERFEIT_TAG_MANUAL"
  | "REVIEW_BRAND_AUTH"
  | "VIEW_INTERNAL_HOLD"
  | "CAN_MANAGE_JP_MERCHANT"
  | "RETURN_CENTER"
  | "VERIFY_WAREHOUSE_ONEOFF_REQ_APPROVER"
  | "CAN_REVIEW_EPC_APPLICATION"
  | "VIEW_MERCHANT_GAMING_REVIEW_TICKETS"
  | "CUSTOM_CHARTS"
  | "VIEW_KR_MERCHANTS"
  | "CAN_ACCESS_BLANKET_AUTHORIZATION"
  | "AUDIT_CS_TICKETS"
  | "MANAGE_BRAND_VIOLATION_REPORT"
  | "CAN_VIEW_ACCOUNT_BALANCE"
  | "SHOW_MERCHANT_TODO_ITEMS"
  | "MANAGE_STORE_FULFILLMENT"
  | "CAN_VIEW_DISABLED_INFO"
  | "CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_VIP"
  | "EDIT_FRAUD_TEAM_PERMISSIONS"
  | "VIEW_CUSTOMER_PROFILE_PAGE"
  | "CREATE_TERM_OF_SERVICE_EPC_BILL_HOLD"
  | "VIEW_WARNING_MANUAL_HOLD"
  | "CAN_UNENROLL_WHITE_GLOVE"
  | "SEND_SYSTEM_UPDATE_TO_BD"
  | "COUNTERFEIT_HELP_TAG"
  | "CAN_LOGIN_AS_FACTORY_MANAGERS"
  | "CAN_ACCESS_TRACKING_NUMBER_PAGE"
  | "CREATE_TRUE_TAG_ASSOCIATION"
  | "CAN_ACCESS_REFRESHING_TRACKING"
  | "CAN_VIEW_PRODUCT_STATUS"
  | "CAN_ACCESS_AUTH_BRAND_AUDIT"
  | "UPLOAD_PRODUCTS_CSV"
  | "CREATE_WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION"
  | "EXPORT_PRODUCT_DATA"
  | "CAN_EDIT_CANNED_RESPONSES"
  | "CAN_VIEW_EARLY_PAYMENT_RISK_CONTROL"
  | "CAN_REVIEW_TRACKING_DISPUTES"
  | "CREATE_TERM_OF_SERVICE_HOLD"
  | "RAMP_DOWN_MERCHANT_IMPRESSIONS"
  | "RECYCLE_TRACKING"
  | "CREATE_ONEOFF_FINE"
  | "VIEW_MISSING_CA_TAX_SETTING_HOLD"
  | "VIEW_EU_MERCHANTS"
  | "PRODUCT_RATING_VIDEO_AUDIT_TAG"
  | "CREATE_INVALID_REGISTRATION_INFO_HOLD"
  | "TRUE_BRAND_TAG"
  | "VIEW_WITHHOLD_FUND"
  | "EDIT_MERCHANT_WARNING_AUDIT_STATUS"
  | "CAN_APPROVE_ANY_MERCHANT"
  | "VIEW_LEGAL_SETTLEMENT_FINE"
  | "SUPPLY_CHAIN_SOURCING"
  | "EDIT_QA_PERMISSIONS"
  | "REVIEW_ONEOFF_REQ_BAN_MERCHANTS"
  | "CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_SG"
  | "EDIT_ACCOUNT_NAME"
  | "CAN_GET_EARLY_PAYMENT_AMOUNT_AVAILABLE"
  | "CAN_CREATE_ONEOFF_PAYMENT"
  | "DOWNLOAD_EXPORT"
  | "SEND_SYSTEM_UPDATE_TO_TAGGERS"
  | "MGC_IP_TAG"
  | "CAN_TOGGLE_ADMIN_EDIT_ON_STORE_USERS"
  | "SUPPLY_CHAIN_READ_ONLY"
  | "EDIT_LOGICAL_TICKET_QUEUE"
  | "PRODUCT_RATING_IMAGE_TAG"
  | "MODIFY_MERCHANT_FINES"
  | "REVIEW_ONEOFF_REQ_ENROLL_MERCHANT_PLUS"
  | "CAN_VIEW_ORDER_SHIPPING_ESTIMATE"
  | "VIEW_PAYMENT_HISTORY"
  | "WISHPOST"
  | "VIEW_LCL_FBW_FEE"
  | "CAN_ADMIN_CANNED_RESPONSES"
  | "CAN_EDIT_TAGGING_TESTS"
  | "MGC_CONTENT_TAG"
  | "CREATE_TEAM_MEMBER"
  | "CAN_VIEW_BRANDS"
  | "CAN_AUDIT_REVIEW_RESULT"
  | "VIEW_PAYMENT_SETTINGS"
  | "EXT_CS_CAN_REFUND_ESCALATION"
  | "REVIEW_ONEOFF_REQ_VERIFY_WAREHOUSE"
  | "PRODUCT_RATING_IMAGE_AUDIT_TAG"
  | "SUPPLY_CHAIN_PAYMENT_INITIATED"
  | "UPDATE_PAYMENT_PERSONAL_SETTINGS"
  | "CAN_MANAGE_BLUE_AMBASSADORS"
  | "ENABLE_DISABLE_ALL_PRODUCTS"
  | "SHOW_PRODUCTS"
  | "MGC_CONTENT_MANUAL_TAG"
  | "FBW_TICKETS"
  | "SHOW_MERCHANT_ASSETS"
  | "REVIEW_ONEOFF_REQ_REMOVE_MAX_TTD_ENTENSION"
  | "TRIGGER_KYC_REVERIFICATION"
  | "EXPORT_ORDERS"
  | "SHOW_MERCHANT_STATS"
  | "VIEW_WARNING_BAN_HOLD"
  | "SUPPLY_CHAIN_MAINTAINER"
  | "VIEW_ATO_HOLD"
  | "VIEW_B2B_SALE_FEE"
  | "CAN_CONVERT_ALL_USERS"
  | "FAST_QUEUE_TAGGING_JOBS_HIGHEST_PRIORITY"
  | "VIEW_CN_MERCHANTS"
  | "CREATE_ONEOFF_REQUEST_EMAIL_REPORT"
  | "CAN_ACCESS_UPDATE_TRACKING"
  | "BRAND_REVIEW_TAG"
  | "CREATE_SHIP_FRAUD_HOLD"
  | "EDIT_CS_REPS"
  | "AUDIT_ALL_CS_TEAMS"
  | "CAN_MANAGE_GS_MERCHANT"
  | "REVIEW_ONEOFF_REQ_OVERRIDE_MERCHANT_COUNTRY"
  | "CAN_MANAGE_BRAND_LIST"
  | "CAN_LOGIN_AS_OTHER_USER"
  | "GENDER_TAG"
  | "CAN_PERFORM_ACTION_ON_WISH_USERS"
  | "PROFILE_PICTURE_TAG"
  | "CREATE_OTHER_HOLD"
  | "INAPPROPRIATE_IN_HOUSE_TAG"
  | "CAN_ACCESS_V2_HOMEPAGE"
  | "MANAGE_SIZE_CHART"
  | "VIEW_TRO_TOOLS"
  | "FULFILLED_BY_WISH"
  | "CAN_REVIEW_EU_MERCHANTS"
  | "WISH_BLUE_ADMIN"
  | "IMAGE_CHANGE_RESOLUTION_TAG"
  | "VIEW_TAKEDOWN_REQUESTS"
  | "CAN_VIEW_BAN_INFRACTION"
  | "REVIEW_ONEOFF_REQ_ENABLE_COLLECTIONBOOST"
  | "REVIEW_ONEOFF_REQ_ISSUE_PB_CREDITS"
  | "MODIFY_MERCHANT_PAYMENT_HOLDS"
  | "CREATE_FAKE_TRACKING_FINE"
  | "REMOVE_INFRACTION_FINES"
  | "CAN_ACT_ON_MX_MERCHANT"
  | "CAN_REVIEW_PRODUCT_CATEGORY_DISPUTE"
  | "DETAIL_TAG"
  | "CREATE_HIGH_GAMING_GMV_HOLD"
  | "SUPPLY_CHAIN_PREVALID_TABLE_MAINTAINER"
  | "CAN_LOGIN_WITH_CREDENTIALS"
  | "CREATE_FAILED_IDENTITY_REVERIFICATION_HOLD"
  | "VALIDATE_COLLECTIONBOOST_COLLECTIONS"
  | "EDIT_MERCHANT_SUPPORT_PERMISSIONS"
  | "VIEW_ONEOFF_PAYMENT_DETAIL"
  | "CAN_VIEW_HR_RELATED_USERS"
  | "SUPPLY_CHAIN_DATA"
  | "CAN_VIEW_ALL_MERCHANT_FILES"
  | "CAN_MANAGE_KR_MERCHANT"
  | "CAN_INVITE_CN_MERCHANTS"
  | "HANDLE_ALL_TICKETS"
  | "WISH_BLUE_STORE_SUPPORT_PROFILE"
  | "UPDATE_PAYMENT_SETTINGS"
  | "EDIT_LEGAL_TEAM_PERMISSIONS"
  | "CREATE_RESPOND_TO_ADMIN_HOLD"
  | "DISPUTE_CURRENCY"
  | "VIEW_POLICY_VIOLATION_FINE"
  | "REVIEW_BULK_TRANSACTION_REVERSAL"
  | "LISTING_REVIEW_AUDIT_IN_HOUSE_TAG"
  | "LOGIN_WITH_OAUTH"
  | "RESTRICT_REVIEW_CN_MERCHANTS"
  | "CAN_EDIT_SHIP_TO_STORE_PACKAGE"
  | "CNY_PROMOTED_DISABLE"
  | "CREATE_PRODUCT"
  | "REVIEW_ONEOFF_REQ_MERCHANT_EU_ENTITY"
  | "CHANGE_LANGUAGE"
  | "REVIEW_ONEOFF_REQ_CREATE_PB_SHADOW_CAMPAIGNS"
  | "HANDLE_CS_TICKETS"
  | "DETAIL_TAG_AUDIT"
  | "RESTRICTED_PRODUCT_REQUEST_EDITION"
  | "IP_VIOLATION_AUDIT_IN_HOUSE_TAG"
  | "REVIEW_ONEOFF_REQ_ENROLL_PRICE_DROP"
  | "RESTRICT_VACATION_MODE_ACCESS"
  | "REVERSE_ONEOFF_FINES"
  | "CAN_ACCESS_ONEOFF_API_REVIEW"
  | "REVIEW_ONEOFF_REQ_ISSUE_CB_CREDITS"
  | "CAN_USE_BP_DATA_TOOL"
  | "CAN_ACCESS_ONEOFF_INJUNCTION_REQUEST"
  | "SHOW_ACCENTURE_TAGGERS"
  | "CAN_ACCESS_ONEOFF_API_LIST"
  | "CAN_VIEW_BLANKET_AUTHORIZATION_STATUS"
  | "VIEW_DECEPTIVE_FULFILLMENT_FINE"
  | "CAN_PROVIDE_MERCHANT_CHAT_SUPPORT"
  | "CAN_VIEW_WISH_USERS"
  | "CS_REP_STATS"
  | "FBW2"
  | "CHANGE_SELLER_PROFILE"
  | "SHOW_ALL_REFUND_PERFORMANCES"
  | "CAN_EDIT_EXTERNAL_FRAUD_TEAM_ACCESS"
  | "CREATE_WITHHOLD_FUND"
  | "VIEW_WISHPOST_NEGATIVE_BALANCE_HOLD"
  | "DEP_HANDLE_MERCHANT_BENEFITS"
  | "VIEW_TRO_HOLD"
  | "IP_VIOLATION_MANUAL_TAG"
  | "REVIEW_ONEOFF_REQ_REJECT_COLLECTIONBOOST_COLLECTION"
  | "CAN_MANAGE_ROLES_FOR_ALL_USERS"
  | "IMAGE_CHANGE_TAG"
  | "REVIEW_ONEOFF_REQ_GIVE_BD_ACCESS"
  | "CAN_ACCESS_UPDATE_CONFIRMED"
  | "CAN_REVERSE_FINE"
  | "VIEW_RESTRICTED_PRODUCT_REQUEST"
  | "IP_VIOLATION_AUDIT_TAG"
  | "GENDER_AUDIT_TAG"
  | "CAN_ISSUE_PB_CREDITS"
  | "CAN_ACCESS_ONEOFF_API_GET_FIELDS_INFO"
  | "CAN_VIEW_SHIP_TO_STORE_PACKAGE"
  | "CAN_TRANSFER_ANY_MERCHANTS"
  | "CAN_CHECK_INTERNAL_TRACKING"
  | "CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_MY"
  | "CAN_MANAGE_PERMISSIONS_FOR_ALL_USERS"
  | "CAN_RECEIVE_SMS_ON_QA_ENV"
  | "VIEW_RESPOND_TO_ADMIN_HOLD"
  | "CAN_VIEW_MERCHANT_GROUP"
  | "VIEW_AUTHENTIC_BRAND_SELLER_BADGE_APPLICATIONS"
  | "CAN_ACCESS_SHIPPING_PROVIDER"
  | "CAN_HANDLE_LIVE_CHAT"
  | "CHANGE_EMAIL_SETTINGS"
  | "EDIT_PROMOTED_PRODUCTS"
  | "CAN_MANAGE_CHINESE_BDS"
  | "CAN_TOGGLE_MERCHANT_AUTOBAN"
  | "VIEW_ONEOFF_FINE"
  | "ENABLE_DISABLE_API_PARTNERS"
  | "EUB_LOGISTIC"
  | "MANAGE_DELIVERED_CARRIER"
  | "IP_VIOLATION_TAG"
  | "CAN_VIEW_FRAUD_INFRACTION_QUEUE"
  | "WISH_BLUE_AMBASSADOR_PROFILE"
  | "RESTRICT_REVIEW_US_MERCHANTS"
  | "EDIT_CONTENT_TEAM_PERMISSIONS"
  | "CREATE_LCL_FBW_FEE"
  | "AUDIT_TICKET_REPLIES"
  | "VIEW_PRODUCT_PROFILE_PAGE"
  | "TRUE_BRAND_ESCALATION_TAG"
  | "VIEW_ALL_MERCHANTS"
  | "CAN_APPROVE_PRODUCT_BOOST_MERCHANTS"
  | "HOVERBOARD"
  | "UPDATE_TRACKING"
  | "EARLY_PAYMENT_RISK_CONTROL"
  | "CAN_VIEW_EPC_APPLICATION"
  | "EDIT_BRAND_PROTECTION_PERMISSIONS"
  | "SEND_SYSTEM_UPDATE_TO_FRAUD"
  | "SHOW_TAGGING_TEST_HISTORY"
  | "REVIEW_PRODUCT_EDIT_REQUESTS"
  | "CAN_LOGIN_AS_ADMIN"
  | "VIEW_FAILED_IDENTITY_REVERIFICATION_HOLD"
  | "API_ACCESS"
  | "TRIGGER_EARLY_SELLER_VERIFICATION"
  | "REPORTED_WISH_LOCAL_DETAIL_TAG"
  | "CAN_ACCESS_GATEKEEPER_PAYMENT_HOLD_ONEOFF"
  | "CREATE_BATCH_WARNING"
  | "EDIT_PRODUCT_LOGISTIC_METADATA"
  | "GENDER_TAG_MANUAL"
  | "EDIT_LOGICAL_TICKET_QUEUE_LIMITED"
  | "REVIEW_ONEOFF_REQ_ENROLL_PB_KICKSTART"
  | "LISTING_REVIEW_AUDIT_TAG"
  | "SEND_BD_ANNOUNCEMENTS"
  | "CAN_ACCESS_ORDERS_MANAGER"
  | "CAN_CREATE_BLUE_ADMIN"
  | "CAN_VIEW_CS_REPS"
  | "CAN_ALLOW_REPURCHASE"
  | "CAN_VIEW_US_BD_STATS"
  | "SEND_SYSTEM_UPDATE_TO_CS"
  | "SHOW_SEARCH_TOOL"
  | "CAN_VIEW_VMPI_ALERT"
  | "CAN_UPDATE_COLLECTIONBOOST"
  | "WISH_LOCAL_DETAIL_TAG"
  | "CAN_PERFORM_CHARGEBACK_REVIEW_AUDIT"
  | "CAN_USE_WISH_EXPRESS_SUPPORT_FEATURE"
  | "CREATE_HIGH_IP_INFRINGEMENT_HOLD"
  | "CAN_ACCESS_ONEOFF_PAGE_REVIEW"
  | "CAN_VIEW_FRAUD_WORKERS"
  | "VIEW_PAYMENT_DETAIL"
  | "SHOW_PRODUCT_LOGISTIC_METADATA"
  | "LISTING_REVIEW_TAG_IN_HOUSE"
  | "PRODUCT_RATING_TAG"
  | "CAN_ACT_ON_CN_MERCHANT"
  | "CAN_ACCESS_WISHPOST_EXTERNAL_V3_API"
  | "AUTHORIZED_MERCHANT"
  | "CAN_SEND_WECHAT_MESSAGE"
  | "CAN_VIEW_REGULATOR_REPORT_FILES"
  | "CREATE_FRAUDULENT_ACTIVITES_HOLD"
  | "CAN_REVIEW_RESPONSIBLE_PERSON"
  | "ACCESS_PSP_SIGN_UP"
  | "PRODUCT_RATING_VIDEO_TAG"
  | "CAN_MANAGE_BRAND_TO_PRODUCT"
  | "CAN_LOGIN_AS_BD"
  | "CAN_ACCESS_ONEOFF_PAGE_SUBMIT"
  | "INITIATE_PAYMENT_PROVIDER_SIGN_UP"
  | "SHOW_STORE_USERS"
  | "AUDIT_ALL_TEAM"
  | "CAN_UNCOMBINE_APLUS_ORDERS"
  | "CAN_VIEW_BDS"
  | "VIEW_DISBURSEMENT_PAGE"
  | "UPDATE_PRODUCTS"
  | "EXPORT_PRODUCT_STAT"
  | "WISH_LOCAL_TAG_STATUS_CHECK"
  | "VIEW_ACTION_RULES"
  | "CREATE_WISHPOST_NEGATIVE_BALANCE_HOLD"
  | "SHOW_COUNTERFEIT_TAGGER_TEST_SPEC"
  | "REVIEW_ONEOFF_REQ_CREATE_NEW_MAX_TTD_EXTENSION"
  | "REVIEW_ONEOFF_REQ_REFUND_PB_BALANCE"
  | "CAN_VIEW_FACTORY_LIST"
  | "CREATE_TAG_JOB"
  | "EDIT_ALL_LOGICAL_QUEUES"
  | "VIEW_INVALID_REGISTRATION_INFO_HOLD"
  | "FULFILL_ORDERS"
  | "VIEW_MERCHANT_RATING_PAGE"
  | "LOGIN_AS_MERCHANTS"
  | "CAN_ACCESS_ONEOFF_API_REMOVE"
  | "CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_CN"
  | "MANAGE_BLACKLIST_CRITERIA"
  | "MERCHANT_GAMING_REVIEW_ESCALATION"
  | "CHANGE_DISPLAY_SETTINGS"
  | "EDIT_ADMINS"
  | "VIEW_WISH_USERS"
  | "CAN_VIEW_US_INFRACTIONS"
  | "SHOW_ALL_TAGGERS"
  | "CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_HK"
  | "CAN_HANDLE_VIOLATION_REPORT"
  | "CAN_TRANSFER_MERCHANTS"
  | "CAN_VIEW_WISH_USER_INFO"
  | "SUPPLY_CHAIN_WAREHOUSE"
  | "CAN_BLOCK_USER_ON_USER_REVIEW"
  | "UPDATE_ACTION_RULE"
  | "USE_CUSTOM_COLORS"
  | "GET_CURRENCY_INFO"
  | "REVIEW_ONEOFF_REQ_REMOVE_PRODUCTS"
  | "SHIPPING_ETA_TICKET_MERCHANT"
  | "SUPPLY_CHAIN_QC"
  | "VIEW_HIGH_GAMING_GMV_HOLD"
  | "CAN_VIEW_DISPUTES";

export type PictureType = "FRONT" | "SELFIE" | "BACK" | "STANDARD";

export type PlatformConstants = {
  readonly __typename?: "PlatformConstants";
  readonly merchantMobile: MerchantMobile;
  readonly countriesWeShipTo: ReadonlyArray<Country>;
  readonly euCountriesWeShipTo: ReadonlyArray<Country>;
  readonly wishExpressCountries: ReadonlyArray<Country>;
  readonly topLevelTags?: Maybe<ReadonlyArray<TrueTagSchema>>;
  readonly unityCountries: ReadonlyArray<Country>;
  readonly countriesAllowWeRegionalPrice: ReadonlyArray<Country>;
  readonly interselectablePhoneCountries: ReadonlyArray<Country>;
  readonly regions?: Maybe<ReadonlyArray<Region>>;
  readonly availableLocales?: Maybe<ReadonlyArray<Locale>>;
  readonly tax: TaxConstants;
  readonly productCsvImportColumns?: Maybe<ProductCsvImportSchema>;
  readonly orders: OrderConstants;
  readonly wishCompanyInfo: WishCompanyInfo;
  readonly deciderKey?: Maybe<DeciderKeySchema>;
  readonly cs?: Maybe<CustomerSupportConstants>;
  readonly buyerFraudReasons: ReadonlyArray<OrderRefundBuyerFraudSubreasonSchema>;
  readonly returnCancelReasons: ReadonlyArray<CustomerSupportTicketCancelReturnReasonSchema>;
  readonly issueRefundReasons: ReadonlyArray<CustomerSupportTicketIssueRefundReasonSchema>;
  readonly euVatCountries: ReadonlyArray<Country>;
  readonly wishEuVatPayerInfo?: Maybe<WishEuvatPayerInfo>;
  readonly productListing: ReadonlyArray<ProductListingTierSchema>;
  readonly staticFines?: Maybe<StaticFines>;
  readonly googleLogin?: Maybe<GoogleLoginDetails>;
  readonly oktaOauthUri?: Maybe<Scalars["String"]>;
  readonly brandProtection?: Maybe<BrandProtectionConstants>;
  readonly mfp?: Maybe<MfpConstantsSchema>;
  readonly expeditedProcessDaysToPayment: Timedelta;
  readonly product: ProductConstantsSchema;
  readonly sellerProfileRegionConstants: SellerProfileRegionConstants;
};

export type PlatformConstantsRegionsArgs = {
  countryCode: CountryCode;
};

export type PlatformSweepMutations = {
  readonly __typename?: "PlatformSweepMutations";
  readonly searchProducts?: Maybe<PlatformSweepProductSearch>;
  readonly flagProducts?: Maybe<PlatformSweepProductFlagging>;
  readonly emailResult?: Maybe<PlatformSweepResultEmail>;
};

export type PlatformSweepMutationsSearchProductsArgs = {
  input: PlatformSweepProductSearchInput;
};

export type PlatformSweepMutationsFlagProductsArgs = {
  input: PlatformSweepProductFlaggingInput;
};

export type PlatformSweepMutationsEmailResultArgs = {
  input: PlatformSweepResultEmailInput;
};

export type PlatformSweepProductFlagging = {
  readonly __typename?: "PlatformSweepProductFlagging";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type PlatformSweepProductFlaggingInput = {
  readonly sessionId: Scalars["ObjectIdType"];
  readonly query: Scalars["String"];
  readonly productIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
};

export type PlatformSweepProductSearch = {
  readonly __typename?: "PlatformSweepProductSearch";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly sessionId?: Maybe<Scalars["ObjectIdType"]>;
  readonly products?: Maybe<ReadonlyArray<ProductSchema>>;
};

export type PlatformSweepProductSearchInput = {
  readonly sessionId?: Maybe<Scalars["ObjectIdType"]>;
  readonly query: Scalars["String"];
  readonly offset?: Maybe<Scalars["Int"]>;
  readonly limit?: Maybe<Scalars["Int"]>;
  readonly countryCode?: Maybe<CountryCode>;
  readonly excludingL2lSubcategories?: Maybe<
    ReadonlyArray<TaggingViolationSubReasonCode>
  >;
  readonly isBba?: Maybe<Scalars["Boolean"]>;
  readonly isCompanyOwned?: Maybe<Scalars["Boolean"]>;
  readonly isPbSearch: Scalars["Boolean"];
};

export type PlatformSweepResultEmail = {
  readonly __typename?: "PlatformSweepResultEmail";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type PlatformSweepResultEmailInput = {
  readonly sessionId: Scalars["ObjectIdType"];
  readonly recipient: Scalars["String"];
};

export type PlusAdminServiceMutations = {
  readonly __typename?: "PlusAdminServiceMutations";
  readonly convertToPlus?: Maybe<ConvertToPlus>;
  readonly removeFromPlus?: Maybe<RemoveFromPlus>;
  readonly removeCountFromMplus?: Maybe<RemoveCountFromMplus>;
};

export type PlusAdminServiceMutationsConvertToPlusArgs = {
  input: ConvertToPlusInput;
};

export type PlusAdminServiceMutationsRemoveFromPlusArgs = {
  input: RemoveFromPlusInput;
};

export type PlusAdminServiceMutationsRemoveCountFromMplusArgs = {
  input: RemoveCountFromMplusInput;
};

export type PolicyAdminSchema = {
  readonly __typename?: "PolicyAdminSchema";
  readonly merchantPolicyTiers?: Maybe<ReadonlyArray<MerchantPolicyTierSchema>>;
  readonly merchantGamingReviewTicketsCount?: Maybe<Scalars["Int"]>;
  readonly merchantGamingReviewTicketsOpenStates?: Maybe<
    ReadonlyArray<MerchantGamingReviewState>
  >;
  readonly merchantGamingReviewTicketsClosedStates?: Maybe<
    ReadonlyArray<MerchantGamingReviewState>
  >;
  readonly merchantGamingReviewTickets?: Maybe<
    ReadonlyArray<MerchantGamingReviewTicketSchema>
  >;
};

export type PolicyAdminSchemaMerchantGamingReviewTicketsCountArgs = {
  states?: Maybe<ReadonlyArray<MerchantGamingReviewState>>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  claimedAdminName?: Maybe<Scalars["String"]>;
  lastSourceUpsertDateStart?: Maybe<DatetimeInput>;
  lastSourceUpsertDateEnd?: Maybe<DatetimeInput>;
  id?: Maybe<Scalars["ObjectIdType"]>;
  isClaimed?: Maybe<Scalars["Boolean"]>;
};

export type PolicyAdminSchemaMerchantGamingReviewTicketsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  claimedAdminName?: Maybe<Scalars["String"]>;
  lastSourceUpsertDateStart?: Maybe<DatetimeInput>;
  lastSourceUpsertDateEnd?: Maybe<DatetimeInput>;
  states?: Maybe<ReadonlyArray<MerchantGamingReviewState>>;
  sort?: Maybe<MerchantGamingReviewTicketSort>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  id?: Maybe<Scalars["ObjectIdType"]>;
  isClaimed?: Maybe<Scalars["Boolean"]>;
};

export type PolicyAnnouncementItemSchema = {
  readonly __typename?: "PolicyAnnouncementItemSchema";
  readonly section: Scalars["String"];
  readonly requireLogIn: Scalars["Boolean"];
  readonly announcementId?: Maybe<Scalars["ObjectIdType"]>;
  readonly effectiveDate?: Maybe<Datetime>;
};

export type PolicyFactor =
  | "MISLEADING_PRODUCT"
  | "INAPPROPRIATE_SALE"
  | "PRODUCT_SWAP"
  | "MERCHANT_CANCELLATION"
  | "HIGH_IP_INFRINGEMENT"
  | "WSS_BAN_POLICY"
  | "WISH_EXPRESS_LATE"
  | "LATE_CONFIRM_FULFILLMENT"
  | "WISH_EXPRESS_LATE_WITHHOLD"
  | "WISH_EXPRESS_BAN"
  | "HIGH_AUTO_REFUND"
  | "GATE_KEEPER_ATO"
  | "HIGH_GAMING_GMV"
  | "MISLEADING_VARIATION"
  | "FAKE_TRACKING"
  | "HIGH_REFUND_RATE"
  | "LOW_STORE_RATE"
  | "STRIKE_BASED_HIGH_RISK_PROHIBITED"
  | "PRODUCT_HIGH_REFUND_RATE"
  | "VALID_TRACKING_RATE"
  | "RECALL_POLICY"
  | "UNQUALIFIED_CARRIER"
  | "FAKE_TRACKING_BY_WEIGHT"
  | "AUTO_REFUND"
  | "HIGH_AUTO_REFUND_RATE"
  | "REPEAT_IP_INFRINGEMENT"
  | "COUNTERFEIT_GOODS"
  | "CS_LOW_CSAT_SCORE"
  | "CS_LATE_RESPONSE_RATE"
  | "NEGATIVE_BALANCE"
  | "ORDER_NOT_DELIVERED"
  | "HIGH_CANCEL_RATE";

export type PolicyMutations = {
  readonly __typename?: "PolicyMutations";
  readonly adaptivePolicyAdmin?: Maybe<AdaptivePolicyAdminMutations>;
  readonly restrictedProduct?: Maybe<RestrictedProductMutations>;
  readonly productCompliance?: Maybe<ProductComplianceMutations>;
  readonly merchantFinalSale?: Maybe<MerchantFinalSaleMutations>;
  readonly merchantGamingReviewTicket?: Maybe<MerchantGamingReviewMutations>;
  readonly merchantWarning?: Maybe<MerchantWarningMutations>;
  readonly productCategoryDispute?: Maybe<ProductCategoryDisputeMutations>;
  readonly orderInfractionDispute?: Maybe<OrderInfractionDisputeMutations>;
  readonly wfp?: Maybe<WfpMutations>;
  readonly refundDispute?: Maybe<RefundDisputeMutations>;
};

export type PolicyPublicMutations = {
  readonly __typename?: "PolicyPublicMutations";
  readonly reportAbuse: ReportAbuseMutations;
};

export type PolicyPublicSchema = {
  readonly __typename?: "PolicyPublicSchema";
  readonly announcements?: Maybe<ReadonlyArray<PolicyAnnouncementItemSchema>>;
  readonly reportAbuse: ReportAbuseHub;
};

export type PolicySchema = {
  readonly __typename?: "PolicySchema";
  readonly admin?: Maybe<PolicyAdminSchema>;
  readonly finalSaleCategories?: Maybe<ReadonlyArray<FinalSaleCategorySchema>>;
  readonly merchantWarningCount?: Maybe<Scalars["Int"]>;
  readonly merchantWarnings?: Maybe<ReadonlyArray<MerchantWarningSchema>>;
  readonly merchantWarning?: Maybe<MerchantWarningSchema>;
  readonly detailedWarningReasons?: Maybe<
    ReadonlyArray<DetailedMerchantWarningReasonSchema>
  >;
  readonly merchantWarningReasons?: Maybe<
    ReadonlyArray<MerchantWarningReasonSchema>
  >;
  readonly restrictedProduct?: Maybe<RestrictedProductSchema>;
  readonly productCompliance?: Maybe<ProductComplianceSchema>;
  readonly productCategoryDispute?: Maybe<ProductCategoryDisputeHub>;
  readonly dispute?: Maybe<DisputeSchema>;
  readonly cannedResponse?: Maybe<CannedResponseHub>;
};

export type PolicySchemaFinalSaleCategoriesArgs = {
  merchantId: Scalars["ObjectIdType"];
};

export type PolicySchemaMerchantWarningCountArgs = {
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  id?: Maybe<Scalars["ObjectIdType"]>;
  banned?: Maybe<Scalars["Boolean"]>;
  fined?: Maybe<Scalars["Boolean"]>;
  reasons?: Maybe<ReadonlyArray<MerchantWarningReason>>;
  states?: Maybe<ReadonlyArray<MerchantWarningState>>;
  isMisleading?: Maybe<Scalars["Boolean"]>;
  disputePendingEditReview?: Maybe<Scalars["Boolean"]>;
  disputePendingBrandAuth?: Maybe<Scalars["Boolean"]>;
  auditStatuses?: Maybe<ReadonlyArray<MerchantWarningAuditStatus>>;
  claimStatus?: Maybe<MerchantWarningClaimStatus>;
  searchProofIdTypes?: Maybe<ReadonlyArray<MerchantWarningProofType>>;
  detailedReasons?: Maybe<ReadonlyArray<DetailedMerchantWarningReason>>;
  issueDateStart?: Maybe<DatetimeInput>;
  issueDateEnd?: Maybe<DatetimeInput>;
  wssImpact?: Maybe<ReadonlyArray<WssImpactState>>;
};

export type PolicySchemaMerchantWarningsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  id?: Maybe<Scalars["ObjectIdType"]>;
  banned?: Maybe<Scalars["Boolean"]>;
  fined?: Maybe<Scalars["Boolean"]>;
  auditStatuses?: Maybe<ReadonlyArray<MerchantWarningAuditStatus>>;
  claimStatus?: Maybe<MerchantWarningClaimStatus>;
  sort?: Maybe<MerchantWarningSort>;
  reasons?: Maybe<ReadonlyArray<MerchantWarningReason>>;
  states?: Maybe<ReadonlyArray<MerchantWarningState>>;
  disputePendingEditReview?: Maybe<Scalars["Boolean"]>;
  disputePendingBrandAuth?: Maybe<Scalars["Boolean"]>;
  searchProofIdTypes?: Maybe<ReadonlyArray<MerchantWarningProofType>>;
  detailedReasons?: Maybe<ReadonlyArray<DetailedMerchantWarningReason>>;
  issueDateStart?: Maybe<DatetimeInput>;
  issueDateEnd?: Maybe<DatetimeInput>;
  wssImpact?: Maybe<ReadonlyArray<WssImpactState>>;
};

export type PolicySchemaMerchantWarningArgs = {
  id?: Maybe<Scalars["ObjectIdType"]>;
};

export type PolicySchemaDetailedWarningReasonsArgs = {
  reasons?: Maybe<ReadonlyArray<MerchantWarningReason>>;
  states?: Maybe<ReadonlyArray<MerchantWarningState>>;
  id?: Maybe<Scalars["ObjectIdType"]>;
  searchProofIdTypes?: Maybe<ReadonlyArray<MerchantWarningProofType>>;
  issueDateStart?: Maybe<DatetimeInput>;
  issueDateEnd?: Maybe<DatetimeInput>;
};

export type PolicyType =
  | "NO_RETURN_ACCEPTED"
  | "PREPAID_RETURN_ACCEPTED"
  | "WISH_AUTO_REVIEW"
  | "FREE_RETURN_ACCEPTED";

export type ProductAnalyticsDimension = "COUNTRY" | "GENDER";

export type ProductAnalyticsInterval =
  | "INTERVAL_UNSPECIFIED"
  | "INTERVAL_DAY"
  | "INTERVAL_MINUTE"
  | "INTERVAL_HOUR"
  | "INTERVAL_WEEK"
  | "INTERVAL_MONTH";

export type ProductAnalyticsSchema = {
  readonly __typename?: "ProductAnalyticsSchema";
  readonly productId: Scalars["String"];
  readonly enabled: Scalars["Boolean"];
  readonly stats?: Maybe<ProductAnalyticsStats>;
};

export type ProductAnalyticsSchemaStatsArgs = {
  startTime: DatetimeInput;
  endTime: DatetimeInput;
  interval?: Maybe<ProductAnalyticsInterval>;
  limit?: Maybe<Scalars["Int"]>;
  offset?: Maybe<Scalars["Int"]>;
};

export type ProductAnalyticsStats = {
  readonly __typename?: "ProductAnalyticsStats";
  readonly startTime: Datetime;
  readonly endTime: Datetime;
  readonly interval: ProductAnalyticsInterval;
  readonly interactionStats: ReadonlyArray<ProductInteractionStats>;
  readonly orderStats: ReadonlyArray<ProductOrderStats>;
};

export type ProductAnalyticsStatsInteractionStatsArgs = {
  dimensions?: Maybe<ReadonlyArray<ProductAnalyticsDimension>>;
};

export type ProductAnalyticsStatsOrderStatsArgs = {
  dimensions?: Maybe<ReadonlyArray<ProductAnalyticsDimension>>;
};

export type ProductBoostAcceptTos = {
  readonly __typename?: "ProductBoostAcceptTOS";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ProductBoostAcceptTosInput = {
  readonly tosVersion: Scalars["Int"];
};

export type ProductCatalogMutations = {
  readonly __typename?: "ProductCatalogMutations";
  readonly upsertProduct?: Maybe<UpsertProduct>;
  readonly upsertProducts?: Maybe<UpsertProducts>;
  readonly removeProduct?: Maybe<RemoveProduct>;
  readonly upsertProductCsvFile?: Maybe<UpsertProductsFromCsvFile>;
  readonly downloadAllProducts?: Maybe<DownloadAllProducts>;
  readonly downloadAllProductsCsv?: Maybe<DownloadAllProductsCsv>;
  readonly updateProductLogisticsMetadata?: Maybe<UpdateProductLogisticsMetadata>;
  readonly upsertVideo?: Maybe<UpsertVideo>;
  readonly removeVideo?: Maybe<RemoveVideo>;
};

export type ProductCatalogMutationsUpsertProductArgs = {
  input?: Maybe<ProductUpsertInput>;
};

export type ProductCatalogMutationsUpsertProductsArgs = {
  input: ReadonlyArray<ProductUpsertInput>;
};

export type ProductCatalogMutationsRemoveProductArgs = {
  input: RemoveProductInput;
};

export type ProductCatalogMutationsUpsertProductCsvFileArgs = {
  input: UpsertProductsFromCsvFileInput;
};

export type ProductCatalogMutationsDownloadAllProductsArgs = {
  input: DownloadAllProductsInput;
};

export type ProductCatalogMutationsDownloadAllProductsCsvArgs = {
  input: DownloadAllProductsCsvInput;
};

export type ProductCatalogMutationsUpdateProductLogisticsMetadataArgs = {
  input: UpdateProductLogisticsMetadataInput;
};

export type ProductCatalogMutationsUpsertVideoArgs = {
  input?: Maybe<VideoUpsertInput>;
};

export type ProductCatalogMutationsRemoveVideoArgs = {
  input: RemoveVideoInput;
};

export type ProductCatalogSchema = {
  readonly __typename?: "ProductCatalogSchema";
  readonly product?: Maybe<ProductSchema>;
  readonly products: ReadonlyArray<ProductSchema>;
  readonly productCount: Scalars["Int"];
  readonly productsV2: ReadonlyArray<ProductSchema>;
  readonly productCountV2: Scalars["Int"];
  readonly variation?: Maybe<VariationSchema>;
  readonly variations: ReadonlyArray<VariationSchema>;
  readonly variationCount?: Maybe<Scalars["Int"]>;
  readonly upcProductService: UpcProductServiceSchema;
  readonly bulkCsvProductImportJobs: ReadonlyArray<CsvProductImportJobSchema>;
  readonly csvProductImportJobsCount: Scalars["Int"];
  readonly csvProductColumnNames: ReadonlyArray<Scalars["String"]>;
  readonly csvProductColumnEnums: ReadonlyArray<ProductCsvColumnName>;
  readonly gtinProductService: GtinProductServiceSchema;
  readonly videoService: ProductVideoServiceSchema;
  readonly csvProductTemplateWithTaxonomyColumnNames?: Maybe<
    ReadonlyArray<Scalars["String"]>
  >;
};

export type ProductCatalogSchemaProductArgs = {
  id?: Maybe<Scalars["String"]>;
  sku?: Maybe<Scalars["String"]>;
};

export type ProductCatalogSchemaProductsArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ProductSearchType>;
  shippingProfileIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  videoId?: Maybe<Scalars["ObjectIdType"]>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<ProductSort>;
  productStatuses?: Maybe<ReadonlyArray<CommerceProductStatus>>;
  shippingTypes?: Maybe<ReadonlyArray<WarehouseShippingType>>;
  videoStates?: Maybe<ReadonlyArray<ProductVideoState>>;
  videoLinkEnabled?: Maybe<Scalars["Boolean"]>;
};

export type ProductCatalogSchemaProductCountArgs = {
  query?: Maybe<Scalars["String"]>;
  productStatuses?: Maybe<ReadonlyArray<CommerceProductStatus>>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  shippingTypes?: Maybe<ReadonlyArray<WarehouseShippingType>>;
  searchType?: Maybe<ProductSearchType>;
  shippingProfileIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  videoStates?: Maybe<ReadonlyArray<ProductVideoState>>;
  videoLinkEnabled?: Maybe<Scalars["Boolean"]>;
};

export type ProductCatalogSchemaProductsV2Args = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ProductSearchType>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<ProductSort>;
  isEnabled?: Maybe<Scalars["Boolean"]>;
  state?: Maybe<ProductListingState>;
  fpReviewStatus?: Maybe<ProductFpReviewStatus>;
  isWishExpress?: Maybe<Scalars["Boolean"]>;
  hasBrand?: Maybe<Scalars["Boolean"]>;
  isPromoted?: Maybe<Scalars["Boolean"]>;
  isCleanImage?: Maybe<Scalars["Boolean"]>;
  isReturnEnrolled?: Maybe<Scalars["Boolean"]>;
};

export type ProductCatalogSchemaProductCountV2Args = {
  query?: Maybe<Scalars["String"]>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  searchType?: Maybe<ProductSearchType>;
  isEnabled?: Maybe<Scalars["Boolean"]>;
  state?: Maybe<ProductListingState>;
  fpReviewStatus?: Maybe<ProductFpReviewStatus>;
  isWishExpress?: Maybe<Scalars["Boolean"]>;
  hasBrand?: Maybe<Scalars["Boolean"]>;
  isPromoted?: Maybe<Scalars["Boolean"]>;
  isCleanImage?: Maybe<Scalars["Boolean"]>;
  isReturnEnrolled?: Maybe<Scalars["Boolean"]>;
};

export type ProductCatalogSchemaVariationArgs = {
  id?: Maybe<Scalars["String"]>;
  sku?: Maybe<Scalars["String"]>;
};

export type ProductCatalogSchemaVariationsArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<VariationSearchType>;
  offset?: Maybe<Scalars["Int"]>;
  sort?: Maybe<VariationSort>;
  limit?: Maybe<Scalars["Int"]>;
};

export type ProductCatalogSchemaVariationCountArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<VariationSearchType>;
};

export type ProductCatalogSchemaBulkCsvProductImportJobsArgs = {
  offset?: Scalars["Int"];
  limit?: Scalars["Int"];
  feedType?: Maybe<ProductCsvJobType>;
};

export type ProductCatalogSchemaCsvProductImportJobsCountArgs = {
  feedType?: Maybe<ProductCsvJobType>;
};

export type ProductCatalogSchemaCsvProductTemplateWithTaxonomyColumnNamesArgs =
  {
    categoryId: Scalars["Int"];
    treeVersion: Scalars["String"];
  };

export type ProductCategorization = {
  readonly __typename?: "ProductCategorization";
  readonly productId: Scalars["ObjectIdType"];
  readonly categorizationSource: CategorizationSource;
  readonly categoryTreeId: Scalars["Int"];
  readonly categoryTreeVersion: Scalars["String"];
  readonly category: TaxonomyCategorySchema;
  readonly categorizationUser?: Maybe<UserSchema>;
  readonly timestamp: Datetime;
};

export type ProductCategoryDisputeAction =
  | "CREATE"
  | "MARK_UPDATE"
  | "MARK_UNCHANGE";

export type ProductCategoryDisputeAdminUnchangedReason =
  | "IMAGE_MISMATCH"
  | "PROPOSED_TAG_IS_INAPPROPRIATE"
  | "OTHER"
  | "CORRECT_TAGGED";

export type ProductCategoryDisputeEligibility =
  | "OUT_OF_QUOTA"
  | "INELIGIBLE"
  | "ELIGIBLE";

export type ProductCategoryDisputeHub = {
  readonly __typename?: "ProductCategoryDisputeHub";
  readonly disputeCount?: Maybe<Scalars["Int"]>;
  readonly disputes?: Maybe<ReadonlyArray<ProductCategoryDisputeSchema>>;
  readonly dispute?: Maybe<ProductCategoryDisputeSchema>;
  readonly reasons?: Maybe<ReadonlyArray<ProductCategoryDisputeReasonSchema>>;
};

export type ProductCategoryDisputeHubDisputeCountArgs = {
  searchType?: Maybe<ProductCategoryDisputeSearchType>;
  query?: Maybe<Scalars["String"]>;
  states: ReadonlyArray<ProductCategoryDisputeStatus>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
};

export type ProductCategoryDisputeHubDisputesArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  searchType?: Maybe<ProductCategoryDisputeSearchType>;
  query?: Maybe<Scalars["String"]>;
  states: ReadonlyArray<ProductCategoryDisputeStatus>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
};

export type ProductCategoryDisputeHubDisputeArgs = {
  id: Scalars["ObjectIdType"];
};

export type ProductCategoryDisputeHubReasonsArgs = {
  source: ProductCategoryDisputeSource;
};

export type ProductCategoryDisputeMutations = {
  readonly __typename?: "ProductCategoryDisputeMutations";
  readonly upsertProductCategoryDispute?: Maybe<UpsertProductCategoryDispute>;
};

export type ProductCategoryDisputeMutationsUpsertProductCategoryDisputeArgs = {
  input?: Maybe<UpsertProductCategoryDisputeInput>;
};

export type ProductCategoryDisputeReason = "INCORRECT_TAG" | "OTHERS";

export type ProductCategoryDisputeReasonSchema = {
  readonly __typename?: "ProductCategoryDisputeReasonSchema";
  readonly reason: ProductCategoryDisputeReason;
  readonly text: Scalars["String"];
};

export type ProductCategoryDisputeSchema = {
  readonly __typename?: "ProductCategoryDisputeSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly merchant: MerchantSchema;
  readonly product: ProductSchema;
  readonly status: ProductCategoryDisputeStatus;
  readonly lastUpdate?: Maybe<Datetime>;
  readonly adminActionId?: Maybe<Scalars["ObjectIdType"]>;
  readonly adminUnchangedReason?: Maybe<ProductCategoryDisputeAdminUnchangedReason>;
  readonly reason?: Maybe<ProductCategoryDisputeReasonSchema>;
  readonly source: ProductCategoryDisputeSource;
  readonly adminUnchangedOtherReasonDetails?: Maybe<Scalars["String"]>;
  readonly merchantNote?: Maybe<Scalars["String"]>;
  readonly supportedFiles?: Maybe<ReadonlyArray<MerchantFileSchema>>;
  readonly trueTags?: Maybe<ReadonlyArray<TrueTagSchema>>;
};

export type ProductCategoryDisputeSchemaTrueTagsArgs = {
  state?: Maybe<ProductCategoryDisputeTrueTagState>;
};

export type ProductCategoryDisputeSearchType =
  | "MERCHANT_ID"
  | "PRODUCT_ID"
  | "DISPUTE_ID";

export type ProductCategoryDisputeSource = "EU_COMPLIANCE" | "PRODUCT_CATELOG";

export type ProductCategoryDisputeStatus =
  | "RESOLVED_UNCHANGED"
  | "RESOLVED_UPDATE"
  | "PENDING_REVIEW";

export type ProductCategoryDisputeTrueTagState =
  | "DISPUTED"
  | "APPROVED"
  | "PROPOSED";

export type ProductComplianceMutations = {
  readonly __typename?: "ProductComplianceMutations";
  readonly euCompliance?: Maybe<EuComplianceMutations>;
  readonly frCompliance?: Maybe<FranceComplianceMutations>;
  readonly deCompliance?: Maybe<GermanyComplianceMutations>;
};

export type ProductComplianceSchema = {
  readonly __typename?: "ProductComplianceSchema";
  readonly responsiblePersonCount?: Maybe<Scalars["Int"]>;
  readonly responsiblePersons?: Maybe<ReadonlyArray<ResponsiblePersonSchema>>;
  readonly rpValidCountries: ReadonlyArray<EuComplianceResponsiblePersonCountriesAndRegions>;
  readonly linkCount?: Maybe<Scalars["Int"]>;
  readonly links?: Maybe<ReadonlyArray<LinkProductComplianceSchema>>;
  readonly allMsrCategories?: Maybe<ReadonlyArray<MsrCategory>>;
  readonly allEuComplianceCategories?: Maybe<
    ReadonlyArray<EuProductComplianceCategory>
  >;
  readonly productDestinationCountries: ReadonlyArray<Country>;
  readonly responsiblePersonRejectReasons: ReadonlyArray<ResponsiblePersonRejectReasonSchema>;
  readonly franceProductUniqueIdentificationNumberCount?: Maybe<Scalars["Int"]>;
  readonly franceProductUniqueIdentificationNumbers?: Maybe<
    ReadonlyArray<FranceProductUniqueIdentificationNumberSchema>
  >;
  readonly germanyProductUniqueIdentificationNumberCount?: Maybe<
    Scalars["Int"]
  >;
  readonly germanyProductUniqueIdentificationNumbers?: Maybe<
    ReadonlyArray<GermanyProductUniqueIdentificationNumberSchema>
  >;
};

export type ProductComplianceSchemaResponsiblePersonCountArgs = {
  complianceType: LinkProductComplianceType;
  states?: Maybe<ReadonlyArray<ResponsiblePersonStatus>>;
};

export type ProductComplianceSchemaResponsiblePersonsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  complianceType: LinkProductComplianceType;
  sort?: Maybe<ResponsiblePersonSort>;
  states?: Maybe<ReadonlyArray<ResponsiblePersonStatus>>;
};

export type ProductComplianceSchemaLinkCountArgs = {
  complianceTypes?: Maybe<ReadonlyArray<LinkProductComplianceType>>;
  states?: Maybe<ReadonlyArray<LinkProductComplianceState>>;
  categories?: Maybe<ReadonlyArray<MsrCategory>>;
  euComplianceCategories?: Maybe<ReadonlyArray<EuProductComplianceCategory>>;
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ProductComplianceSearchType>;
  responsiblePersonIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  franceUinCategories?: Maybe<
    ReadonlyArray<FranceProductUniqueIdentificationNumberCategory>
  >;
  isLinkedWithFranceUin?: Maybe<Scalars["Boolean"]>;
  isLinkedWithFranceUinCategories?: Maybe<Scalars["Boolean"]>;
  germanyUinCategories?: Maybe<
    ReadonlyArray<GermanyProductUniqueIdentificationNumberCategory>
  >;
  isLinkedWithGermanyUin?: Maybe<Scalars["Boolean"]>;
  isLinkedWithGermanyUinCategories?: Maybe<Scalars["Boolean"]>;
};

export type ProductComplianceSchemaLinksArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  complianceTypes?: Maybe<ReadonlyArray<LinkProductComplianceType>>;
  states?: Maybe<ReadonlyArray<LinkProductComplianceState>>;
  categories?: Maybe<ReadonlyArray<MsrCategory>>;
  euComplianceCategories?: Maybe<ReadonlyArray<EuProductComplianceCategory>>;
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ProductComplianceSearchType>;
  responsiblePersonIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  franceUinCategories?: Maybe<
    ReadonlyArray<FranceProductUniqueIdentificationNumberCategory>
  >;
  isLinkedWithFranceUin?: Maybe<Scalars["Boolean"]>;
  isLinkedWithFranceUinCategories?: Maybe<Scalars["Boolean"]>;
  germanyUinCategories?: Maybe<
    ReadonlyArray<GermanyProductUniqueIdentificationNumberCategory>
  >;
  isLinkedWithGermanyUin?: Maybe<Scalars["Boolean"]>;
  isLinkedWithGermanyUinCategories?: Maybe<Scalars["Boolean"]>;
};

export type ProductComplianceSchemaFranceProductUniqueIdentificationNumberCountArgs =
  {
    category?: Maybe<
      ReadonlyArray<FranceProductUniqueIdentificationNumberCategory>
    >;
    states?: Maybe<
      ReadonlyArray<FranceProductUniqueIdentificationNumberStatus>
    >;
  };

export type ProductComplianceSchemaFranceProductUniqueIdentificationNumbersArgs =
  {
    category?: Maybe<
      ReadonlyArray<FranceProductUniqueIdentificationNumberCategory>
    >;
    states?: Maybe<
      ReadonlyArray<FranceProductUniqueIdentificationNumberStatus>
    >;
  };

export type ProductComplianceSchemaGermanyProductUniqueIdentificationNumberCountArgs =
  {
    categories?: Maybe<
      ReadonlyArray<GermanyProductUniqueIdentificationNumberCategory>
    >;
    states?: Maybe<
      ReadonlyArray<GermanyProductUniqueIdentificationNumberStatus>
    >;
  };

export type ProductComplianceSchemaGermanyProductUniqueIdentificationNumbersArgs =
  {
    categories?: Maybe<
      ReadonlyArray<GermanyProductUniqueIdentificationNumberCategory>
    >;
    states?: Maybe<
      ReadonlyArray<GermanyProductUniqueIdentificationNumberStatus>
    >;
  };

export type ProductComplianceSearchType = "PRODUCT_ID";

export type ProductConstantsSchema = {
  readonly __typename?: "ProductConstantsSchema";
  readonly prop65Chemicals: ReadonlyArray<Scalars["String"]>;
};

export type ProductCountryBlockSchema = {
  readonly __typename?: "ProductCountryBlockSchema";
  readonly productId: Scalars["ObjectIdType"];
  readonly countriesBlocked?: Maybe<ReadonlyArray<Country>>;
};

export type ProductCsvColumnName =
  | "PRODUCT_ID"
  | "NAME"
  | "DESCRIPTION"
  | "NUM_OF_WISHES"
  | "NUM_OF_SALES"
  | "PARENT_SKU"
  | "GTIN"
  | "LANDING_PAGE_URL"
  | "VARIATION_ID"
  | "SKU"
  | "SIZE"
  | "COLOR"
  | "REFERENCE_PRICE"
  | "COST"
  | "PRICE"
  | "DEFAULT_SHIPPING_PRICE"
  | "INVENTORY"
  | "SHIPPING_TIME"
  | "STATUS"
  | "IS_PROMOTED"
  | "REVIEW_STATE"
  | "MAIN_IMAGE"
  | "EXTRA_IMAGES"
  | "VARIATION_IMAGE"
  | "TAGS"
  | "LAST_UPDATED"
  | "DATE_UPLOADED"
  | "WARNING_ID"
  | "WISH_EXPRESS_ENABLED_COUNTRIES"
  | "WISH_EXPRESS_DISABLED_COUNTRIES"
  | "WISH_EXPRESS_COUNTRIES"
  | "CURRENCY_CODE"
  | "WAREHOUSE"
  | "BRAND_ID"
  | "BRAND"
  | "BRAND_STATUS"
  | "CONDITION"
  | "CUSTOMS_HS_CODE"
  | "PACKAGE_LENGTH"
  | "PACKAGE_HEIGHT"
  | "PACKAGE_WIDTH"
  | "PACKAGE_WEIGHT"
  | "CUSTOMS_DECLARED_VALUE"
  | "COUNTRY_OF_ORIGIN"
  | "DECLARED_LOCAL_NAME"
  | "CONTAINS_LIQUID"
  | "CONTAINS_METAL"
  | "CONTAINS_POWDER"
  | "CONTAINS_BATTERY"
  | "PIECES_INCLUDED"
  | "CLEAN_IMAGE"
  | "DECLARED_NAME"
  | "MAX_QUANTITY"
  | "REFERENCE_VALUE"
  | "UNIT"
  | "QUANTITY_VALUE"
  | "IS_LTL"
  | "FIRST_MILE_SHIPPING_PRICE_D_DISABLED"
  | "EFFECTIVE_DATE"
  | "CALCULATED_SHIPPING"
  | "CALIFORNIA_PROPOSITION_65_WARNING_TYPE"
  | "CALIFORNIA_PROPOSITION_65_CHEMICAL_NAMES"
  | "VARIATION_OPTIONS"
  | "CATEGORY_EXPERIENCE_ELIGIBILITY"
  | "SUBCATEGORY_ID"
  | "AD"
  | "AL"
  | "AR"
  | "AT"
  | "AU"
  | "BA"
  | "BE"
  | "BG"
  | "BR"
  | "CA"
  | "CH"
  | "CL"
  | "CO"
  | "CR"
  | "CZ"
  | "DE"
  | "DK"
  | "EE"
  | "ES"
  | "FI"
  | "FR"
  | "GB"
  | "GI"
  | "GR"
  | "HR"
  | "HU"
  | "IE"
  | "IL"
  | "IS"
  | "IT"
  | "JE"
  | "JP"
  | "KR"
  | "LI"
  | "LT"
  | "LU"
  | "LV"
  | "MC"
  | "MD"
  | "ME"
  | "MK"
  | "MT"
  | "MX"
  | "NL"
  | "NO"
  | "NZ"
  | "PE"
  | "PL"
  | "PR"
  | "PT"
  | "RO"
  | "RS"
  | "SE"
  | "SG"
  | "SI"
  | "SK"
  | "SM"
  | "UA"
  | "US"
  | "VI"
  | "ZA"
  | "AD_TTD"
  | "AL_TTD"
  | "AR_TTD"
  | "AT_TTD"
  | "AU_TTD"
  | "BA_TTD"
  | "BE_TTD"
  | "BG_TTD"
  | "BR_TTD"
  | "CA_TTD"
  | "CH_TTD"
  | "CL_TTD"
  | "CO_TTD"
  | "CR_TTD"
  | "CZ_TTD"
  | "DE_TTD"
  | "DK_TTD"
  | "EE_TTD"
  | "ES_TTD"
  | "FI_TTD"
  | "FR_TTD"
  | "GB_TTD"
  | "GI_TTD"
  | "GR_TTD"
  | "HR_TTD"
  | "HU_TTD"
  | "IE_TTD"
  | "IL_TTD"
  | "IS_TTD"
  | "IT_TTD"
  | "JE_TTD"
  | "JP_TTD"
  | "KR_TTD"
  | "LI_TTD"
  | "LT_TTD"
  | "LU_TTD"
  | "LV_TTD"
  | "MC_TTD"
  | "MD_TTD"
  | "ME_TTD"
  | "MK_TTD"
  | "MT_TTD"
  | "MX_TTD"
  | "NL_TTD"
  | "NO_TTD"
  | "NZ_TTD"
  | "PE_TTD"
  | "PL_TTD"
  | "PR_TTD"
  | "PT_TTD"
  | "RO_TTD"
  | "RS_TTD"
  | "SE_TTD"
  | "SG_TTD"
  | "SI_TTD"
  | "SK_TTD"
  | "SM_TTD"
  | "UA_TTD"
  | "US_TTD"
  | "VI_TTD"
  | "ZA_TTD";

export type ProductCsvImportColumnSchema = {
  readonly __typename?: "ProductCSVImportColumnSchema";
  readonly columnId: Scalars["String"];
  readonly name: Scalars["String"];
  readonly isRequired: IsRequiredEnum;
  readonly category?: Maybe<ColumnCategorySchema>;
};

export type ProductCsvImportColumnSchemaIsRequiredArgs = {
  feedType?: Maybe<ProductCsvJobType>;
};

export type ProductCsvImportSchema = {
  readonly __typename?: "ProductCSVImportSchema";
  readonly columns: ReadonlyArray<ProductCsvImportColumnSchema>;
  readonly requiredColumns: ReadonlyArray<ProductCsvImportColumnSchema>;
  readonly optionalColumns: ReadonlyArray<ProductCsvImportColumnSchema>;
};

export type ProductCsvImportSchemaColumnsArgs = {
  restrictCountryShipping?: Maybe<Scalars["Boolean"]>;
  columnIds?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type ProductCsvImportSchemaRequiredColumnsArgs = {
  columnIds?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type ProductCsvImportSchemaOptionalColumnsArgs = {
  restrictCountryShipping?: Maybe<Scalars["Boolean"]>;
  columnIds?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type ProductCsvJobType =
  | "ADD_PRODUCTS"
  | "CREATE_PRESALE_PRODUCT"
  | "EDIT_WISH_EXPRESS_COUNTRIES"
  | "SHOPIFY_CREATE_PRODUCTS"
  | "UPSERT_PRODUCTS"
  | "EDIT_FBW_SHIPPING"
  | "EDIT_SHIPPING"
  | "ADD_SIZE_COLOR"
  | "UPDATE_PRODUCTS";

export type ProductDailyPerformanceSchema = {
  readonly __typename?: "ProductDailyPerformanceSchema";
  readonly date: Datetime;
  readonly productDetailPageView?: Maybe<Scalars["Int"]>;
  readonly addToCart?: Maybe<Scalars["Int"]>;
  readonly orders?: Maybe<Scalars["Int"]>;
  readonly gmv?: Maybe<CurrencyValue>;
  readonly conversionRate?: Maybe<Scalars["Float"]>;
  readonly averageCostOfSaleCalculated?: Maybe<Scalars["Float"]>;
};

export type ProductFpReviewStatus = "UNDER_REVIEW" | "APPROVED" | "BLOCKED";

export type ProductInteractionStats = {
  readonly __typename?: "ProductInteractionStats";
  readonly eventTime: Datetime;
  readonly impressions: Scalars["Int"];
  readonly clicks: Scalars["Int"];
  readonly gender?: Maybe<Gender>;
  readonly country?: Maybe<Country>;
};

export type ProductListingFeeDetailsSchema = {
  readonly __typename?: "ProductListingFeeDetailsSchema";
  readonly currentProductMax?: Maybe<Scalars["Int"]>;
  readonly snapshotDate: Datetime;
  readonly priceBreakdownPerTier?: Maybe<ReadonlyArray<ProductTierPriceSchema>>;
  readonly productMetrics?: Maybe<ProductListingPlanMonthlyProductMetrics>;
  readonly productMetricsBenchmark?: Maybe<ProductListingPlanMonthlyProductMetricsBenchmark>;
};

export type ProductListingPlanHub = {
  readonly __typename?: "ProductListingPlanHub";
  readonly bill: ProductListingFeeDetailsSchema;
  readonly productTotal: ReadonlyArray<ProductListingPlanProductMetrics>;
};

export type ProductListingPlanHubBillArgs = {
  date: DatetimeInput;
};

export type ProductListingPlanHubProductTotalArgs = {
  startDate: DatetimeInput;
  endDate: DatetimeInput;
};

export type ProductListingPlanMonthlyProductMetrics = {
  readonly __typename?: "ProductListingPlanMonthlyProductMetrics";
  readonly date: Datetime;
  readonly totalProductWithSale: Scalars["Int"];
  readonly totalProductWithImpression: Scalars["Int"];
  readonly totalProduct: Scalars["Int"];
  readonly merchantId: Scalars["ObjectIdType"];
};

export type ProductListingPlanMonthlyProductMetricsBenchmark = {
  readonly __typename?: "ProductListingPlanMonthlyProductMetricsBenchmark";
  readonly date: Datetime;
  readonly avgSaleRatio: Scalars["Float"];
  readonly avgImpressionRatio: Scalars["Float"];
};

export type ProductListingPlanProductMetrics = {
  readonly __typename?: "ProductListingPlanProductMetrics";
  readonly date: Datetime;
  readonly count?: Maybe<Scalars["Int"]>;
};

export type ProductListingPlanTier = "TIER_ONE" | "TIER_TWO" | "TIER_THREE";

export type ProductListingState =
  | "ACTIVE"
  | "MERCHANT_INACTIVE"
  | "REMOVED_BY_MERCHANT"
  | "REMOVED_BY_WISH"
  | "WISH_INACTIVE";

export type ProductListingTierSchema = {
  readonly __typename?: "ProductListingTierSchema";
  readonly tier: ProductListingPlanTier;
  readonly lowerBound: Scalars["Int"];
  readonly higherBound: Scalars["Int"];
  readonly price: CurrencyValue;
};

export type ProductOrderStats = {
  readonly __typename?: "ProductOrderStats";
  readonly eventTime: Datetime;
  readonly orders: Scalars["Int"];
  readonly gmv: CurrencyValue;
  readonly merchantGmv?: Maybe<CurrencyValue>;
  readonly gender?: Maybe<Gender>;
  readonly country?: Maybe<Country>;
};

export type ProductPerformanceSchema = {
  readonly __typename?: "ProductPerformanceSchema";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly daily: ReadonlyArray<ProductDailyPerformanceSchema>;
  readonly totalProductDetailPageView: Scalars["Int"];
  readonly totalAddToCart: Scalars["Int"];
  readonly totalOrders: Scalars["Int"];
  readonly totalGmv: CurrencyValue;
  readonly totalConversionRate: Scalars["Float"];
  readonly totalAverageCostOfSaleCalculated?: Maybe<Scalars["Float"]>;
};

export type ProductPerformanceSchemaDailyArgs = {
  startDate: DatetimeInput;
  endDate: DatetimeInput;
};

export type ProductPerformanceStats = {
  readonly __typename?: "ProductPerformanceStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly activeProducts?: Maybe<Scalars["Int"]>;
  readonly activeSkus?: Maybe<Scalars["Int"]>;
  readonly skusPerProduct?: Maybe<Scalars["Float"]>;
  readonly averagePrice?: Maybe<CurrencyValue>;
  readonly averageShippingPrice?: Maybe<CurrencyValue>;
  readonly priceToShippingRatio?: Maybe<Scalars["Float"]>;
  readonly averageAdditonalImagesPerProduct?: Maybe<Scalars["Float"]>;
  readonly productImpressions?: Maybe<Scalars["BigInt"]>;
  readonly gmv: CurrencyValue;
};

export type ProductPostErrorCode =
  | "NO_ERROR"
  | "REQUEST_TOO_LARGE"
  | "INVALID_PRODUCT_ID"
  | "INVALID_MERCHANT_ID"
  | "LIMIT_IS_ZERO"
  | "INVALID_PRODUCT_VIDEO_ID"
  | "VIDEO_NOT_FOUND"
  | "INVALID_VIDEO"
  | "MISSING_PARAMETER"
  | "IDENTIFIER_ALREADY_IN_USE"
  | "INVALID_RULES"
  | "ILLEGAL_CHARACTER"
  | "CONFLICTING_PARAMETERS"
  | "INVALID_VIDEO_ID"
  | "INVALID_PARAMETER"
  | "RECORD_NOT_FOUND";

export type ProductPostsMutations = {
  readonly __typename?: "ProductPostsMutations";
  readonly add: AddProductPostMutation;
  readonly delete: DeleteProductPostsMutation;
};

export type ProductPostsMutationsAddArgs = {
  input: AddProductPostInput;
};

export type ProductPostsMutationsDeleteArgs = {
  input: DeleteProductPostsInput;
};

export type ProductPredictedCategory = {
  readonly __typename?: "ProductPredictedCategory";
  readonly productId: Scalars["ObjectIdType"];
  readonly categoryTreeId: Scalars["Int"];
  readonly categoryTreeVersion: Scalars["String"];
  readonly categorizationSource: CategorizationSource;
  readonly category: TaxonomyCategorySchema;
  readonly lastUpdated: Datetime;
};

export type ProductPromotionDailyStats = {
  readonly __typename?: "ProductPromotionDailyStats";
  readonly date: Datetime;
  readonly impressions?: Maybe<Scalars["Int"]>;
  readonly sales?: Maybe<Scalars["Int"]>;
  readonly gmv?: Maybe<CurrencyValue>;
  readonly promotionBudget?: Maybe<CurrencyValue>;
  readonly promotionSpending?: Maybe<CurrencyValue>;
  readonly promotionStatus: ProductPromotionStatus;
};

export type ProductPromotionLifetimeStats = {
  readonly __typename?: "ProductPromotionLifetimeStats";
  readonly sales: Scalars["Int"];
  readonly gmv: CurrencyValue;
  readonly spend: CurrencyValue;
};

export type ProductPromotionPeriodStats = {
  readonly __typename?: "ProductPromotionPeriodStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly dailyStats: ReadonlyArray<ProductPromotionDailyStats>;
  readonly totalImpressions: Scalars["Int"];
  readonly totalSales: Scalars["Int"];
  readonly totalGmv: CurrencyValue;
  readonly totalPromotionSpending: CurrencyValue;
};

export type ProductPromotionRefundAssurance = {
  readonly __typename?: "ProductPromotionRefundAssurance";
  readonly topLevelStats: ProductPromotionRefundAssuranceStats;
  readonly monthlyStats: ReadonlyArray<ProductPromotionRefundAssuranceStats>;
};

export type ProductPromotionRefundAssuranceCreditReceivedStatus =
  | "DONE"
  | "PENDING";

export type ProductPromotionRefundAssuranceStats = {
  readonly __typename?: "ProductPromotionRefundAssuranceStats";
  readonly spend?: Maybe<CurrencyValue>;
  readonly month?: Maybe<Datetime>;
  readonly advancedLogisticsGmv?: Maybe<CurrencyValue>;
  readonly refundAdvancedLogisticsGmv?: Maybe<CurrencyValue>;
  readonly creditIssued?: Maybe<CurrencyValue>;
  readonly creditIssuedStatus?: Maybe<ProductPromotionRefundAssuranceCreditReceivedStatus>;
  readonly refundRate?: Maybe<Scalars["Float"]>;
  readonly advancedLogisticsOrdersCount?: Maybe<Scalars["Int"]>;
  readonly refundedAdvancedLogisticsOrdersCount?: Maybe<Scalars["Int"]>;
};

export type ProductPromotionRefundAssuranceType = "ELIGIBLE" | "OTHER";

export type ProductPromotionSchema = {
  readonly __typename?: "ProductPromotionSchema";
  readonly productId: Scalars["ObjectIdType"];
  readonly product: ProductSchema;
  readonly promotionStatus: ProductPromotionStatus;
  readonly dailyPromotionBudget: CurrencyValue;
  readonly lastUpdateDate?: Maybe<Datetime>;
  readonly periodStats: ProductPromotionPeriodStats;
  readonly lifetimeStats: ProductPromotionLifetimeStats;
  readonly refundAssurance: ProductPromotionRefundAssurance;
  readonly intenseBoost?: Maybe<Scalars["Boolean"]>;
};

export type ProductPromotionSchemaPeriodStatsArgs = {
  startTime: DatetimeInput;
  endTime: DatetimeInput;
};

export type ProductPromotionSearchType = "ID" | "NAME" | "SKU";

export type ProductPromotionStatus = "ACTIVE" | "OUT_OF_BALANCE" | "INACTIVE";

export type ProductRating = {
  readonly __typename?: "ProductRating";
  readonly productId?: Maybe<Scalars["String"]>;
  readonly average30dRating?: Maybe<Scalars["Float"]>;
  readonly ratings?: Maybe<Scalars["Int"]>;
  readonly sales?: Maybe<Scalars["Int"]>;
};

export type ProductRatingListingTab =
  | "BestRated"
  | "WorstRated"
  | "MostReviewed";

export type ProductSchema = {
  readonly __typename?: "ProductSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly sku?: Maybe<Scalars["String"]>;
  readonly name: Scalars["String"];
  readonly smallPictureUrl: Scalars["String"];
  readonly categories?: Maybe<ReadonlyArray<TrueTagSchema>>;
  readonly description: Scalars["String"];
  readonly enabled: Scalars["Boolean"];
  readonly variations: ReadonlyArray<VariationSchema>;
  readonly mainImage: ImageSchema;
  readonly extraImages?: Maybe<ReadonlyArray<ImageSchema>>;
  readonly shipping: ShippingSchema;
  readonly createTime: Datetime;
  readonly lastUpdateTime: Datetime;
  readonly sales: Scalars["Int"];
  readonly totalInventory: Scalars["Int"];
  readonly variationCount: Scalars["Int"];
  readonly merchantId: Scalars["ObjectIdType"];
  readonly tags: ReadonlyArray<Scalars["String"]>;
  readonly reviewStatus: CommerceProductReviewStatus;
  readonly fpWorkflow?: Maybe<FeedProcessingWorkflowSchema>;
  readonly invalidCategoryNote?: Maybe<Scalars["String"]>;
  readonly infractions: ReadonlyArray<InfractionSchema>;
  readonly productTrueTagInfo?: Maybe<ProductTrueTagInfoSchema>;
  readonly fpReviewStatus: CommerceProductFpReviewStatus;
  readonly listingState: ListingStateSchema;
  readonly wishes: Scalars["Int"];
  readonly isUnityBlacklisted: Scalars["Boolean"];
  readonly isUnityPendingStandardWarehouse: Scalars["Boolean"];
  readonly unityEffectiveDateStandardWarehouse?: Maybe<Datetime>;
  readonly isPromoted: Scalars["Boolean"];
  readonly requestedBrandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly requestedBrand?: Maybe<BrandSchema>;
  readonly msrp?: Maybe<CurrencyValue>;
  readonly upc?: Maybe<Scalars["String"]>;
  readonly shippingProfile?: Maybe<ShippingProfileSchema>;
  readonly totalGmv: CurrencyValue;
  readonly demoVideo?: Maybe<ProductVideo>;
  readonly isRemovedByWish: Scalars["Boolean"];
  readonly isRemovedByMerchant: Scalars["Boolean"];
  readonly isRemoved: Scalars["Boolean"];
  readonly isEuCompliant: Scalars["Boolean"];
  readonly stats: ProductStats;
  readonly analyticsService: ProductAnalyticsSchema;
  readonly condition?: Maybe<CommerceProductCondition>;
  readonly trueTags?: Maybe<ReadonlyArray<TrueTagSchema>>;
  readonly eligibleForCategoryDispute?: Maybe<ProductCategoryDisputeEligibility>;
  readonly referenceWeight?: Maybe<Weight>;
  readonly referenceLength?: Maybe<Length>;
  readonly referenceVolume?: Maybe<Volume>;
  readonly referenceArea?: Maybe<Area>;
  readonly referenceUnit?: Maybe<Count>;
  readonly countryBlocks?: Maybe<ReadonlyArray<ProductCountryBlockSchema>>;
  readonly maxQuantity?: Maybe<Scalars["Int"]>;
  readonly attributes?: Maybe<ReadonlyArray<MerchantProvidedAttributeSchema>>;
  readonly warningType?: Maybe<ContestWarningType>;
  readonly chemicalNames?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly performance?: Maybe<ProductPerformanceSchema>;
  readonly taxonomyCategory?: Maybe<TaxonomyCategorySchema>;
  readonly l1Category?: Maybe<TaxonomyCategorySchema>;
  readonly categoryExperienceEligibility?: Maybe<Scalars["Boolean"]>;
  readonly subcategoryId?: Maybe<Scalars["Int"]>;
  readonly subcategory?: Maybe<TaxonomyCategorySchema>;
  readonly variationOptions?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly isReturnsEnabled?: Maybe<Scalars["Boolean"]>;
  readonly isLtl?: Maybe<Scalars["Boolean"]>;
  readonly hasBrand?: Maybe<Scalars["Boolean"]>;
  readonly isWishExpress: Scalars["Boolean"];
  readonly flatRateShippingCountryCandidates?: Maybe<
    ReadonlyArray<FlatRateShippingCountryCandidate>
  >;
};

export type ProductSchemaVariationsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
};

export type ProductSchemaShippingArgs = {
  warehouseId?: Maybe<Scalars["String"]>;
};

export type ProductSchemaDemoVideoArgs = {
  useGroupings?: Maybe<Scalars["Boolean"]>;
};

export type ProductSchemaPerformanceArgs = {
  startDate: DatetimeInput;
  endDate: DatetimeInput;
};

export type ProductSearchType = "ID" | "NAME" | "SKU" | "PARENTSKU";

export type ProductSort = {
  readonly field: ProductSortField;
  readonly order: SortOrderType;
};

export type ProductSortField = "ID" | "SALES" | "SKU" | "LAST_UPDATE";

export type ProductStats = {
  readonly __typename?: "ProductStats";
  readonly totals: ProductTotalStats;
  readonly daily: ReadonlyArray<ProductTotalStats>;
  readonly weekly?: Maybe<ProductWeeklyStats>;
};

export type ProductStatsTotalsArgs = {
  days: Scalars["Int"];
  coreMetricsOnly?: Maybe<Scalars["Boolean"]>;
};

export type ProductStatsDailyArgs = {
  days: Scalars["Int"];
  coreMetricsOnly?: Maybe<Scalars["Boolean"]>;
};

export type ProductStatsWeeklyArgs = {
  weeksFromTheLatest?: Maybe<Scalars["Int"]>;
};

export type ProductTaggingStatusSchema = {
  readonly __typename?: "ProductTaggingStatusSchema";
  readonly productPredictedCategory?: Maybe<ProductPredictedCategory>;
  readonly imageChangeMlTaggerJobs?: Maybe<
    ReadonlyArray<ImageChangeMlTaggerJobSchema>
  >;
  readonly productCategorizationHistory: ReadonlyArray<ProductCategorization>;
};

export type ProductTaxonomyCategoryDisputeAdminUnchangedReason =
  | "IMAGE_MISMATCH"
  | "OTHER"
  | "CORRECTLY_TAGGED";

export type ProductTaxonomyCategoryDisputeEligibilityEnum =
  | "PRODUCT_LIFETIME_DISPUTE_QUOTA_EXCEEDED"
  | "MERCHANT_MONTHLY_DISPUTE_QUOTA_EXCEEDED"
  | "PRODUCT_NOT_CATEGORIZED"
  | "PRODUCT_NOT_ACTIVE"
  | "ELIGIBLE";

export type ProductTaxonomyCategoryDisputeHub = {
  readonly __typename?: "ProductTaxonomyCategoryDisputeHub";
  readonly disputeCount: Scalars["Int"];
  readonly disputes: ReadonlyArray<ProductTaxonomyCategoryDisputeSchema>;
  readonly dispute?: Maybe<ProductTaxonomyCategoryDisputeSchema>;
  readonly productDisputeEligibility?: Maybe<ProductTaxonomyCategoryDisputeEligibilityEnum>;
};

export type ProductTaxonomyCategoryDisputeHubDisputeCountArgs = {
  states?: Maybe<ReadonlyArray<ProductTaxonomyCategoryDisputeState>>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
};

export type ProductTaxonomyCategoryDisputeHubDisputesArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  states?: Maybe<ReadonlyArray<ProductTaxonomyCategoryDisputeState>>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
};

export type ProductTaxonomyCategoryDisputeHubDisputeArgs = {
  disputeId?: Maybe<Scalars["ObjectIdType"]>;
  productId?: Maybe<Scalars["ObjectIdType"]>;
};

export type ProductTaxonomyCategoryDisputeHubProductDisputeEligibilityArgs = {
  productId: Scalars["ObjectIdType"];
};

export type ProductTaxonomyCategoryDisputeSchema = {
  readonly __typename?: "ProductTaxonomyCategoryDisputeSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly product: ProductSchema;
  readonly merchant: MerchantSchema;
  readonly state: ProductTaxonomyCategoryDisputeState;
  readonly datetimeCreated: Datetime;
  readonly datetimeResolved?: Maybe<Datetime>;
  readonly adminUnchangedReason?: Maybe<ProductTaxonomyCategoryDisputeAdminUnchangedReason>;
  readonly adminNote?: Maybe<Scalars["String"]>;
  readonly merchantNote?: Maybe<Scalars["String"]>;
  readonly supportFiles?: Maybe<ReadonlyArray<MerchantFileSchema>>;
  readonly categoryDisputed: TaxonomyCategorySchema;
  readonly categoryProposed: TaxonomyCategorySchema;
  readonly categoryApproved?: Maybe<TaxonomyCategorySchema>;
};

export type ProductTaxonomyCategoryDisputeState =
  | "RESOLVED_UNCHANGED"
  | "RESOLVED_UPDATED"
  | "PENDING_REVIEW";

export type ProductTierPriceSchema = {
  readonly __typename?: "ProductTierPriceSchema";
  readonly tier: ProductListingPlanTier;
  readonly productCount: Scalars["Int"];
  readonly price: CurrencyValue;
};

export type ProductTotalStats = {
  readonly __typename?: "ProductTotalStats";
  readonly gmv: CurrencyValue;
  readonly orders: Scalars["Int"];
  readonly impressions: Scalars["BigInt"];
  readonly startDate: Datetime;
  readonly endDate: Datetime;
};

export type ProductTrueTagInfoSchema = {
  readonly __typename?: "ProductTrueTagInfoSchema";
  readonly counterfeitViolation: CounterfeitViolationSchema;
  readonly counterfeitLastTagged?: Maybe<Datetime>;
  readonly inappropriateViolation: InappropriateViolationSchema;
  readonly inappropriateLastTagged?: Maybe<Datetime>;
  readonly subreason?: Maybe<TaggingViolationSubcategory>;
};

export type ProductUpsertInput = {
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly enabled?: Maybe<Scalars["Boolean"]>;
  readonly name?: Maybe<Scalars["String"]>;
  readonly description?: Maybe<Scalars["String"]>;
  readonly variations?: Maybe<ReadonlyArray<VariationInput>>;
  readonly images?: Maybe<ReadonlyArray<ImageInput>>;
  readonly defaultShipping?: Maybe<ReadonlyArray<DefaultShippingInput>>;
  readonly domesticShipping?: Maybe<ReadonlyArray<DomesticShippingInput>>;
  readonly sku?: Maybe<Scalars["String"]>;
  readonly upc?: Maybe<Scalars["String"]>;
  readonly requestedBrandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly tags?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly warehouseId?: Maybe<Scalars["ObjectIdType"]>;
  readonly countryShipping?: Maybe<
    ReadonlyArray<WarehouseCountryShippingInput>
  >;
  readonly msrp?: Maybe<CurrencyInput>;
  readonly shippingProfileId?: Maybe<Scalars["ObjectIdType"]>;
  readonly shippingProfile?: Maybe<ShippingProfileUpsertInput>;
  readonly demoVideoSourceUrl?: Maybe<Scalars["String"]>;
  readonly condition?: Maybe<CommerceProductCondition>;
  readonly referenceWeight?: Maybe<WeightInput>;
  readonly referenceLength?: Maybe<LengthInput>;
  readonly referenceVolume?: Maybe<VolumeInput>;
  readonly referenceArea?: Maybe<AreaInput>;
  readonly referenceUnit?: Maybe<CountInput>;
  readonly maxQuantity?: Maybe<Scalars["Int"]>;
  readonly attributes?: Maybe<ReadonlyArray<AttributeInput>>;
  readonly warningType?: Maybe<ContestWarningType>;
  readonly chemicalNames?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly subcategoryId?: Maybe<Scalars["Int"]>;
};

export type ProductVideo = {
  readonly __typename?: "ProductVideo";
  readonly id: Scalars["ObjectIdType"];
  readonly merchantId: Scalars["ObjectIdType"];
  readonly productId: Scalars["ObjectIdType"];
  readonly lowQuality?: Maybe<RaccVideoAsset>;
  readonly mediumQuality?: Maybe<RaccVideoAsset>;
  readonly highQuality?: Maybe<RaccVideoAsset>;
  readonly preview?: Maybe<RaccVideoAsset>;
  readonly uploadTime: Datetime;
  readonly source: RaccVideoAsset;
  readonly state: ProductVideoState;
  readonly rejectionReason?: Maybe<Scalars["String"]>;
  readonly viewCount?: Maybe<Scalars["Int"]>;
  readonly likeCount?: Maybe<Scalars["Int"]>;
  readonly title?: Maybe<Scalars["String"]>;
  readonly description?: Maybe<Scalars["String"]>;
  readonly averageWatchTime?: Maybe<Scalars["Float"]>;
  readonly totalWatchTime?: Maybe<Scalars["Float"]>;
  readonly audio?: Maybe<ProductVideoAudio>;
  readonly audioStartTime?: Maybe<Scalars["Float"]>;
  readonly videoSource?: Maybe<ProductVideoSource>;
  readonly lastUpdated?: Maybe<Datetime>;
};

export type ProductVideoAudio = {
  readonly __typename?: "ProductVideoAudio";
  readonly id: Scalars["ObjectIdType"];
  readonly trackTitle: Scalars["String"];
  readonly moodEmotion: ReadonlyArray<AudioMoodEmotion>;
  readonly productCategory: ReadonlyArray<AudioProductCategory>;
  readonly duration: Scalars["Float"];
  readonly url: Scalars["String"];
  readonly genres: ReadonlyArray<AudioGenre>;
};

export type ProductVideoContentReviewTraits = {
  readonly rotationIsIncorrect?: Maybe<Scalars["Boolean"]>;
  readonly isBlank?: Maybe<Scalars["Boolean"]>;
  readonly isImageSlideshow?: Maybe<Scalars["Boolean"]>;
  readonly isBlurry?: Maybe<Scalars["Boolean"]>;
  readonly isScreenRecording?: Maybe<Scalars["Boolean"]>;
  readonly hasEngravedText?: Maybe<Scalars["Boolean"]>;
  readonly hasHatefulSymbol?: Maybe<Scalars["Boolean"]>;
  readonly hasPartialNudity?: Maybe<Scalars["Boolean"]>;
  readonly hasEngravedNonEnglishText?: Maybe<Scalars["Boolean"]>;
  readonly hasObsceneGraphicContent?: Maybe<Scalars["Boolean"]>;
  readonly hasNudity?: Maybe<Scalars["Boolean"]>;
  readonly hasPersonTalking?: Maybe<Scalars["Boolean"]>;
  readonly hasMerchantBranding?: Maybe<Scalars["Boolean"]>;
  readonly hasMale?: Maybe<Scalars["Boolean"]>;
  readonly hasFemale?: Maybe<Scalars["Boolean"]>;
  readonly hasMinor?: Maybe<Scalars["Boolean"]>;
  readonly refersConsumerOffPlatform?: Maybe<Scalars["Boolean"]>;
  readonly containsMoreThanOneProduct?: Maybe<Scalars["Boolean"]>;
  readonly isFactoryVideo?: Maybe<Scalars["Boolean"]>;
  readonly isSensitiveVideo?: Maybe<Scalars["Boolean"]>;
};

export type ProductVideoContentTagMutations = {
  readonly __typename?: "ProductVideoContentTagMutations";
  readonly submitProductVideoContentReview?: Maybe<SubmitProductVideoContentReview>;
  readonly submitProductVideoContentManualReview?: Maybe<SubmitProductVideoContentManualReview>;
};

export type ProductVideoContentTagMutationsSubmitProductVideoContentReviewArgs =
  {
    input: SubmitProductVideoContentReviewInput;
  };

export type ProductVideoContentTagMutationsSubmitProductVideoContentManualReviewArgs =
  {
    input: SubmitProductVideoContentManualReviewInput;
  };

export type ProductVideoDailyStats = {
  readonly __typename?: "ProductVideoDailyStats";
  readonly date: Datetime;
  readonly views?: Maybe<Scalars["Int"]>;
  readonly likes?: Maybe<Scalars["Int"]>;
  readonly watchTime?: Maybe<Scalars["Float"]>;
  readonly gmv?: Maybe<Scalars["Float"]>;
  readonly avgWatchTime: Scalars["Float"];
  readonly engagedViews: Scalars["Int"];
  readonly buyerIntent: Scalars["Float"];
  readonly addToCart: Scalars["Int"];
  readonly conversions: Scalars["Float"];
};

export type ProductVideoIpTagMutations = {
  readonly __typename?: "ProductVideoIPTagMutations";
  readonly submitProductVideoIpReview?: Maybe<SubmitProductVideoIpReview>;
  readonly submitProductVideoIpManualReview?: Maybe<SubmitProductVideoIpManualReview>;
};

export type ProductVideoIpTagMutationsSubmitProductVideoIpReviewArgs = {
  input: SubmitProductVideoIpReviewInput;
};

export type ProductVideoIpTagMutationsSubmitProductVideoIpManualReviewArgs = {
  input: SubmitProductVideoIpManualReviewInput;
};

export type ProductVideoIpViolationReason =
  | "UNLICENSED_MEDIA"
  | "BLURRED_INFORMATION"
  | "COPYRIGHT_IMAGES"
  | "UNKNOWN"
  | "COMMERCIAL"
  | "EMBEDDED_LOGO"
  | "PICTURED_WITH_MAJOR_BRAND"
  | "COUNTERFEIT_OR_IP_VIOLATION";

export type ProductVideoServiceSchema = {
  readonly __typename?: "ProductVideoServiceSchema";
  readonly videoCount: Scalars["Int"];
  readonly videos: ReadonlyArray<ProductVideo>;
  readonly leaderboard?: Maybe<VideoLeaderboard>;
  readonly performance?: Maybe<VideoPerformance>;
  readonly audioCount: Scalars["Int"];
  readonly audios: ReadonlyArray<ProductVideoAudio>;
  readonly recommendedAudios: ReadonlyArray<ProductVideoAudio>;
};

export type ProductVideoServiceSchemaVideoCountArgs = {
  query?: Maybe<Scalars["String"]>;
  videoStates?: Maybe<ReadonlyArray<ProductVideoState>>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  searchType?: Maybe<VideoSearchType>;
};

export type ProductVideoServiceSchemaVideosArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<VideoSearchType>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<VideoSort>;
  videoStates?: Maybe<ReadonlyArray<ProductVideoState>>;
};

export type ProductVideoServiceSchemaLeaderboardArgs = {
  category?: Maybe<VideoCategory>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
};

export type ProductVideoServiceSchemaPerformanceArgs = {
  startDate?: Maybe<DatetimeInput>;
  endDate?: Maybe<DatetimeInput>;
  videoId?: Maybe<Scalars["ObjectIdType"]>;
};

export type ProductVideoServiceSchemaAudioCountArgs = {
  trackTitle?: Maybe<Scalars["String"]>;
  moodEmotion?: Maybe<AudioMoodEmotion>;
  productCategory?: Maybe<AudioProductCategory>;
  genre?: Maybe<AudioGenre>;
};

export type ProductVideoServiceSchemaAudiosArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  trackTitle?: Maybe<Scalars["String"]>;
  moodEmotion?: Maybe<AudioMoodEmotion>;
  productCategory?: Maybe<AudioProductCategory>;
  genre?: Maybe<AudioGenre>;
};

export type ProductVideoServiceSchemaRecommendedAudiosArgs = {
  productCategory?: Maybe<AudioProductCategory>;
};

export type ProductVideoSource = "MERCHANT" | "INFLUENCER" | "THIRD_PARTY";

export type ProductVideoState =
  | "UNKNOWN_STATE"
  | "PENDING_TRANSCODE"
  | "PENDING_REVIEW"
  | "APPROVED"
  | "REJECTED"
  | "FAILED_TRANSCODE"
  | "PENDING_AUTO_REVIEW"
  | "FAILED_AUTO_REVIEW"
  | "FAILED_OBJECT_DETECTION"
  | "PENDING_REKOGNITION"
  | "FAILED_REKOGNITION";

export type ProductVideoTaggerJobSchema = {
  readonly __typename?: "ProductVideoTaggerJobSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly source: ProductVideoTaggerJobSource;
  readonly product?: Maybe<ProductSchema>;
};

export type ProductVideoTaggerJobSource =
  | "NOT_CAPTURED"
  | "USER_REPORT"
  | "MERCHANT_UPLOAD"
  | "MANUAL_REVIEW";

export type ProductWeeklyStats = {
  readonly __typename?: "ProductWeeklyStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly refund: RefundPerformanceStats;
  readonly cs: CsPerformanceStats;
  readonly sales: SalesPerformanceStats;
};

export type PromotableProduct = {
  readonly __typename?: "PromotableProduct";
  readonly product: ProductSchema;
  readonly isInTrendingCategory: Scalars["Boolean"];
};

export type PublicShippingProviderDocs = {
  readonly __typename?: "PublicShippingProviderDocs";
  readonly shippingProviderPolicies?: Maybe<
    ReadonlyArray<ShippingProviderPolicySchema>
  >;
};

export type PublicShippingProviderDocsShippingProviderPoliciesArgs = {
  destCountryCode?: Maybe<CountryCode>;
};

export type PublishAnnouncement = {
  readonly __typename?: "PublishAnnouncement";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type PublishAnnouncementInput = {
  readonly id: Scalars["ObjectIdType"];
  readonly publishDate?: Maybe<DatetimeInput>;
};

export type RaccVideoAsset = {
  readonly __typename?: "RaccVideoAsset";
  readonly url: Scalars["String"];
  readonly contentType: Scalars["String"];
};

export type RatingBreakdown = {
  readonly __typename?: "RatingBreakdown";
  readonly oneStarRatings?: Maybe<Scalars["Int"]>;
  readonly twoStarRatings?: Maybe<Scalars["Int"]>;
  readonly threeStarRatings?: Maybe<Scalars["Int"]>;
  readonly fourStarRatings?: Maybe<Scalars["Int"]>;
  readonly fiveStarRatings?: Maybe<Scalars["Int"]>;
};

export type RatingPerformanceStats = {
  readonly __typename?: "RatingPerformanceStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly averageProductRating?: Maybe<Scalars["Float"]>;
  readonly storeRatings?: Maybe<Scalars["Int"]>;
  readonly storeRatingsBreakdown?: Maybe<RatingBreakdown>;
  readonly averageStoreRating?: Maybe<Scalars["Float"]>;
  readonly lowStoreRatingPercentage?: Maybe<Scalars["Float"]>;
  readonly productRatings?: Maybe<Scalars["Int"]>;
  readonly productRatingsBreakdown?: Maybe<RatingBreakdown>;
  readonly lowProductRatingPercentage?: Maybe<Scalars["Float"]>;
  readonly average30dStoreRating?: Maybe<Scalars["Float"]>;
};

export type Reason =
  | "MISSING"
  | "REDUNDANT"
  | "INCORRECT"
  | "UNEXPECTED"
  | "UNMATCHED"
  | "LEDGER_ITEMS_NOT_FOUND"
  | "INVALID_CURRENCY"
  | "INCORRECT_TOTAL_AMOUNT"
  | "INCONSISTENT_PET";

export type RedirectType = "NEW_PAGE" | "POPUP_MODAL";

export type RefundAmountType = "PRICE" | "SHIPPING" | "GENERAL";

export type RefundAssuranceConstants = {
  readonly __typename?: "RefundAssuranceConstants";
  readonly enabled: Scalars["Boolean"];
  readonly spendDiscountFactor: Scalars["Float"];
  readonly guaranteedRefundRate: Scalars["Float"];
};

export type RefundDisputeHub = {
  readonly __typename?: "RefundDisputeHub";
  readonly disputeCount?: Maybe<Scalars["Int"]>;
  readonly disputes?: Maybe<ReadonlyArray<RefundDisputeSchema>>;
  readonly dispute?: Maybe<RefundDisputeSchema>;
};

export type RefundDisputeHubDisputeCountArgs = {
  states: ReadonlyArray<DisputeState>;
  reasons?: Maybe<ReadonlyArray<DisputeReason>>;
  searchType?: Maybe<RefundDisputeSearchType>;
  query?: Maybe<Scalars["String"]>;
};

export type RefundDisputeHubDisputesArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  states: ReadonlyArray<DisputeState>;
  reasons?: Maybe<ReadonlyArray<DisputeReason>>;
  searchType?: Maybe<RefundDisputeSearchType>;
  query?: Maybe<Scalars["String"]>;
  sort?: Maybe<DisputeSort>;
};

export type RefundDisputeHubDisputeArgs = {
  id: Scalars["ObjectIdType"];
};

export type RefundDisputeMutations = {
  readonly __typename?: "RefundDisputeMutations";
  readonly reply?: Maybe<RefundDisputeReplyMutation>;
};

export type RefundDisputeMutationsReplyArgs = {
  input: RefundDisputeReplyMutationInput;
};

export type RefundDisputeReplyMutation = {
  readonly __typename?: "RefundDisputeReplyMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type RefundDisputeReplyMutationInput = {
  readonly disputeId: Scalars["ObjectIdType"];
  readonly message: Scalars["String"];
  readonly files?: Maybe<ReadonlyArray<FileInput>>;
};

export type RefundDisputeSchema = {
  readonly __typename?: "RefundDisputeSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly orderId: Scalars["ObjectIdType"];
  readonly order: OrderSchema;
  readonly consumerId: Scalars["ObjectIdType"];
  readonly disputeAmount: CurrencyValue;
  readonly isReturnDispute: Scalars["Boolean"];
  readonly reason: DisputeReasonSchema;
  readonly merchant?: Maybe<MerchantSchema>;
  readonly state: DisputeState;
  readonly lastUpdate: Datetime;
  readonly product: ProductSchema;
  readonly productId: Scalars["ObjectIdType"];
  readonly messages: ReadonlyArray<DisputeMessageSchema>;
};

export type RefundDisputeSearchType = "ORDER_ID";

export type RefundError = {
  readonly __typename?: "RefundError";
  readonly orderId: Scalars["ObjectIdType"];
  readonly message: Scalars["String"];
};

export type RefundOrderInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly reasonCategory: RefundReasonCategory;
  readonly buyerFraudReasonCategory?: Maybe<BuyerFraudReasonCategory>;
  readonly reasonNote?: Maybe<Scalars["String"]>;
  readonly source?: Maybe<RefundSource>;
  readonly ticketId?: Maybe<Scalars["ObjectIdType"]>;
  readonly brandName?: Maybe<Scalars["String"]>;
  readonly partialQuantity?: Maybe<Scalars["Int"]>;
  readonly expectedRefunds?: Maybe<Scalars["Int"]>;
  readonly shouldRefundToCash?: Maybe<Scalars["Boolean"]>;
  readonly partialRefundAmount?: Maybe<Scalars["Float"]>;
  readonly partialAmountRefundType?: Maybe<RefundAmountType>;
  readonly partialAmountNote?: Maybe<Scalars["String"]>;
};

export type RefundOrders = {
  readonly __typename?: "RefundOrders";
  readonly refundedCount: Scalars["Int"];
  readonly errorMessages?: Maybe<ReadonlyArray<RefundError>>;
};

export type RefundPerformanceStats = {
  readonly __typename?: "RefundPerformanceStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly refundRate?: Maybe<Scalars["Float"]>;
  readonly refunds?: Maybe<Scalars["Int"]>;
  readonly itemNotMatchingListingPercentage?: Maybe<Scalars["Float"]>;
  readonly itemNotFitPercentage?: Maybe<Scalars["Float"]>;
  readonly shippingTakeTooLongPercentage?: Maybe<Scalars["Float"]>;
  readonly itemDamagedPercentage?: Maybe<Scalars["Float"]>;
  readonly receivedWrongItemPercentage?: Maybe<Scalars["Float"]>;
  readonly itemReturnedPercentage?: Maybe<Scalars["Float"]>;
  readonly itemNotWorkPercentage?: Maybe<Scalars["Float"]>;
  readonly failToFulfillPercentage?: Maybe<Scalars["Float"]>;
  readonly deliverWrongAddressPercentage?: Maybe<Scalars["Float"]>;
  readonly incompleteOrderPercentage?: Maybe<Scalars["Float"]>;
  readonly refundRatePercentile?: Maybe<Scalars["Int"]>;
};

export type RefundReasonCategory =
  | "FBW_FAILED_TO_FULFILL_DUE_TO_CARRIER_RETURN"
  | "ITEM_DAMAGED"
  | "EPC_OVERWEIGHT"
  | "COMMERCEHUB_SUPPLIER_DETECTED_FRAUD"
  | "DOES_NOT_FIT_USERS_FAULT"
  | "CS_REFUND_FOR_USER_CANCEL"
  | "DECLINED_GIFT"
  | "INVALID_ADDRESS"
  | "ORDER_ROUTING"
  | "BLUE_PROGRAM_DEPRECATION"
  | "BLUE_FUSION_STORE_NOT_SCAN_IN"
  | "ITEM_NEVER_ARRIVED"
  | "INSUFFICIENT_INVENTORY"
  | "ITEM_IS_DANGEROUS"
  | "POOR_QUALITY"
  | "MERCHANT_SENT_TO_WRONG_ADDRESS"
  | "CONTENT_POLICY_VIOLATION_CANCELLATION"
  | "ITEM_DOES_NOT_MATCH_LISTING"
  | "NOT_QUALIFIED_SHIPPING_PROVIDER"
  | "BLUE_FUSION_IN_TRANSIT_LOST"
  | "UNABLE_TO_SHIP"
  | "COMMERCEHUB_BAD_ADDRESS"
  | "PRODUCT_MALFUNCTION"
  | "COMMERCEHUB_BAD_SKU"
  | "DOES_FIT_WRONG_SIZE"
  | "WISHBLUE_EPC_LATE_FULFILLMENT"
  | "ONEOFF_WISH_ERROR"
  | "FBS_STORE_QUIT"
  | "SUSPECTED_FRAUD"
  | "REPLACEMENT_NEVER_RECEIVED"
  | "CB_USER_CANCELLED_ORDER"
  | "STORE_SENT_THE_WRONG_SIZE"
  | "RECEIVED_NOTE_FROM_MERCHANT"
  | "BLUE_FUSION_SENT_TO_WRONG_STORE"
  | "INCOMPLETE_ORDER"
  | "ITEM_HELD_AT_CUSTOMS"
  | "USER_ENTERED_INVALID_ADDRESS"
  | "CONSUMER_FRAUD"
  | "ITEM_IS_DAMAGED"
  | "LATE_OR_MISSING"
  | "MERCHANT_REPORTED_BUYER_FRAUD"
  | "MISLEADING_LISTING"
  | "BLUE_STORE_QUIT"
  | "ITEM_DID_NOT_MEET_EXPECTATIONS"
  | "ITEM_DOES_NOT_WORK_AS_DESCRIBED"
  | "PRODUCT_LISTING_MISSING_INFO"
  | "IN_GRACE_PERIOD_DELAY_CANCEL"
  | "USER_NO_LONGER_WANTS_ITEM"
  | "SHOPIFY_MERCHANT_CANCELLED"
  | "EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP"
  | "EPC_OVERSIZE"
  | "INCORRECT_QUANTITY_OF_ITEMS"
  | "ITEM_DOES_NOT_FIT"
  | "EXPIRED_GIFT"
  | "SHIPPING_TAKING_TOO_LONG"
  | "MERCHANT_OUT_OF_STOCK"
  | "FBW_WAREHOUSE_FAILED_TO_FULFILL"
  | "CUSTOMER_REQUEST"
  | "FAKE_OR_COUNTERFEIT"
  | "DOES_NOT_FIT"
  | "PRICE_MATCH"
  | "EPC_OVERVALUE"
  | "WRONG_ITEM"
  | "PREFER_NOT_TO_SAY"
  | "BLUE_STORE_OUT_OF_STOCK"
  | "COMMERCEHUB_OTHER"
  | "ORDER_PLACED_BY_TECHNICAL_ERROR"
  | "DOES_NOT_FIT_INCORRECT_SIZE"
  | "BLUE_FUSION_STORE_LOST"
  | "MERCHANT_FAILED_TO_FULFILL"
  | "ITEM_RETURNED_TO_SENDER"
  | "COMMERCEHUB_CANCELLED_AT_MERCHANTS_REQUEST"
  | "WRONG_COLOR"
  | "USER_CANCEL_CHANGE_PAYMENT"
  | "CONFIRMED_FUSION_ITEM_NOT_PICKED_UP"
  | "CIRCULAR_ROUTED_UNFULFILLED"
  | "CUSTOMER_MANUFACTURER_COMPLAINT"
  | "USER_CANCELLED_ORDER"
  | "STORE_UPLOADED_INVENTORY_RETURN"
  | "RIGHT_OF_WITHDRAWAL"
  | "DOES_NOT_FIT_WRONG_SIZE"
  | "EMPTY_PACKAGE"
  | "MISSING_ITEM_OR_PARTS"
  | "PRESALE_TIMELINE_CLOSED"
  | "COMMERCEHUB_OUT_OF_STOCK"
  | "FRAUDULENT_ACTIVITY"
  | "RECEIVED_WRONG_ITEM"
  | "BLUE_ADMIN_REFUND"
  | "ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE"
  | "ITEM_IS_COUNTERFEIT"
  | "USER_PLACED_ORDER_BY_MISTAKE"
  | "PREORDER_NOT_FULFILLED"
  | "OTHER"
  | "ITEM_IS_POOR_QUALITY"
  | "LIMBO_ORDER_UNFULFILLED"
  | "CLEARING_LIMBO"
  | "BLUE_DELIVERY_NOT_DELIVERED"
  | "EXPIRED_GROUP_BUY"
  | "USER_ENTERED_WRONG_ADDRESS"
  | "ITEM_MARKED_DELIVERED_NOT_ALL_ITEMS_ARRIVED"
  | "MERCHANT_REPORTED_ORDER"
  | "PICKUP_NOW_ITEM_NOT_PICKED_UP";

export type RefundSource = "MERCHANT" | "WISH" | "USER" | "PAYMENT_PROVIDER";

export type RefundType = "FULL" | "PARTIAL";

export type Region = {
  readonly __typename?: "Region";
  readonly code: Scalars["String"];
  readonly name: Scalars["String"];
  readonly country: Country;
};

export type RegionShippingInput = {
  readonly regionCode: Scalars["String"];
  readonly enabled?: Maybe<Scalars["Boolean"]>;
  readonly price?: Maybe<CurrencyInput>;
  readonly additionalPrice?: Maybe<CurrencyInput>;
  readonly timeToDoor?: Maybe<Scalars["Int"]>;
};

export type RegionShippingSchema = {
  readonly __typename?: "RegionShippingSchema";
  readonly region: Region;
  readonly enabled?: Maybe<Scalars["Boolean"]>;
  readonly price?: Maybe<CurrencyValue>;
  readonly additionalPrice?: Maybe<CurrencyValue>;
  readonly timeToDoor?: Maybe<Scalars["Int"]>;
};

export type RegulatorAction = "UPSERT";

export type RegulatorReportAction = "CREATE";

export type RegulatorReportReason =
  | "DANGEROUS_OR_UNSAFE"
  | "OTHER_NON_COMPLIANCE"
  | "HAZARDOUS"
  | "POLICY_VIOLATION";

export type RegulatorSchema = {
  readonly __typename?: "RegulatorSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly country: Country;
  readonly organization: Scalars["String"];
  readonly website: Scalars["String"];
  readonly name: Scalars["String"];
  readonly emailAddress: Scalars["String"];
  readonly phoneNumber?: Maybe<Scalars["String"]>;
  readonly title?: Maybe<Scalars["String"]>;
};

export type RejectReturn = {
  readonly __typename?: "RejectReturn";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type RejectReturnInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly rejectReason: ReturnRequestRejectReason;
  readonly message: Scalars["String"];
  readonly otherReasonExplanation?: Maybe<Scalars["String"]>;
  readonly supportingDocument?: Maybe<Scalars["String"]>;
};

export type RejectTrademarkInput = {
  readonly id: Scalars["ObjectIdType"];
  readonly rejectionReason?: Maybe<Scalars["String"]>;
};

export type RejectTrademarksAndBrandInfo = {
  readonly __typename?: "RejectTrademarksAndBrandInfo";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type RejectTrademarksAndBrandInfoInput = {
  readonly brandInfoId: Scalars["ObjectIdType"];
  readonly trademarks: ReadonlyArray<RejectTrademarkInput>;
  readonly brandInfoRejectionReason?: Maybe<Scalars["String"]>;
};

export type ReleasePayoutRequest = {
  readonly __typename?: "ReleasePayoutRequest";
  readonly releasePaymentRequestId?: Maybe<Scalars["String"]>;
  readonly canResetPayout?: Maybe<Scalars["Boolean"]>;
};

export type RemoveCountFromMplus = {
  readonly __typename?: "RemoveCountFromMplus";
  readonly ok?: Maybe<Scalars["Boolean"]>;
  readonly removedIds: ReadonlyArray<Scalars["ObjectIdType"]>;
};

export type RemoveCountFromMplusInput = {
  readonly count?: Maybe<Scalars["Int"]>;
};

export type RemoveFromPlus = {
  readonly __typename?: "RemoveFromPlus";
  readonly ok?: Maybe<Scalars["Boolean"]>;
};

export type RemoveFromPlusInput = {
  readonly merchantIds: ReadonlyArray<Scalars["ObjectIdType"]>;
};

export type RemoveProduct = {
  readonly __typename?: "RemoveProduct";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type RemoveProductInput = {
  readonly productId: Scalars["ObjectIdType"];
};

export type RemoveShippingProfile = {
  readonly __typename?: "RemoveShippingProfile";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type RemoveVideo = {
  readonly __typename?: "RemoveVideo";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type RemoveVideoInput = {
  readonly videoId: Scalars["ObjectIdType"];
  readonly productId: Scalars["ObjectIdType"];
};

export type ReplyInfractionInput = {
  readonly message: Scalars["String"];
  readonly uploadFiles?: Maybe<ReadonlyArray<FileInput>>;
};

export type ReportAbuseHub = {
  readonly __typename?: "ReportAbuseHub";
  readonly regulator?: Maybe<RegulatorSchema>;
  readonly regulatorReportReasons?: Maybe<ReadonlyArray<RegulatorReportReason>>;
};

export type ReportAbuseHubRegulatorArgs = {
  emailAddress: Scalars["String"];
};

export type ReportAbuseMutations = {
  readonly __typename?: "ReportAbuseMutations";
  readonly upsertRegulatorReport?: Maybe<UpsertRegulatorReport>;
  readonly upsertRegulator?: Maybe<UpsertRegulator>;
};

export type ReportAbuseMutationsUpsertRegulatorReportArgs = {
  input?: Maybe<UpsertRegulatorReportInput>;
};

export type ReportAbuseMutationsUpsertRegulatorArgs = {
  input?: Maybe<UpsertRegulatorInput>;
};

export type ReportOrderInput = {
  readonly mTransactionId: Scalars["ObjectIdType"];
  readonly reportReasons: ReadonlyArray<ReportOrderReasons>;
  readonly reportExplanation: Scalars["String"];
};

export type ReportOrderMutation = {
  readonly __typename?: "ReportOrderMutation";
  readonly ok: Scalars["Boolean"];
  readonly errMessage?: Maybe<Scalars["String"]>;
};

export type ReportOrderReasons =
  | "POTENTIAL_SAFETY_THREAT"
  | "OTHER"
  | "SUSPICIOUS_ORDER"
  | "SUSPECTED_ILLEGAL_ACTIVITY";

export type RequestPaymentInput = {
  readonly idFiles?: Maybe<ReadonlyArray<FileInput>>;
  readonly agreementFiles?: Maybe<ReadonlyArray<FileInput>>;
};

export type ResetPasswordMutation = {
  readonly __typename?: "ResetPasswordMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly ok: Scalars["Boolean"];
};

export type ResetPasswordMutationInput = {
  readonly rawPassword: Scalars["String"];
  readonly comparePassword: Scalars["String"];
  readonly username: Scalars["String"];
  readonly token: Scalars["String"];
};

export type ResetReleasePaymentRequestInput = {
  readonly requestId: Scalars["ObjectIdType"];
};

export type ResetReleasePaymentRequestMutation = {
  readonly __typename?: "ResetReleasePaymentRequestMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ResponsiblePersonAction =
  | "CREATE"
  | "REJECT"
  | "APPROVE"
  | "UPDATE"
  | "DELETE";

export type ResponsiblePersonAddressSchema = {
  readonly __typename?: "ResponsiblePersonAddressSchema";
  readonly name: Scalars["String"];
  readonly streetAddress1: Scalars["String"];
  readonly streetAddress2?: Maybe<Scalars["String"]>;
  readonly city: Scalars["String"];
  readonly zipcode?: Maybe<Scalars["String"]>;
  readonly countryCode: EuComplianceResponsiblePersonCountriesAndRegionsCode;
  readonly state?: Maybe<Scalars["String"]>;
  readonly county?: Maybe<Scalars["String"]>;
  readonly country: EuComplianceResponsiblePersonCountriesAndRegions;
  readonly phoneNumber?: Maybe<Scalars["String"]>;
};

export type ResponsiblePersonFieldType = "RISK_SCORE";

export type ResponsiblePersonRejectionReason =
  | "INVALID_NAME"
  | "INVALID_ADDRESS"
  | "INVALID_PHONE_AND_EMAIL";

export type ResponsiblePersonRejectReasonSchema = {
  readonly __typename?: "ResponsiblePersonRejectReasonSchema";
  readonly reason: ResponsiblePersonRejectionReason;
  readonly text: Scalars["String"];
};

export type ResponsiblePersonSchema = {
  readonly __typename?: "ResponsiblePersonSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly merchantId: Scalars["ObjectIdType"];
  readonly merchant: MerchantSchema;
  readonly address?: Maybe<ResponsiblePersonAddressSchema>;
  readonly email: Scalars["String"];
  readonly status?: Maybe<ResponsiblePersonStatus>;
  readonly rejectReason?: Maybe<ResponsiblePersonRejectionReason>;
  readonly compliance?: Maybe<LinkProductComplianceType>;
};

export type ResponsiblePersonSort = {
  readonly field: ResponsiblePersonFieldType;
  readonly order: SortOrderType;
};

export type ResponsiblePersonStatus =
  | "DELETED"
  | "ADMIN_APPROVED"
  | "COMPLETE"
  | "REJECTED"
  | "INREVIEW";

export type ResponsiblePersonUpsertInput = {
  readonly action: ResponsiblePersonAction;
  readonly responsiblePersonId?: Maybe<Scalars["ObjectIdType"]>;
  readonly address?: Maybe<EuComplianceAddressInput>;
  readonly email?: Maybe<Scalars["String"]>;
  readonly rejectReason?: Maybe<ResponsiblePersonRejectionReason>;
  readonly compliance: LinkProductComplianceType;
};

export type RestrictedProductCategory =
  | "UNVERIFIED_WARRANTIES"
  | "VITAMINS_AND_SUPPLEMENTS"
  | "FOOD"
  | "PLANT_AND_PLANT_SEEDS"
  | "CHILD_HARNESS"
  | "BEVERAGES"
  | "PET_FOOD"
  | "OTC_MEDICATION"
  | "CHILD_CARSEAT"
  | "SEATBELTS";

export type RestrictedProductCountryCode =
  | "BE"
  | "FR"
  | "BG"
  | "CO"
  | "DK"
  | "HR"
  | "TR"
  | "CA"
  | "DE"
  | "JP"
  | "IT"
  | "HU"
  | "CZ"
  | "AR"
  | "AU"
  | "GB"
  | "BR"
  | "FI"
  | "KR"
  | "IE"
  | "ES"
  | "GR"
  | "SK"
  | "NL"
  | "PT"
  | "MT"
  | "CH"
  | "SI"
  | "US"
  | "LV"
  | "EE"
  | "LT"
  | "LU"
  | "SE"
  | "RO"
  | "UA"
  | "MX"
  | "PL"
  | "AT";

export type RestrictedProductMutations = {
  readonly __typename?: "RestrictedProductMutations";
  readonly upsertRestrictedProductRequest?: Maybe<UpsertRestrictedProductRequest>;
};

export type RestrictedProductMutationsUpsertRestrictedProductRequestArgs = {
  input?: Maybe<RestrictedProductRequestUpsertInput>;
};

export type RestrictedProductRegion = {
  readonly __typename?: "RestrictedProductRegion";
  readonly regionName: Scalars["String"];
  readonly regionCode: RestrictedProductRegionCode;
  readonly isACountry: Scalars["Boolean"];
};

export type RestrictedProductRegionCode =
  | "LA"
  | "NA"
  | "TR"
  | "JP"
  | "KR"
  | "AU"
  | "EU";

export type RestrictedProductRegionToCategory = {
  readonly __typename?: "RestrictedProductRegionToCategory";
  readonly regionCode: RestrictedProductRegionCode;
  readonly categories: ReadonlyArray<RestrictedProductCategory>;
};

export type RestrictedProductRequestAction =
  | "CREATE"
  | "BATCH_APPROVE"
  | "APPROVE"
  | "BATCH_REJECT"
  | "REJECT";

export type RestrictedProductRequestFieldType =
  | "merchantId"
  | "formattedCreateTime";

export type RestrictedProductRequestSchema = {
  readonly __typename?: "RestrictedProductRequestSchema";
  readonly merchant?: Maybe<MerchantSchema>;
  readonly id: Scalars["ObjectIdType"];
  readonly merchantId: Scalars["ObjectIdType"];
  readonly state: RestrictedProductRequestState;
  readonly region: RestrictedProductRegion;
  readonly productCategory: RestrictedProductCategory;
  readonly rejectedReason?: Maybe<Scalars["String"]>;
  readonly ipAddress?: Maybe<Scalars["String"]>;
  readonly ipAddressCountry?: Maybe<Country>;
  readonly decisionDate?: Maybe<Datetime>;
  readonly decisionAdminId?: Maybe<Scalars["ObjectIdType"]>;
  readonly requestDate?: Maybe<Datetime>;
  readonly evidenceIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly businessEntityName?: Maybe<Scalars["String"]>;
  readonly legalRepName?: Maybe<Scalars["String"]>;
  readonly legalRepTitle?: Maybe<Scalars["String"]>;
  readonly merchantWarrantyDoc?: Maybe<MerchantFileSchema>;
  readonly licenseExpiryDate?: Maybe<Datetime>;
};

export type RestrictedProductRequestSort = {
  readonly field: RestrictedProductRequestFieldType;
  readonly order: SortOrderType;
};

export type RestrictedProductRequestState =
  | "AWAITING_ADMIN"
  | "AWAITING_MERCHANT"
  | "APPROVED"
  | "REJECTED";

export type RestrictedProductRequestUpsertInput = {
  readonly action: RestrictedProductRequestAction;
  readonly categories?: Maybe<ReadonlyArray<RestrictedProductCategory>>;
  readonly region?: Maybe<RestrictedProductRegionCode>;
  readonly legalRepName?: Maybe<Scalars["String"]>;
  readonly legalRepTitle?: Maybe<Scalars["String"]>;
  readonly businessEntityName?: Maybe<Scalars["String"]>;
  readonly warrantyFile?: Maybe<FileInput>;
  readonly warrantyFileUrl?: Maybe<Scalars["String"]>;
  readonly warrantyFilename?: Maybe<Scalars["String"]>;
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly ids?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly rejectedReason?: Maybe<Scalars["String"]>;
};

export type RestrictedProductSchema = {
  readonly __typename?: "RestrictedProductSchema";
  readonly restrictedProductRequestsCount?: Maybe<Scalars["Int"]>;
  readonly restrictedProductRequests?: Maybe<
    ReadonlyArray<RestrictedProductRequestSchema>
  >;
  readonly restrictedProductCategories?: Maybe<
    ReadonlyArray<RestrictedProductCategory>
  >;
  readonly restrictedProductCountryCodes?: Maybe<
    ReadonlyArray<RestrictedProductCountryCode>
  >;
  readonly restrictedProductEuropeCountries?: Maybe<ReadonlyArray<Country>>;
  readonly allRegionRestrictedProductCategories?: Maybe<
    ReadonlyArray<RestrictedProductRegionToCategory>
  >;
  readonly restrictedProductRegions?: Maybe<
    ReadonlyArray<RestrictedProductRegion>
  >;
  readonly allRestrictedProductCategories?: Maybe<
    ReadonlyArray<RestrictedProductCategory>
  >;
};

export type RestrictedProductSchemaRestrictedProductRequestsCountArgs = {
  states?: Maybe<ReadonlyArray<RestrictedProductRequestState>>;
  categories?: Maybe<ReadonlyArray<RestrictedProductCategory>>;
  regions?: Maybe<ReadonlyArray<RestrictedProductRegionCode>>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
};

export type RestrictedProductSchemaRestrictedProductRequestsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  states?: Maybe<ReadonlyArray<RestrictedProductRequestState>>;
  categories?: Maybe<ReadonlyArray<RestrictedProductCategory>>;
  regions?: Maybe<ReadonlyArray<RestrictedProductRegionCode>>;
  sort?: Maybe<RestrictedProductRequestSort>;
  merchantId?: Maybe<Scalars["ObjectIdType"]>;
};

export type RestrictedProductSchemaRestrictedProductCategoriesArgs = {
  region: RestrictedProductRegionCode;
};

export type ReturnDetailsSchema = {
  readonly __typename?: "ReturnDetailsSchema";
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly shippingLabelFilename?: Maybe<Scalars["String"]>;
  readonly returnSlipFilename?: Maybe<Scalars["String"]>;
  readonly returnSlipId?: Maybe<Scalars["Int"]>;
  readonly trackingId?: Maybe<Scalars["ObjectIdType"]>;
  readonly trackingUrl?: Maybe<Scalars["String"]>;
  readonly shippingProvider?: Maybe<ShippingProviderSchema>;
  readonly actualDeliverDays?: Maybe<Timedelta>;
  readonly shippingLabelUrl?: Maybe<Scalars["String"]>;
  readonly returnSlipUrl?: Maybe<Scalars["String"]>;
  readonly warehouseConfirmedTime?: Maybe<Datetime>;
};

export type ReturnInformationSchema = {
  readonly __typename?: "ReturnInformationSchema";
  readonly returnDetails?: Maybe<ReturnDetailsSchema>;
  readonly returnRequest?: Maybe<ReturnRequestSchema>;
  readonly policyType?: Maybe<Scalars["String"]>;
};

export type ReturnRequestAction =
  | "AUTHORIZE"
  | "CLAIM"
  | "CREATE"
  | "VERIFY_RETURN"
  | "REQUIRE_DELIVERY_VERIFICATION"
  | "CONTACT"
  | "REFUND"
  | "REJECT"
  | "CANCEL"
  | "CLOSE";

export type ReturnRequestActionSchema = {
  readonly __typename?: "ReturnRequestActionSchema";
  readonly action: ReturnRequestAction;
};

export type ReturnRequestCancelReason =
  | "BUYER_NO_LONGER_HAS_AN_ISSUE"
  | "BUYER_INACTIVITY"
  | "OTHER"
  | "BUYER_ACCEPT_EXCHANGE"
  | "BUYER_ACCEPT_RESHIP";

export type ReturnRequestClaimReason =
  | "BUYER_FRAUDULENT"
  | "OTHER"
  | "BUYER_UNFAIR";

export type ReturnRequestContactBuyerReason =
  | "OFFER_EXCHANGE"
  | "OTHER"
  | "OFFER_RESHIP"
  | "PROVIDE_PRODUCT_INSTRUCTION"
  | "UNDERSTAND_FURTHER";

export type ReturnRequestRefundReason =
  | "FBW_FAILED_TO_FULFILL_DUE_TO_CARRIER_RETURN"
  | "ITEM_DAMAGED"
  | "EPC_OVERWEIGHT"
  | "COMMERCEHUB_SUPPLIER_DETECTED_FRAUD"
  | "DOES_NOT_FIT_USERS_FAULT"
  | "CS_REFUND_FOR_USER_CANCEL"
  | "DECLINED_GIFT"
  | "INVALID_ADDRESS"
  | "ORDER_ROUTING"
  | "BLUE_PROGRAM_DEPRECATION"
  | "BLUE_FUSION_STORE_NOT_SCAN_IN"
  | "ITEM_NEVER_ARRIVED"
  | "INSUFFICIENT_INVENTORY"
  | "ITEM_IS_DANGEROUS"
  | "POOR_QUALITY"
  | "MERCHANT_SENT_TO_WRONG_ADDRESS"
  | "CONTENT_POLICY_VIOLATION_CANCELLATION"
  | "ITEM_DOES_NOT_MATCH_LISTING"
  | "NOT_QUALIFIED_SHIPPING_PROVIDER"
  | "BLUE_FUSION_IN_TRANSIT_LOST"
  | "UNABLE_TO_SHIP"
  | "COMMERCEHUB_BAD_ADDRESS"
  | "PRODUCT_MALFUNCTION"
  | "COMMERCEHUB_BAD_SKU"
  | "DOES_FIT_WRONG_SIZE"
  | "WISHBLUE_EPC_LATE_FULFILLMENT"
  | "ONEOFF_WISH_ERROR"
  | "FBS_STORE_QUIT"
  | "SUSPECTED_FRAUD"
  | "REPLACEMENT_NEVER_RECEIVED"
  | "CB_USER_CANCELLED_ORDER"
  | "STORE_SENT_THE_WRONG_SIZE"
  | "RECEIVED_NOTE_FROM_MERCHANT"
  | "BLUE_FUSION_SENT_TO_WRONG_STORE"
  | "INCOMPLETE_ORDER"
  | "ITEM_HELD_AT_CUSTOMS"
  | "USER_ENTERED_INVALID_ADDRESS"
  | "CONSUMER_FRAUD"
  | "ITEM_IS_DAMAGED"
  | "LATE_OR_MISSING"
  | "MERCHANT_REPORTED_BUYER_FRAUD"
  | "MISLEADING_LISTING"
  | "BLUE_STORE_QUIT"
  | "ITEM_DID_NOT_MEET_EXPECTATIONS"
  | "ITEM_DOES_NOT_WORK_AS_DESCRIBED"
  | "PRODUCT_LISTING_MISSING_INFO"
  | "IN_GRACE_PERIOD_DELAY_CANCEL"
  | "USER_NO_LONGER_WANTS_ITEM"
  | "SHOPIFY_MERCHANT_CANCELLED"
  | "EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP"
  | "EPC_OVERSIZE"
  | "INCORRECT_QUANTITY_OF_ITEMS"
  | "ITEM_DOES_NOT_FIT"
  | "EXPIRED_GIFT"
  | "SHIPPING_TAKING_TOO_LONG"
  | "MERCHANT_OUT_OF_STOCK"
  | "FBW_WAREHOUSE_FAILED_TO_FULFILL"
  | "CUSTOMER_REQUEST"
  | "FAKE_OR_COUNTERFEIT"
  | "DOES_NOT_FIT"
  | "PRICE_MATCH"
  | "EPC_OVERVALUE"
  | "WRONG_ITEM"
  | "PREFER_NOT_TO_SAY"
  | "BLUE_STORE_OUT_OF_STOCK"
  | "COMMERCEHUB_OTHER"
  | "ORDER_PLACED_BY_TECHNICAL_ERROR"
  | "DOES_NOT_FIT_INCORRECT_SIZE"
  | "BLUE_FUSION_STORE_LOST"
  | "MERCHANT_FAILED_TO_FULFILL"
  | "ITEM_RETURNED_TO_SENDER"
  | "COMMERCEHUB_CANCELLED_AT_MERCHANTS_REQUEST"
  | "WRONG_COLOR"
  | "USER_CANCEL_CHANGE_PAYMENT"
  | "CONFIRMED_FUSION_ITEM_NOT_PICKED_UP"
  | "CIRCULAR_ROUTED_UNFULFILLED"
  | "CUSTOMER_MANUFACTURER_COMPLAINT"
  | "USER_CANCELLED_ORDER"
  | "STORE_UPLOADED_INVENTORY_RETURN"
  | "RIGHT_OF_WITHDRAWAL"
  | "DOES_NOT_FIT_WRONG_SIZE"
  | "EMPTY_PACKAGE"
  | "MISSING_ITEM_OR_PARTS"
  | "PRESALE_TIMELINE_CLOSED"
  | "COMMERCEHUB_OUT_OF_STOCK"
  | "FRAUDULENT_ACTIVITY"
  | "RECEIVED_WRONG_ITEM"
  | "BLUE_ADMIN_REFUND"
  | "ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE"
  | "ITEM_IS_COUNTERFEIT"
  | "USER_PLACED_ORDER_BY_MISTAKE"
  | "PREORDER_NOT_FULFILLED"
  | "OTHER"
  | "ITEM_IS_POOR_QUALITY"
  | "LIMBO_ORDER_UNFULFILLED"
  | "CLEARING_LIMBO"
  | "BLUE_DELIVERY_NOT_DELIVERED"
  | "EXPIRED_GROUP_BUY"
  | "USER_ENTERED_WRONG_ADDRESS"
  | "ITEM_MARKED_DELIVERED_NOT_ALL_ITEMS_ARRIVED"
  | "MERCHANT_REPORTED_ORDER"
  | "PICKUP_NOW_ITEM_NOT_PICKED_UP";

export type ReturnRequestRejectReason =
  | "LATE_RETURN"
  | "OTHER"
  | "PRODUCT_DAMAGED"
  | "WRONG_PRODUCT";

export type ReturnRequestSchema = {
  readonly __typename?: "ReturnRequestSchema";
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly state: ReturnRequestState;
  readonly statusToDisplay: Scalars["String"];
  readonly authType: Scalars["String"];
  readonly returnWarehouseAddress?: Maybe<AddressSchema>;
  readonly availableReturnCarriers: ReadonlyArray<ShippingProviderSchema>;
  readonly actions?: Maybe<ReadonlyArray<ReturnRequestActionSchema>>;
  readonly shippingLabelSentDate?: Maybe<Datetime>;
  readonly merchantAuthorizedTime?: Maybe<Datetime>;
  readonly lastAction: ReturnRequestActionSchema;
  readonly isToMerchantWarehouse: Scalars["Boolean"];
  readonly cancellationReason?: Maybe<ReturnRequestCancelReason>;
};

export type ReturnRequestState =
  | "CONTACT_IN_PROGRESS"
  | "REFUNDED"
  | "APPEAL_CS"
  | "LABEL_SENT"
  | "REJECTED"
  | "CANCELLED"
  | "AWAITING_MERCHANT";

export type Reversal = {
  readonly __typename?: "Reversal";
  readonly id: Scalars["ObjectIdType"];
  readonly amount: CurrencyValue;
};

export type ReviewMerchantTaxIdentificationInput = {
  readonly merchantTaxIdentificationId: Scalars["ObjectIdType"];
  readonly reviewAction: MerchantTaxIdentificationReviewAction;
  readonly rejectedReason?: Maybe<MerchantTaxIdentificationRejectReson>;
};

export type ReviewMerchantTaxIdentificationMutation = {
  readonly __typename?: "ReviewMerchantTaxIdentificationMutation";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type RevShareInfoSchema = {
  readonly __typename?: "RevShareInfoSchema";
  readonly sourceRegion?: Maybe<RevShareRegion>;
  readonly destRegion?: Maybe<RevShareRegion>;
  readonly entityRegion?: Maybe<RevShareRegion>;
  readonly productCategory?: Maybe<OrderRevShareProductCategory>;
  readonly wssTier?: Maybe<WssTier>;
  readonly qualifiers: ReadonlyArray<RevShareQualifier>;
  readonly isRevShareFromMerchant?: Maybe<Scalars["Boolean"]>;
};

export type RevShareQualifier =
  | "CATEGORY_ELECTRONICS"
  | "TIER_SILVER"
  | "CATEGORY_WATCH"
  | "ENTITY_EU"
  | "CATEGORY_SEX_TOY"
  | "TIER_BRONZE"
  | "CATEGORY_APPAREL_ACCESSORY"
  | "TIER_PLATINUM"
  | "CATEGORY_CLOTHING"
  | "CATEGORY_SHOES"
  | "SOURCE_NA"
  | "CATEGORY_JEWELRY_AND_ACCESSORY"
  | "DEST_EU"
  | "TIER_GOLD"
  | "IS_WISH_EXPRESS"
  | "TIER_UNASSESSED"
  | "ENTITY_NA"
  | "DEST_NA"
  | "CATEGORY_HOUSEHOLD"
  | "SOURCE_EU"
  | "TIER_BAN";

export type RevShareRegion = "EU" | "NA" | "OTHER";

export type RoleSchema = {
  readonly __typename?: "RoleSchema";
  readonly id: RoleType;
  readonly name: Scalars["String"];
  readonly description?: Maybe<Scalars["String"]>;
};

export type RoleType =
  | "BD"
  | "WISH_BLUE_OPERATOR"
  | "TEST_USER"
  | "SALES_REP"
  | "TELEPERFORMANCE_BOGOTA_LEAD"
  | "ALORICA_LEAD"
  | "LOGISTICS_TRACKING_ADMIN"
  | "CN_ORG_MLE_MPS"
  | "MERCHANT_SUPPORT_LEAD"
  | "INSURANCE_PROVIDER"
  | "COURIER"
  | "SHIP_PROVIDER"
  | "IN_HOUSE_TAGGER"
  | "TASKUS_TAGGER_WORKER"
  | "TELEPERFORMANCE_EGYPT_LEAD"
  | "WISH_EXPRESS_SUPPORT"
  | "FRAUD_TEAM_LEAD"
  | "OUTSOURCED_MERCHANT_SUPPORT"
  | "TAGGER"
  | "WISH_BLUE_AMBASSADOR"
  | "TELEPERFORMANCE_INDIA_WORKER"
  | "TASKUS_MC_LEAD"
  | "MERCHANT_SUPPORT"
  | "EPC_SUPPORT"
  | "TASKUS_CS_WORKER"
  | "WISHPOST_EXTERNAL_API_MANAGER"
  | "MERCHANT_LEAD"
  | "FACTORY_ACCOUNT_MANAGER"
  | "WISHCHAIN"
  | "USER"
  | "TRUSTED_TAGGER"
  | "BRAND_PROTECTION_LEAD"
  | "TELEPERFORMANCE_BOGOTA_WORKER"
  | "CS_ADMIN"
  | "CONTRACTOR"
  | "STORE_USER"
  | "CS_REP_EXTERNAL"
  | "TASKUS_DETAIL_LEAD"
  | "WAREHOUSE_OPERATOR"
  | "BD_LEAD"
  | "META_USER"
  | "EVERC_IPV_DETECTION_EXTERNAL_API"
  | "WAREHOUSE"
  | "BRAND_PROTECTION_CONTRACTOR"
  | "ACCENTURE_DETAIL_WORKER"
  | "ACCENTURE_WORKER"
  | "DEP_PRODUCT_API_USER"
  | "TRUST_SAFETY"
  | "PARTNER"
  | "BRAND_PARTNER"
  | "TELEPERFORMANCE_EGYPT_WORKER"
  | "LEGAL_TEAM"
  | "MERCHANT_REVIEW"
  | "BOOST_DASHBOARD"
  | "TELEPERFORMANCE_LEAD"
  | "ACCENTURE_TAGGER_WORKER"
  | "BRAND_PROTECTION_WORKER"
  | "CS_REP_INTERNAL"
  | "FINANCE"
  | "SUPPLY_CHAIN"
  | "SHIP_TO_STORE_PARTNER"
  | "ADMIN"
  | "DEP_IT_ADMIN"
  | "FACTORY"
  | "LOAN_PROVIDER"
  | "LEGAL_TEAM_LEAD"
  | "TELEPERFORMANCE_INDIA_LEAD"
  | "WISH_HR"
  | "TRANSCOSMOS_WORKER"
  | "ACCENTURE_FRAUD_WORKER"
  | "CS_REP_INTERNAL_LEAD"
  | "PENDING_USER"
  | "TASKUS_CS_LEAD"
  | "ALORICA_WORKER"
  | "ACCENTURE_DETAIL_LEAD"
  | "STAGE_ADMIN"
  | "REQUEST_INFO_USER"
  | "TASKUS_MC_WORKER"
  | "TRANSCOSMOS_LEAD"
  | "TAGGER_LEAD"
  | "LANGUAGE_SPECIALIST"
  | "FRAUD_TEAM"
  | "TASKUS_TAGGER_LEAD"
  | "ACCENTURE_FRAUD_LEAD"
  | "SUB_USER"
  | "TASKUS_DETAIL_WORKER"
  | "TELEPERFORMANCE_WORKER"
  | "ACCENTURE_TAGGER_LEAD"
  | "PAYMENT_PROVIDER"
  | "ZENDESK_SUPPORT"
  | "QA"
  | "ACCESS_CONTROL_MANAGER"
  | "WISHPOST";

export type RootMutation = {
  readonly __typename?: "RootMutation";
  readonly currentUser?: Maybe<UserMutation>;
  readonly currentMerchant?: Maybe<MerchantMutation>;
  readonly payments?: Maybe<MerchantPaymentsMutation>;
  readonly oneoffPayments?: Maybe<MerchantOneoffPaymentMutations>;
  readonly fulfillment: FulfillmentMutation;
  readonly productCatalog: ProductCatalogMutations;
  readonly shippingProfileCollection: ShippingProfileMutations;
  readonly logistics?: Maybe<LogisticsMutations>;
  readonly plus?: Maybe<PlusAdminServiceMutations>;
  readonly analytics?: Maybe<AnalyticsServiceMutations>;
  readonly marketing?: Maybe<MarketingServiceMutations>;
  readonly policy?: Maybe<PolicyMutations>;
  readonly policyPublic: PolicyPublicMutations;
  readonly authentication?: Maybe<AuthenticationMutations>;
  readonly uploads?: Maybe<UploadMutations>;
  readonly webhook?: Maybe<WebhookMutations>;
  readonly brand?: Maybe<BrandMutations>;
  readonly brandPartner?: Maybe<BrandPartnerMutations>;
  readonly identity?: Maybe<IdentityMutations>;
  readonly tagging?: Maybe<TaggingMutations>;
  readonly video?: Maybe<VideoMutations>;
  readonly gating?: Maybe<MerchantUserGateMutations>;
  readonly mfp?: Maybe<MfpServiceMutations>;
  readonly taxDashboard?: Maybe<TaxDashboardReviewMutations>;
  readonly announcements?: Maybe<AnnouncementMutations>;
  readonly merchantSafety?: Maybe<MerchantSafetyMutations>;
  readonly customerSupportTickets?: Maybe<CustomerSupportTicketMutations>;
  readonly locale?: Maybe<LocaleMutations>;
  readonly sanctionScreening?: Maybe<SanctionScreeningMutations>;
};

export type RootQuery = {
  readonly __typename?: "RootQuery";
  readonly currentUser?: Maybe<UserSchema>;
  readonly currentMerchant?: Maybe<MerchantSchema>;
  readonly su?: Maybe<UserSchema>;
  readonly productCatalog?: Maybe<ProductCatalogSchema>;
  readonly shippingProfileCollection?: Maybe<ShippingProfileCollectionSchema>;
  readonly fulfillment?: Maybe<FulfillmentSchema>;
  readonly brand?: Maybe<BrandServiceSchema>;
  readonly platformConstants?: Maybe<PlatformConstants>;
  readonly merchantTermsOfService: MerchantTermsOfServiceSchema;
  readonly tos: TosServiceSchema;
  readonly merchants?: Maybe<MerchantServiceSchema>;
  readonly authentication: AuthenticationServiceSchema;
  readonly announcements: AnnouncementsService;
  readonly marketing?: Maybe<MarketingServiceSchema>;
  readonly logistics?: Maybe<LogisticsSchema>;
  readonly policyPublic?: Maybe<PolicyPublicSchema>;
  readonly payments?: Maybe<MerchantPaymentsService>;
  readonly policy?: Maybe<PolicySchema>;
  readonly tagging?: Maybe<TaggingServiceSchema>;
  readonly webhook?: Maybe<WebhookSchema>;
  readonly currentBrandPartner?: Maybe<BrandPartnerInfoSchema>;
  readonly currentCountry?: Maybe<Country>;
  readonly currentLocale: Locale;
  readonly currentProperLocale: Scalars["String"];
  readonly identity?: Maybe<IdentityServiceSchema>;
  readonly cs?: Maybe<CustomerSupportServiceSchema>;
  readonly notifications?: Maybe<NotificationsServiceSchema>;
  readonly storefront?: Maybe<StorefrontServiceSchema>;
  readonly payableInfo?: Maybe<PayableInfoSchema>;
  readonly recentUsers?: Maybe<ReadonlyArray<UserSchema>>;
  readonly mfp?: Maybe<MfpServiceSchema>;
  readonly taxDashboardInfo?: Maybe<TaxDashboardSchema>;
  readonly publicShippingProviderDocs?: Maybe<PublicShippingProviderDocs>;
  readonly chrome?: Maybe<ChromeSchema>;
  readonly merchantSafetyInfo?: Maybe<MerchantSafetySchema>;
  readonly merchantEntity?: Maybe<MerchantEntitySchema>;
  readonly taxonomy?: Maybe<TaxonomySchema>;
  readonly listingQualityInsights?: Maybe<ListingQualityInsightsSchema>;
};

export type RootQueryMerchantEntityArgs = {
  merchantId?: Maybe<Scalars["String"]>;
  entityId?: Maybe<Scalars["String"]>;
};

export type SalesforceLeadInfo = {
  readonly __typename?: "SalesforceLeadInfo";
  readonly valid: Scalars["Boolean"];
  readonly firstName?: Maybe<Scalars["String"]>;
  readonly lastName?: Maybe<Scalars["String"]>;
  readonly email?: Maybe<Scalars["String"]>;
  readonly company?: Maybe<Scalars["String"]>;
  readonly leadSource: SalesforceLeadSource;
  readonly country: Country;
};

export type SalesforceLeadSource =
  | "NOT_IMPLEMENTED"
  | "Lead_Questionnaire"
  | "MMS_Lead_Questionnaire";

export type SalesPerformanceStats = {
  readonly __typename?: "SalesPerformanceStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly productImpressions?: Maybe<Scalars["BigInt"]>;
  readonly addToCart?: Maybe<Scalars["Int"]>;
  readonly addToCartConversion?: Maybe<Scalars["Float"]>;
  readonly checkoutConversion?: Maybe<Scalars["Float"]>;
  readonly orders?: Maybe<Scalars["Int"]>;
  readonly gmv: CurrencyValue;
};

export type SanctionScreeningHitStateType =
  | "NEWLY_IDENTITY_VERIFIED"
  | "ESCALATE"
  | "FALSE_HIT"
  | "TRUE_HIT"
  | "NEWLY_IDENTITY_VERIFIED_EEA"
  | "UNSET";

export type SanctionScreeningMutations = {
  readonly __typename?: "SanctionScreeningMutations";
  readonly bulkReview?: Maybe<BulkReviewMutation>;
};

export type SanctionScreeningMutationsBulkReviewArgs = {
  input: BulkReviewInput;
};

export type ScheduledAddBudgetSchema = {
  readonly __typename?: "ScheduledAddBudgetSchema";
  readonly enabled: Scalars["Boolean"];
  readonly amount: CurrencyValue;
  readonly days: ReadonlyArray<Scalars["Int"]>;
};

export type ScreenCoordinates = {
  readonly x: Scalars["Float"];
  readonly y: Scalars["Float"];
};

export type SelectWpsShippingOptionInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly shippingOptionId: Scalars["String"];
  readonly additionalServiceOptions?: Maybe<
    ReadonlyArray<WpsAvailableServices>
  >;
};

export type SelectWpsShippingOptionMutation = {
  readonly __typename?: "SelectWPSShippingOptionMutation";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
  readonly wpsShipmentId?: Maybe<Scalars["String"]>;
  readonly trackingId?: Maybe<Scalars["String"]>;
  readonly providerId?: Maybe<Scalars["Int"]>;
};

export type SellerIdentityBusinessInfo = {
  readonly regBusinessName: Scalars["String"];
  readonly regBusinessNum: Scalars["String"];
};

export type SellerIdentityBusinessInfoIndividual = {
  readonly firstName: Scalars["String"];
  readonly middleName?: Maybe<Scalars["String"]>;
  readonly lastName: Scalars["String"];
  readonly birthDate: DatetimeInput;
};

export type SellerIdentityBusinessLocation = {
  readonly countryCodeDomicile: CountryCode;
  readonly baStreetAddress1: Scalars["String"];
  readonly baStreetAddress2?: Maybe<Scalars["String"]>;
  readonly baCity: Scalars["String"];
  readonly baState: Scalars["String"];
  readonly baCountry: CountryCode;
  readonly baZipcode: Scalars["String"];
};

export type SellerIdentityBusinessProof = {
  readonly proofOfBizDocType: BusinessDocTypes;
  readonly proofOfBizExpirationDate?: Maybe<DatetimeInput>;
  readonly imageListStr: Scalars["JSONString"];
  readonly layoutTag?: Maybe<Scalars["String"]>;
};

export type SellerIdentityBusinessTaxInfo = {
  readonly businessTaxNumber?: Maybe<Scalars["String"]>;
};

export type SellerIdentityBusinessTaxInfoIndividual = {
  readonly businessTaxNumber?: Maybe<Scalars["String"]>;
};

export type SellerIdentityCnBusinessInfo = {
  readonly regBusinessName: Scalars["String"];
  readonly regBusinessNum: Scalars["String"];
};

export type SellerIdentityCnBusinessLocation = {
  readonly baCountry: CountryCode;
  readonly baState: Scalars["String"];
  readonly baCity: Scalars["String"];
  readonly baStreetAddress1: Scalars["String"];
  readonly baZipcode: Scalars["String"];
};

export type SellerIdentityCnBusinessProof = {
  readonly proofOfBizDocType: BusinessDocTypes;
  readonly proofOfBizExpirationDate?: Maybe<DatetimeInput>;
  readonly imageListStr: Scalars["JSONString"];
};

export type SellerIdentityCnExtraInfo = {
  readonly isReseller?: Maybe<Scalars["Boolean"]>;
};

export type SellerIdentityCnIdProof = {
  readonly proofOfIdDocType: IdDocTypes;
  readonly idNumber: Scalars["String"];
  readonly proofOfIdExpirationDate?: Maybe<DatetimeInput>;
  readonly frontOfImageListStr: Scalars["JSONString"];
  readonly backOfImageListStr: Scalars["JSONString"];
  readonly selfieImageListStr: Scalars["JSONString"];
  readonly wishValidationCode: Scalars["String"];
};

export type SellerIdentityCnSetContactInfoInput = {
  readonly firstName: Scalars["String"];
  readonly lastName: Scalars["String"];
  readonly businessLocation: SellerIdentityCnBusinessLocation;
  readonly extraInfo?: Maybe<SellerIdentityCnExtraInfo>;
};

export type SellerIdentityCnSetContactInfoMutation = {
  readonly __typename?: "SellerIdentityCNSetContactInfoMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SellerIdentityCnSetProofOfBizIdentityInput = {
  readonly entityType: EntityTypes;
  readonly businessInfo: SellerIdentityCnBusinessInfo;
  readonly businessProof: SellerIdentityCnBusinessProof;
  readonly legalBizRepName: Scalars["String"];
  readonly idProof: SellerIdentityCnIdProof;
};

export type SellerIdentityCnSetProofOfBizIdentityMutation = {
  readonly __typename?: "SellerIdentityCNSetProofOfBizIdentityMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SellerIdentityCnSetProofOfIndividualIdentityInput = {
  readonly entityType: EntityTypes;
  readonly idProof: SellerIdentityCnIdProof;
};

export type SellerIdentityCnSetProofOfIndividualIdentityMutation = {
  readonly __typename?: "SellerIdentityCNSetProofOfIndividualIdentityMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SellerIdentityCnVerificationMutations = {
  readonly __typename?: "SellerIdentityCNVerificationMutations";
  readonly setContactInfo?: Maybe<SellerIdentityCnSetContactInfoMutation>;
  readonly setProofOfIdentityBiz?: Maybe<SellerIdentityCnSetProofOfBizIdentityMutation>;
  readonly setProofOfIdentityIndividual?: Maybe<SellerIdentityCnSetProofOfIndividualIdentityMutation>;
};

export type SellerIdentityCnVerificationMutationsSetContactInfoArgs = {
  input: SellerIdentityCnSetContactInfoInput;
};

export type SellerIdentityCnVerificationMutationsSetProofOfIdentityBizArgs = {
  input: SellerIdentityCnSetProofOfBizIdentityInput;
};

export type SellerIdentityCnVerificationMutationsSetProofOfIdentityIndividualArgs =
  {
    input: SellerIdentityCnSetProofOfIndividualIdentityInput;
  };

export type SellerIdentityExtraInfo = {
  readonly isReseller?: Maybe<Scalars["Boolean"]>;
};

export type SellerIdentityGetStartedMutation = {
  readonly __typename?: "SellerIdentityGetStartedMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SellerIdentityIdProof = {
  readonly proofOfIdDocType: IdDocTypes;
  readonly idNumber: Scalars["String"];
  readonly proofOfIdExpirationDate?: Maybe<DatetimeInput>;
  readonly frontOfImageListStr: Scalars["JSONString"];
  readonly backOfImageListStr: Scalars["JSONString"];
  readonly selfieImageListStr: Scalars["JSONString"];
  readonly layoutTag?: Maybe<Scalars["String"]>;
};

export type SellerIdentityLegalBizRep = {
  readonly firstName: Scalars["String"];
  readonly middleName?: Maybe<Scalars["String"]>;
  readonly lastName: Scalars["String"];
  readonly birthDate?: Maybe<DatetimeInput>;
  readonly isLegalRepAndConsentToElectronicSig: Scalars["Boolean"];
};

export type SellerIdentitySetContactInfoInput = {
  readonly businessLocation: SellerIdentityBusinessLocation;
  readonly extraInfo?: Maybe<SellerIdentityExtraInfo>;
};

export type SellerIdentitySetContactInfoMutation = {
  readonly __typename?: "SellerIdentitySetContactInfoMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SellerIdentitySetProofOfBizIdentityInput = {
  readonly entityType: EntityTypes;
  readonly businessInfo: SellerIdentityBusinessInfo;
  readonly businessTax?: Maybe<SellerIdentityBusinessTaxInfo>;
  readonly businessProof: ReadonlyArray<SellerIdentityBusinessProof>;
  readonly legalBizRep: SellerIdentityLegalBizRep;
  readonly idProof: ReadonlyArray<SellerIdentityIdProof>;
};

export type SellerIdentitySetProofOfBizIdentityMutation = {
  readonly __typename?: "SellerIdentitySetProofOfBizIdentityMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SellerIdentitySetProofOfIndividualIdentityInput = {
  readonly entityType: EntityTypes;
  readonly businessInfo: SellerIdentityBusinessInfoIndividual;
  readonly businessTax?: Maybe<SellerIdentityBusinessTaxInfoIndividual>;
  readonly businessProof: ReadonlyArray<SellerIdentityBusinessProof>;
  readonly idProof: ReadonlyArray<SellerIdentityIdProof>;
};

export type SellerIdentitySetProofOfIndividualIdentityMutation = {
  readonly __typename?: "SellerIdentitySetProofOfIndividualIdentityMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SellerIdentitySetVerificationFlowInput = {
  readonly verificationFlowType: VerificationFlowTypes;
};

export type SellerIdentitySetVerificationFlowMutation = {
  readonly __typename?: "SellerIdentitySetVerificationFlowMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SellerIdentityVerificationMutations = {
  readonly __typename?: "SellerIdentityVerificationMutations";
  readonly setGettingStarted?: Maybe<SellerIdentityGetStartedMutation>;
  readonly setVerificationFlow?: Maybe<SellerIdentitySetVerificationFlowMutation>;
  readonly setContactInfo?: Maybe<SellerIdentitySetContactInfoMutation>;
  readonly setProofOfIdentityBiz?: Maybe<SellerIdentitySetProofOfBizIdentityMutation>;
  readonly setProofOfIdentityIndividual?: Maybe<SellerIdentitySetProofOfIndividualIdentityMutation>;
};

export type SellerIdentityVerificationMutationsSetVerificationFlowArgs = {
  input: SellerIdentitySetVerificationFlowInput;
};

export type SellerIdentityVerificationMutationsSetContactInfoArgs = {
  input: SellerIdentitySetContactInfoInput;
};

export type SellerIdentityVerificationMutationsSetProofOfIdentityBizArgs = {
  input: SellerIdentitySetProofOfBizIdentityInput;
};

export type SellerIdentityVerificationMutationsSetProofOfIdentityIndividualArgs =
  {
    input: SellerIdentitySetProofOfIndividualIdentityInput;
  };

export type SellerProfileCountryOption = {
  readonly __typename?: "SellerProfileCountryOption";
  readonly countryCode: Scalars["String"];
  readonly countryName: Scalars["String"];
  readonly regionList?: Maybe<ReadonlyArray<SellerProfileRegionInformation>>;
};

export type SellerProfileRegionConstants = {
  readonly __typename?: "SellerProfileRegionConstants";
  readonly countryOptions: ReadonlyArray<SellerProfileCountryOption>;
  readonly genericCountryOptions: Scalars["GenericScalar"];
};

export type SellerProfileRegionInformation = {
  readonly __typename?: "SellerProfileRegionInformation";
  readonly regionName: Scalars["String"];
  readonly cityNames?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type SellerProfileVerificationDocType =
  | "permanent_resident_card"
  | "business_license"
  | "vat_registration_certificate"
  | "passport"
  | "certificate_of_incorporation"
  | "national_id"
  | "partnership_agreement"
  | "citizenship_card"
  | "articles_of_incorporation"
  | "driver_license"
  | "state_id"
  | "social_security_card"
  | "recent_business_returns";

export type SellerProfileVerificationStatus =
  | "COMPLETE"
  | "REQUEST_INFO"
  | "REJECTED"
  | "REVIEWING"
  | "APPROVED"
  | "INCOMPLETE";

export type SellerVerificationAdminFeedback = {
  readonly __typename?: "SellerVerificationAdminFeedback";
  readonly verificationFlowIssue?: Maybe<Scalars["String"]>;
  readonly entityTypeIssue?: Maybe<Scalars["String"]>;
  readonly countryOfDomicileIssue?: Maybe<Scalars["String"]>;
  readonly businessAddressIssue?: Maybe<Scalars["String"]>;
  readonly registeredBusinessNameIssue?: Maybe<Scalars["String"]>;
  readonly registeredBusinessNumIssue?: Maybe<Scalars["String"]>;
  readonly firstNameIssue?: Maybe<Scalars["String"]>;
  readonly lastNameIssue?: Maybe<Scalars["String"]>;
  readonly middleNameIssue?: Maybe<Scalars["String"]>;
  readonly dateOfBirthIssue?: Maybe<Scalars["String"]>;
  readonly isLegalRepAndConsentsToSigIssue?: Maybe<Scalars["String"]>;
  readonly legalRepNameIssue?: Maybe<Scalars["String"]>;
  readonly proofDocIssues?: Maybe<Scalars["JSONString"]>;
};

export type SellerVerificationFeedback = {
  readonly __typename?: "SellerVerificationFeedback";
  readonly businessAddressIssue?: Maybe<Scalars["String"]>;
  readonly proofOfIdentificationIssue?: Maybe<Scalars["String"]>;
  readonly entityTypeIssue?: Maybe<Scalars["String"]>;
  readonly firstNameIssue?: Maybe<Scalars["String"]>;
  readonly middleNameIssue?: Maybe<Scalars["String"]>;
  readonly lastNameIssue?: Maybe<Scalars["String"]>;
  readonly phoneNumberIssue?: Maybe<Scalars["String"]>;
  readonly dateOfBirthIssue?: Maybe<Scalars["String"]>;
  readonly countryOfDomicileIssue?: Maybe<Scalars["String"]>;
  readonly companyNameIssue?: Maybe<Scalars["String"]>;
  readonly proofOfIdDocTypeIssue?: Maybe<Scalars["String"]>;
};

export type SellerVerificationSchema = {
  readonly __typename?: "SellerVerificationSchema";
  readonly hasCompleted: Scalars["Boolean"];
  readonly isKycVerification: Scalars["Boolean"];
  readonly status?: Maybe<SellerProfileVerificationStatus>;
  readonly kycVerification: KycVerificationSchema;
  readonly gmvCapReached: Scalars["Boolean"];
  readonly gmvCapGracePeriodDays?: Maybe<Scalars["Int"]>;
  readonly gmvCapGracePeriodEndDate?: Maybe<Datetime>;
  readonly impressionsPaused: Scalars["Boolean"];
  readonly paymentsBlocked: Scalars["Boolean"];
  readonly gmvCap?: Maybe<CurrencyValue>;
  readonly numSalesCap?: Maybe<Scalars["Int"]>;
  readonly actionRequired: Scalars["Boolean"];
  readonly lastUpdateTime?: Maybe<Datetime>;
  readonly adminFeedback?: Maybe<SellerVerificationFeedback>;
  readonly canStart: Scalars["Boolean"];
  readonly firstName?: Maybe<Scalars["String"]>;
  readonly middleName?: Maybe<Scalars["String"]>;
  readonly lastName?: Maybe<Scalars["String"]>;
  readonly phoneNumber?: Maybe<Scalars["String"]>;
  readonly businessAddress?: Maybe<AddressSchema>;
  readonly domicileCountry?: Maybe<Country>;
  readonly dateOfBirth?: Maybe<Datetime>;
  readonly entityType?: Maybe<UserEntityType>;
  readonly companyName?: Maybe<Scalars["String"]>;
  readonly proofOfIdFiles?: Maybe<ReadonlyArray<MerchantFileSchema>>;
  readonly proofOfIdDocType?: Maybe<SellerProfileVerificationDocType>;
  readonly regBusinessName?: Maybe<Scalars["String"]>;
  readonly regBusinessNum?: Maybe<Scalars["String"]>;
  readonly legalRepName?: Maybe<Scalars["String"]>;
  readonly proofOfDocs?: Maybe<ReadonlyArray<MerchantProofDocSchema>>;
  readonly isLegalRepAndConsentToElectronicSig?: Maybe<Scalars["Boolean"]>;
  readonly adminLatestFeedback?: Maybe<SellerVerificationAdminFeedback>;
  readonly verificationFlowTypeString?: Maybe<Scalars["String"]>;
  readonly verificationFlowType?: Maybe<VerificationFlowTypes>;
  readonly completedCnVerification?: Maybe<Scalars["Boolean"]>;
  readonly merchantId?: Maybe<Scalars["String"]>;
};

export type SendTestMessage = {
  readonly __typename?: "SendTestMessage";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SendTestMessageInput = {
  readonly subscription: WebhookSubscriptionInput;
};

export type SentimentType = "INFO" | "WARNING" | "NEGATIVE" | "POSITIVE";

export type SetWpsPackageTypeInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly packageType: WpsPackageType;
};

export type SetWpsPackageTypeMutation = {
  readonly __typename?: "SetWPSPackageTypeMutation";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type ShippableCountryCode =
  | "BE"
  | "FR"
  | "BG"
  | "BA"
  | "JP"
  | "ZA"
  | "BR"
  | "FI"
  | "NL"
  | "NO"
  | "NZ"
  | "RO"
  | "CH"
  | "CO"
  | "GR"
  | "CL"
  | "CA"
  | "CZ"
  | "GB"
  | "CR"
  | "GI"
  | "SK"
  | "KR"
  | "SI"
  | "SM"
  | "SG"
  | "SE"
  | "DK"
  | "HR"
  | "DE"
  | "HU"
  | "US"
  | "JE"
  | "AD"
  | "PR"
  | "PT"
  | "LI"
  | "LV"
  | "LT"
  | "LU"
  | "PE"
  | "IS"
  | "PL"
  | "EE"
  | "VI"
  | "AL"
  | "IT"
  | "AR"
  | "AU"
  | "AT"
  | "IE"
  | "ES"
  | "ME"
  | "MD"
  | "MC"
  | "UA"
  | "RS"
  | "MK"
  | "MT"
  | "MX"
  | "IL";

export type ShippingDetailsSchema = {
  readonly __typename?: "ShippingDetailsSchema";
  readonly name: Scalars["String"];
  readonly streetAddress1: Scalars["String"];
  readonly streetAddress2?: Maybe<Scalars["String"]>;
  readonly streetAddress3?: Maybe<Scalars["String"]>;
  readonly city: Scalars["String"];
  readonly zipcode?: Maybe<Scalars["String"]>;
  readonly phoneNumber?: Maybe<Scalars["String"]>;
  readonly trackingId?: Maybe<Scalars["String"]>;
  readonly countryCode: CountryCode;
  readonly state?: Maybe<Scalars["String"]>;
  readonly region?: Maybe<Scalars["String"]>;
  readonly shipNote?: Maybe<Scalars["String"]>;
  readonly providerId?: Maybe<Scalars["Int"]>;
  readonly neighborhood?: Maybe<Scalars["String"]>;
  readonly country?: Maybe<Country>;
  readonly provider?: Maybe<ShippingProviderSchema>;
  readonly verificationState: AddressVerificationState;
};

export type ShippingOriginSettings = {
  readonly __typename?: "ShippingOriginSettings";
  readonly destinationRegion: Scalars["String"];
  readonly shippingType: Scalars["String"];
  readonly originCountryCode: Scalars["String"];
  readonly originCountryName?: Maybe<Scalars["String"]>;
};

export type ShippingPlanInput = {
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly skus: ReadonlyArray<ShippingPlanSkuInput>;
};

export type ShippingPlanSchema = {
  readonly __typename?: "ShippingPlanSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly skus?: Maybe<ReadonlyArray<ShippingPlanSkuSchema>>;
};

export type ShippingPlanSkuInput = {
  readonly variationId: Scalars["ObjectIdType"];
  readonly quantity: Scalars["Int"];
  readonly dimensions: PackageDimensionsInput;
};

export type ShippingPlanSkuSchema = {
  readonly __typename?: "ShippingPlanSKUSchema";
  readonly sku: Scalars["String"];
  readonly quantity: Scalars["Int"];
  readonly variationId: Scalars["ObjectIdType"];
  readonly dimensions: VariationDimensions;
  readonly weight: Weight;
};

export type ShippingProfileCollectionSchema = {
  readonly __typename?: "ShippingProfileCollectionSchema";
  readonly shippingProfiles: ReadonlyArray<ShippingProfileSchema>;
  readonly shippingProfileCount: Scalars["Int"];
};

export type ShippingProfileCollectionSchemaShippingProfilesArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ShippingProfileSearchType>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
};

export type ShippingProfileCollectionSchemaShippingProfileCountArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<ShippingProfileSearchType>;
};

export type ShippingProfileLinkInput = {
  readonly shippingProfileId?: Maybe<Scalars["ObjectIdType"]>;
  readonly productIds: ReadonlyArray<Scalars["ObjectIdType"]>;
};

export type ShippingProfileMutations = {
  readonly __typename?: "ShippingProfileMutations";
  readonly upsertShippingProfile?: Maybe<UpsertShippingProfile>;
  readonly removeShippingProfile?: Maybe<RemoveShippingProfile>;
  readonly linkShippingProfile?: Maybe<LinkShippingProfile>;
};

export type ShippingProfileMutationsUpsertShippingProfileArgs = {
  input?: Maybe<ShippingProfileUpsertInput>;
};

export type ShippingProfileMutationsRemoveShippingProfileArgs = {
  input?: Maybe<ShippingProfileRemoveInput>;
};

export type ShippingProfileMutationsLinkShippingProfileArgs = {
  input?: Maybe<ShippingProfileLinkInput>;
};

export type ShippingProfileRemoveInput = {
  readonly idsToRemove?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
};

export type ShippingProfileSchema = {
  readonly __typename?: "ShippingProfileSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
  readonly shippingDetailsPerDestination?: Maybe<
    ReadonlyArray<DestinationShippingProfileSchema>
  >;
  readonly linkedProductCount: Scalars["Int"];
  readonly description: Scalars["String"];
};

export type ShippingProfileSearchType =
  | "PROFILE_ID"
  | "PRODUCT_ID"
  | "PROFILE_NAME";

export type ShippingProfileUpsertInput = {
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly name?: Maybe<Scalars["String"]>;
  readonly shippingDetailsPerDestination?: Maybe<
    ReadonlyArray<DestinationShippingProfileInput>
  >;
};

export type ShippingProviderCountryInput = {
  readonly countryCode: CountryCode;
  readonly timelineOperations?: Maybe<
    ReadonlyArray<ShippingProviderOperationInput>
  >;
};

export type ShippingProviderCountrySchema = {
  readonly __typename?: "ShippingProviderCountrySchema";
  readonly country: Country;
  readonly timelineOperations?: Maybe<
    ReadonlyArray<ShippingProviderOperationSchema>
  >;
};

export type ShippingProviderInput = {
  readonly providerId: Scalars["Int"];
  readonly name: Scalars["String"];
  readonly trackingUrl: Scalars["String"];
  readonly providerUrl: Scalars["String"];
  readonly originCountry?: Maybe<CountryCode>;
  readonly inputTrackingSources?: Maybe<
    ReadonlyArray<ShippingProviderTrackerInput>
  >;
  readonly inputWtsTrackingSources?: Maybe<
    ReadonlyArray<ShippingProviderTrackerInput>
  >;
  readonly inputReleaseTime?: Maybe<DatetimeInput>;
  readonly inputReleaseType?: Maybe<ShippingProviderOperationTypeEnum>;
  readonly inputRestrictCountries?: Maybe<
    ReadonlyArray<ShippingProviderCountryInput>
  >;
  readonly postalCodeRequired?: Maybe<Scalars["Boolean"]>;
  readonly countryRequired?: Maybe<Scalars["Boolean"]>;
  readonly trackingShipDateRequired?: Maybe<Scalars["Boolean"]>;
  readonly isCnProvider?: Maybe<Scalars["Boolean"]>;
  readonly shippingProviderType?: Maybe<ShippingProviderState>;
  readonly needAddTimelineOperation?: Maybe<Scalars["Boolean"]>;
};

export type ShippingProviderOperationInput = {
  readonly dateTime?: Maybe<DatetimeInput>;
  readonly type?: Maybe<ShippingProviderOperationTypeEnum>;
};

export type ShippingProviderOperationSchema = {
  readonly __typename?: "ShippingProviderOperationSchema";
  readonly dateTime?: Maybe<Datetime>;
  readonly type?: Maybe<ShippingProviderOperationTypeEnum>;
};

export type ShippingProviderOperationTypeEnum =
  | "REMOVE_SHIPPING_PROVIDER"
  | "ADD_SHIPPING_PROVIDER";

export type ShippingProviderPolicySchema = {
  readonly __typename?: "ShippingProviderPolicySchema";
  readonly destinationCountry?: Maybe<Country>;
  readonly origin?: Maybe<Scalars["String"]>;
  readonly condition?: Maybe<Scalars["String"]>;
  readonly allowedProviderType: Scalars["String"];
  readonly shippingProviders: ReadonlyArray<ShippingProviderSchema>;
  readonly note?: Maybe<Scalars["String"]>;
  readonly wishpostChannels?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type ShippingProviderSchema = {
  readonly __typename?: "ShippingProviderSchema";
  readonly id: Scalars["Int"];
  readonly name: Scalars["String"];
  readonly trackingUrl: Scalars["String"];
  readonly providerUrl: Scalars["String"];
  readonly originCountry?: Maybe<Country>;
  readonly trackers?: Maybe<ReadonlyArray<ShippingProviderTrackerSchema>>;
  readonly wtsTrackers?: Maybe<ReadonlyArray<ShippingProviderTrackerSchema>>;
  readonly timelineOperations?: Maybe<
    ReadonlyArray<ShippingProviderOperationSchema>
  >;
  readonly restrictionCountries?: Maybe<
    ReadonlyArray<ShippingProviderCountrySchema>
  >;
  readonly ddpSupportedOriginCountries?: Maybe<
    ReadonlyArray<Scalars["String"]>
  >;
  readonly status: Scalars["Boolean"];
  readonly lastUpdate?: Maybe<Datetime>;
  readonly postalCodeRequired?: Maybe<Scalars["Boolean"]>;
  readonly countryRequired?: Maybe<Scalars["Boolean"]>;
  readonly trackingShipDateRequired?: Maybe<Scalars["Boolean"]>;
  readonly isCnProvider?: Maybe<Scalars["Boolean"]>;
  readonly shippingProviderType?: Maybe<ShippingProviderState>;
  readonly isQualified?: Maybe<Scalars["Boolean"]>;
  readonly qualifiedNote?: Maybe<Scalars["String"]>;
  readonly trackingFormats?: Maybe<ReadonlyArray<TrackingIdFormatSchema>>;
};

export type ShippingProviderSchemaTrackingFormatsArgs = {
  destCountryCode?: Maybe<CountryCode>;
};

export type ShippingProviderSearchType = "PROVIDER_ID" | "NAME";

export type ShippingProviderState =
  | "NON_TEST_SERVICE"
  | "TEST_SERVICE"
  | "UNREGISTER_TEST_SERVICE"
  | "ACTIVE"
  | "DELETED";

export type ShippingProviderTrackerInput = {
  readonly trackingSource: TrackingSourceEnum;
  readonly trackingSlug: Scalars["String"];
  readonly ratio: Scalars["Int"];
};

export type ShippingProviderTrackerSchema = {
  readonly __typename?: "ShippingProviderTrackerSchema";
  readonly trackingSource: TrackingSourceEnum;
  readonly trackingName: Scalars["String"];
  readonly trackingSlug?: Maybe<Scalars["String"]>;
  readonly ratio: Scalars["Int"];
};

export type ShippingSchema = {
  readonly __typename?: "ShippingSchema";
  readonly defaultShipping?: Maybe<ReadonlyArray<DefaultShippingSchema>>;
  readonly domesticShipping?: Maybe<ReadonlyArray<DomesticShippingSchema>>;
  readonly warehouseCountryShipping?: Maybe<
    ReadonlyArray<WarehouseCountryShippingSchema>
  >;
  readonly calculatedShippingEnabled?: Maybe<Scalars["Boolean"]>;
  readonly wishpostEstimatedShipping?: Maybe<
    ReadonlyArray<WishPostShippingSchema>
  >;
};

export type ShippingSchemaWarehouseCountryShippingArgs = {
  shippingTypes?: Maybe<ReadonlyArray<WarehouseShippingType>>;
};

export type ShippingSettingMutations = {
  readonly __typename?: "ShippingSettingMutations";
  readonly updateShippingSetting?: Maybe<UpdateShippingSetting>;
};

export type ShippingSettingMutationsUpdateShippingSettingArgs = {
  useShopifyShippingRate?: Maybe<Scalars["Boolean"]>;
  flatRateShippingOptInStatus?: Maybe<Scalars["Boolean"]>;
  countryShipping?: Maybe<ReadonlyArray<CountryShippingSetting>>;
  otherCountriesShipping?: Maybe<OtherCountriesShippingSetting>;
  isUpsert?: Maybe<Scalars["Boolean"]>;
};

export type ShippingSettingsSchema = {
  readonly __typename?: "ShippingSettingsSchema";
  readonly country: Country;
  readonly enabled: Scalars["Boolean"];
  readonly price?: Maybe<CurrencyValue>;
};

export type ShopifyOnboardingAuthInfo = {
  readonly __typename?: "ShopifyOnboardingAuthInfo";
  readonly shopUrl?: Maybe<Scalars["String"]>;
  readonly apiKey: Scalars["String"];
  readonly authToken?: Maybe<Scalars["String"]>;
};

export type ShopifySchema = {
  readonly __typename?: "ShopifySchema";
  readonly apiKey?: Maybe<Scalars["String"]>;
  readonly shopUrl: Scalars["String"];
  readonly shippingProfileId: Scalars["String"];
  readonly hasFlatRates: Scalars["Boolean"];
  readonly eligibleProductCount: Scalars["Int"];
  readonly onboardingAuthToken: Scalars["String"];
  readonly preorderCount: Scalars["Int"];
};

export type SignupSource =
  | "SIGNUP_GREEN_CHANNEL"
  | "SIGNUP_V4"
  | "SIGNUP_V5"
  | "SIGNUP_LEGACY"
  | "SIGNUP_V3"
  | "SIGNUP_MOBILE"
  | "SIGNUP_MERCHANT_PLUS"
  | "SIGNUP_EXPRESS";

export type SortByOrder = "ASC" | "DESC";

export type SortOrderFulfillmentSpeed = "TransactionDate" | "FulfillmentSpeed";

export type SortOrderTransactionDateField = "TransactionDate";

export type SortOrderType = "ASC" | "DESC";

export type SortProductQualityRefundField = "QualityRefundRate";

export type SortProductRatingField = "AverageRating";

export type SpecialOrderProgramSchema = {
  readonly __typename?: "SpecialOrderProgramSchema";
  readonly name: Scalars["String"];
  readonly taskLink?: Maybe<Scalars["String"]>;
};

export type StaticFines = {
  readonly __typename?: "StaticFines";
  readonly cancellationFine: CurrencyValue;
};

export type Status = "CANCELLED" | "DEDUCTED" | "DELAYING" | "PENDING";

export type StorefrontCustomizationSchema = {
  readonly __typename?: "StorefrontCustomizationSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly feeds: ReadonlyArray<StorefrontFeedSchema>;
  readonly visualTheme: StorefrontVisualThemeSchema;
};

export type StorefrontFeedSchema = {
  readonly __typename?: "StorefrontFeedSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
};

export type StorefrontSchema = {
  readonly __typename?: "StorefrontSchema";
  readonly name: Scalars["String"];
  readonly creationDate: Datetime;
  readonly reviewSummary: StoreReviewSummarySchema;
  readonly location?: Maybe<Country>;
  readonly customization?: Maybe<StorefrontCustomizationSchema>;
};

export type StorefrontServiceSchema = {
  readonly __typename?: "StorefrontServiceSchema";
  readonly serviceEnabled: Scalars["Boolean"];
  readonly merchantEnabled: Scalars["Boolean"];
  readonly forMerchant?: Maybe<StorefrontSchema>;
};

export type StorefrontServiceSchemaMerchantEnabledArgs = {
  id: Scalars["ObjectIdType"];
};

export type StorefrontServiceSchemaForMerchantArgs = {
  id: Scalars["ObjectIdType"];
};

export type StorefrontVisualThemeSchema = {
  readonly __typename?: "StorefrontVisualThemeSchema";
  readonly name: Scalars["String"];
  readonly primaryColor: Scalars["String"];
  readonly secondaryColor: Scalars["String"];
};

export type StoreRating = {
  readonly __typename?: "StoreRating";
  readonly date?: Maybe<Scalars["String"]>;
  readonly transactionId?: Maybe<Scalars["String"]>;
  readonly rating?: Maybe<Scalars["Int"]>;
  readonly comment?: Maybe<Scalars["String"]>;
  readonly orderIds: ReadonlyArray<Scalars["String"]>;
  readonly refundReason?: Maybe<Scalars["String"]>;
};

export type StoreReviewSummarySchema = {
  readonly __typename?: "StoreReviewSummarySchema";
  readonly count: Scalars["Int"];
  readonly averageRating: Scalars["Float"];
};

export type SubmitAttributeExtraction = {
  readonly __typename?: "SubmitAttributeExtraction";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SubmitAttributeExtractionInput = {
  readonly jobId: Scalars["ObjectIdType"];
  readonly attributeExtractionResult: ReadonlyArray<ExtractionResultInput>;
};

export type SubmitCategoryClassification = {
  readonly __typename?: "SubmitCategoryClassification";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SubmitCategoryClassificationInput = {
  readonly jobId: Scalars["ObjectIdType"];
  readonly categoryId?: Maybe<Scalars["String"]>;
  readonly categoryPath?: Maybe<Scalars["String"]>;
  readonly treeVersion?: Maybe<Scalars["String"]>;
};

export type SubmitCategoryManualOverride = {
  readonly __typename?: "SubmitCategoryManualOverride";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SubmitCategoryManualOverrideInput = {
  readonly productId: Scalars["String"];
  readonly categoryTreeId: Scalars["Int"];
  readonly categoryTreeVersion: Scalars["String"];
  readonly categoryId: Scalars["Int"];
  readonly categoryPath: Scalars["String"];
};

export type SubmitProductVideoContentManualReview = {
  readonly __typename?: "SubmitProductVideoContentManualReview";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SubmitProductVideoContentManualReviewInput = {
  readonly videoId: Scalars["ObjectIdType"];
  readonly productId: Scalars["ObjectIdType"];
  readonly merchantId: Scalars["ObjectIdType"];
  readonly videoTraits: ProductVideoContentReviewTraits;
  readonly videoRelatesToProduct: Scalars["Boolean"];
  readonly videoQuality: VideoQualityLevel;
};

export type SubmitProductVideoContentReview = {
  readonly __typename?: "SubmitProductVideoContentReview";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SubmitProductVideoContentReviewInput = {
  readonly jobId: Scalars["ObjectIdType"];
  readonly videoTraits: ProductVideoContentReviewTraits;
  readonly videoRelatesToProduct: Scalars["Boolean"];
  readonly videoQuality: VideoQualityLevel;
};

export type SubmitProductVideoIpManualReview = {
  readonly __typename?: "SubmitProductVideoIPManualReview";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SubmitProductVideoIpManualReviewInput = {
  readonly videoId: Scalars["ObjectIdType"];
  readonly productId: Scalars["ObjectIdType"];
  readonly merchantId: Scalars["ObjectIdType"];
  readonly ipViolationReason?: Maybe<ProductVideoIpViolationReason>;
  readonly ipInfringedBrandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly blurredInformationCategory?: Maybe<BlurredInformationCategory>;
};

export type SubmitProductVideoIpReview = {
  readonly __typename?: "SubmitProductVideoIPReview";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SubmitProductVideoIpReviewInput = {
  readonly jobId: Scalars["ObjectIdType"];
  readonly ipViolationReason?: Maybe<ProductVideoIpViolationReason>;
  readonly ipInfringedBrandId?: Maybe<Scalars["ObjectIdType"]>;
  readonly blurredInformationCategory?: Maybe<BlurredInformationCategory>;
};

export type SubmitWarehouseVerificationRequestInput = {
  readonly warehouseId: Scalars["ObjectIdType"];
  readonly documentUrls: ReadonlyArray<Scalars["String"]>;
};

export type SubmitWarehouseVerificationRequestMutation = {
  readonly __typename?: "SubmitWarehouseVerificationRequestMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type SubscriptionEndpointType = "URL" | "ARN";

export type SwedenConfirmedDeliveredCarrierTypes = {
  readonly __typename?: "SwedenConfirmedDeliveredCarrierTypes";
  readonly carrierId: Scalars["Int"];
  readonly swedenDeliveredCarrierTypes: ReadonlyArray<SwedenDeliveredCarrierType>;
};

export type SwedenDeliveredCarrierType = "IntraEUCarrier" | "IntlEUCarrier";

export type TaggingJobState =
  | "IMAGE_MISSING"
  | "COMPLETE"
  | "AWAITING_RESOLVER"
  | "AWAITING_MERCHANT_RELEASE"
  | "DISABLED_OR_ALREADY_INAPPROPRIATE"
  | "AWAITING_TAGGER"
  | "AWAITING_IN_HOUSE_TAGGER"
  | "OVERRIDDEN_COMPLETE"
  | "OVERRIDDEN"
  | "AWAITING_ML";

export type TaggingMlResult = "UNSURE" | "APPROVED" | "REJECTED";

export type TaggingMutations = {
  readonly __typename?: "TaggingMutations";
  readonly productVideoContentTag?: Maybe<ProductVideoContentTagMutations>;
  readonly productVideoIpTag?: Maybe<ProductVideoIpTagMutations>;
  readonly platformSweeps?: Maybe<PlatformSweepMutations>;
  readonly submitCategoryClassification?: Maybe<SubmitCategoryClassification>;
  readonly submitCategoryManualOverride?: Maybe<SubmitCategoryManualOverride>;
  readonly createProductTaxonomyCategoryDispute?: Maybe<CreateProductTaxonomyCategoryDispute>;
  readonly markProductTaxonomyCategoryDisputeUpdated?: Maybe<MarkProductTaxonomyCategoryDisputeUpdated>;
  readonly markProductTaxonomyCategoryDisputeUnchanged?: Maybe<MarkProductTaxonomyCategoryDisputeUnchanged>;
  readonly getAndClaimProductTaxonomyCategoryDispute?: Maybe<GetAndClaimProductTaxonomyCategoryDisputeForReview>;
  readonly submitAttributeExtraction?: Maybe<SubmitAttributeExtraction>;
};

export type TaggingMutationsSubmitCategoryClassificationArgs = {
  input: SubmitCategoryClassificationInput;
};

export type TaggingMutationsSubmitCategoryManualOverrideArgs = {
  input: SubmitCategoryManualOverrideInput;
};

export type TaggingMutationsCreateProductTaxonomyCategoryDisputeArgs = {
  input: CreateProductTaxonomyCategoryDisputeInput;
};

export type TaggingMutationsMarkProductTaxonomyCategoryDisputeUpdatedArgs = {
  input: MarkProductTaxonomyCategoryDisputeUpdatedInput;
};

export type TaggingMutationsMarkProductTaxonomyCategoryDisputeUnchangedArgs = {
  input: MarkProductTaxonomyCategoryDisputeUnchangedInput;
};

export type TaggingMutationsGetAndClaimProductTaxonomyCategoryDisputeArgs = {
  input?: Maybe<GetAndClaimProductTaxonomyCategoryDisputeForReviewInput>;
};

export type TaggingMutationsSubmitAttributeExtractionArgs = {
  input: SubmitAttributeExtractionInput;
};

export type TaggingServiceSchema = {
  readonly __typename?: "TaggingServiceSchema";
  readonly ipViolationTaggingManagement?: Maybe<IpViolationTaggingManagement>;
  readonly productVideoContentTaggerJob?: Maybe<ProductVideoTaggerJobSchema>;
  readonly productVideoIpTaggerJob?: Maybe<ProductVideoTaggerJobSchema>;
  readonly generalTaggingManagement?: Maybe<GeneralTaggingManagement>;
  readonly categoryClassificationTaggerJob?: Maybe<CategoryClassificationTaggerJobSchema>;
  readonly productTaggingStatus?: Maybe<ProductTaggingStatusSchema>;
  readonly productTaxonomyCategoryDisputeHub?: Maybe<ProductTaxonomyCategoryDisputeHub>;
  readonly attributeExtractionTaggerJob?: Maybe<AttributeExtractionTaggerJobSchema>;
};

export type TaggingServiceSchemaProductTaggingStatusArgs = {
  productId: Scalars["ObjectIdType"];
};

export type TaggingServiceSchemaAttributeExtractionTaggerJobArgs = {
  taskId?: Maybe<Scalars["String"]>;
};

export type TaggingViolationReason = {
  readonly __typename?: "TaggingViolationReason";
  readonly reason: CounterfeitReasonCode;
  readonly internalDisplayName: Scalars["String"];
  readonly displayName?: Maybe<Scalars["String"]>;
  readonly subcategories?: Maybe<ReadonlyArray<TaggingViolationSubcategory>>;
  readonly isBrandTaggingReason: Scalars["Boolean"];
};

export type TaggingViolationSubcategory = {
  readonly __typename?: "TaggingViolationSubcategory";
  readonly subcategory?: Maybe<TaggingViolationSubReasonCode>;
  readonly internalDisplayName: Scalars["String"];
  readonly displayName?: Maybe<Scalars["String"]>;
};

export type TaggingViolationSubReasonCode =
  | "BRAND_DISCREPANCY"
  | "CONFEDERATE_FLAG"
  | "RECREATIONAL_DRUGS_AND_CHEMICALS"
  | "SUBSCRIPTIONS_OR_MEMBERSHIPS"
  | "DOMESTIC_TERRORISTS_MEMORABILIA"
  | "HYPERREALISTIC_CONTENT"
  | "PLANT_SEED_WITH_IMPOSSIBLE_CLAIM"
  | "DANGEROUS_NON_CPA_VIOLATION"
  | "LASER_DISC"
  | "PRODUCT_VARIANCE"
  | "PRESCRIPTION_STRENGTH_ITEMS"
  | "NOT_FOCUS_OF_MAIN_IMAGE"
  | "REVIEW_SHOW_WRONG_PRODUCT"
  | "SPY_CAMERAS"
  | "TERRORIST_PROMOTION_GROUPS"
  | "EURO_CURRENCY"
  | "UNCENSORED_EROTIC_ANIME"
  | "PROHIBITED_CUSTOMS_CN"
  | "ASSAULT_WEAPON_CONVERSION_PIECES"
  | "IMAGE_OR_TITLE_CHANGE"
  | "SIZE_MISREPRESENTATION_MAIN_IMAGE"
  | "SIZE_NOT_AS_ADVERTISED"
  | "SEXUALLY_SUGGESTIVE_CONTENT"
  | "LISTING_PROMOTES_HIDING_PROHIBITED_SUBSTANCE"
  | "PENICILLIN"
  | "VHS_TAPE"
  | "VIDEO_GAME"
  | "EPA_EMMISIONS_DEFEAT_US"
  | "RATING_SHOW_WRONG_PRODUCT"
  | "UNREASONABLE_SPEC"
  | "HUMAN_GROWTH_HORMONE"
  | "BLURRED_LOGOS"
  | "SEATBELTS"
  | "FULLY_LOADED_TV_BOXES"
  | "GUN_SILENCER_COMPONENTS"
  | "ANIME_PRODUCTS"
  | "LIVE_ANIMAL"
  | "UNVERIFIED_WARRANTIES"
  | "ALCOHOL"
  | "TOBACCO"
  | "SIZE_MISPRESENTATION"
  | "POPPERS_AND_MUSCLE_RELAXANTS"
  | "HATEFUL_IMAGERY"
  | "NOT_FOCUS_MAIN_IMAGE"
  | "UNREALISTIC_HEALTH_CLAIM_PRODUCTS"
  | "GRADUAL_CHANGE"
  | "GUN_SILENCER_MISUSE"
  | "SELF_FEEDING_BABY_PILLOWS"
  | "METAL_NINJA_STARS"
  | "CN_PROHIBITED_PRODUCT_STUN_GUNS"
  | "FULLY_EXPOSED_NIPPLE"
  | "HOUSEKEEPING_TOUR_PACKAGES"
  | "RECORDS"
  | "UNVERIFIED_LOGO"
  | "RANDOM_PRODUCT"
  | "NUDE_MINOR_IN_NON_SEXUAL_CONTEXT"
  | "MERCAHNT_CONTACT_OR_REFERAL"
  | "RACIAL_CLEANSING"
  | "HIDDEN_SEX_TOYS"
  | "PLANTS"
  | "VITAMINS_AND_SUPPLEMENTS"
  | "FOOD"
  | "NON_CLINICAL_CONTENT"
  | "ENDANGERED_SPECIES"
  | "MOD_BOXES"
  | "UNSUPPORTED_MEDICAL_CLAIMS"
  | "BULLYING"
  | "BRANDING_CHANGE"
  | "EROTIC_SETUPS"
  | "SEXUALLY_EXPLICIT_CONTENT"
  | "OTC_MEDICATION"
  | "HOVERBOARDS"
  | "EPA_PESTICIDES_US"
  | "BENZENE"
  | "HUMAN_BY_PRODUCTS"
  | "COUNTERFEIT_CURRENCY"
  | "VIRTUAL_MONEY"
  | "MARIJUANA"
  | "TIRE_SPIKES"
  | "BLUE_RAY"
  | "PET_FOOD"
  | "ECIGARETTE_VAPE"
  | "IMAGE_OF_MASTURBATION"
  | "DVD"
  | "CHLOROFORM"
  | "ANTI_GAY"
  | "UNVERFIED_PRICE_INFORMATION"
  | "TOBACCO_SEEDS"
  | "PROHIBITED_SUBSTANCE_PIPE"
  | "BLURRED_WATERMARKS"
  | "COMPETITOR_WATERMARK"
  | "ODOMETER_CORRECTION_TOOLS"
  | "PROUD_BOY_MEMORABILIA"
  | "MISLEADING_KEY_FEATURE"
  | "CHILD_HARNESS"
  | "PILL_PRESSES"
  | "HITLER_IMAGERY"
  | "OTHER_WHITE_SUPREMACY_MEMORABILIA"
  | "SELF_FEEDING_BABY_BOTTLE_CLIPS"
  | "PESTICIDES"
  | "BLURRED_TAGS"
  | "UNAUTHROIZED_USE_WISH"
  | "NAZI_MEMORABILIA"
  | "HATE_SPEECH"
  | "MAGNETS_AS_TOYS"
  | "IMITATION_CURRENCY"
  | "EXPLOSIVE_WEAPONS"
  | "CD"
  | "US_PROP_MONEY"
  | "PRICE_POINT_UNREASONABLE"
  | "CONTACT_LENS_SOLUTION"
  | "KKK_PARAPHERNALIA"
  | "FULLY_EXPOSED_ANUS"
  | "BEVERAGES"
  | "CPSC_VIOLATION"
  | "UNVERIFIED_SHIPPING_TIME_FRAME"
  | "MISLEADING_CLAIMS"
  | "IMAGE_OF_PENETRATION"
  | "CASSETTE_TAPE"
  | "GLYPHOSATE"
  | "CN_PROHIBITED_PRODUCT_TASERS"
  | "GIFT_CARDS_OR_ACCESS_CODES"
  | "PLANT_SEEDS"
  | "FULLY_EXPOSED_GENITAL"
  | "UNVERIFIED_FREE_SHIPPING"
  | "STANDALONE_LITHIUM_BATTERY"
  | "LASER_POINTERS"
  | "VALUE_VARIANCE"
  | "SEXUALLY_EXPLICIT_MATERIAL"
  | "BULLION"
  | "JAMMERS"
  | "FIREARMS_AND_GUNS"
  | "CHILD_CARSEAT"
  | "CN_PROHIBITED_PRODUCT_IMITATION_FIREARMS"
  | "SEXUAL_CONTENT_INCLUDING_MINOR"
  | "GUN_BUILDING_KITS"
  | "PLANT_SEED_WITH_IMPOSSIBLE_CLAIM_V2"
  | "MISLEADING_WIG"
  | "IMAGE_NOT_PRODUCT"
  | "EYELASH_GROWTH_SERUM"
  | "FEEDBACK_ABOUT_NO_PRODUCT"
  | "CIGARETTE"
  | "CN_PROHIBITED_PRODUCT_BB_GUNS"
  | "NOT_DESCRIBE_AVAILABLE_QUANTITY"
  | "CN_PROHIBITED_PRODUCT_AIRSOFT"
  | "HATEFUL_CORONAVIRUS_PRODUCTS"
  | "INJECTABLE_ITEMS"
  | "CONTAINS_HARMFUL_CONTENT"
  | "SOFTWARE"
  | "SIZE_COLOR_OPTION_GAMING"
  | "HATE_GROUPS"
  | "QANON_MEMORABILIA"
  | "SURPRISE_BOX"
  | "CUSTOMER_FEEDBACK_ABOUT_FALSE_SPEC"
  | "BUTANE"
  | "PURCHANSED_FOLLOWERS"
  | "MISSING_KEY_REQUIREMENTS"
  | "GUN_SILENCERS"
  | "CONTACTS"
  | "TITLE_IMAGE_MISMATCH"
  | "COCKROACH_CHALK"
  | "HOOKAH_PEN"
  | "VAPE_LIQUID"
  | "DANGEROUS_CPA_VIOLATION"
  | "AMMUNITION";

export type TakedownRequestContestSchema = {
  readonly __typename?: "TakedownRequestContestSchema";
  readonly contestId: Scalars["ObjectIdType"];
  readonly state: TakedownRequestContestState;
  readonly source: TakedownRequestContestSource;
  readonly product: ProductSchema;
  readonly merchant?: Maybe<MerchantSchema>;
};

export type TakedownRequestContestSource = "REPORTED" | "NONE" | "IMAGE_MATCH";

export type TakedownRequestContestState =
  | "REJECTED"
  | "APPROVED"
  | "PENDING_REVIEW";

export type TakedownRequestMutations = {
  readonly __typename?: "TakedownRequestMutations";
  readonly createTakedownRequest?: Maybe<CreateTakedownRequest>;
};

export type TakedownRequestMutationsCreateTakedownRequestArgs = {
  input?: Maybe<CreateTakedownRequestInput>;
};

export type TakedownRequestSchema = {
  readonly __typename?: "TakedownRequestSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly reportedDate: Datetime;
  readonly brand: BrandSchema;
  readonly typeOfInfringement: TypeOfInfringement;
  readonly state: TakedownRequestState;
  readonly notes?: Maybe<Scalars["String"]>;
  readonly products: ReadonlyArray<TakedownRequestContestSchema>;
  readonly numProducts: Scalars["Int"];
  readonly name?: Maybe<Scalars["String"]>;
  readonly contact?: Maybe<Scalars["String"]>;
  readonly email?: Maybe<Scalars["String"]>;
  readonly phoneNumber?: Maybe<Scalars["String"]>;
};

export type TakedownRequestSchemaProductsArgs = {
  offset?: Maybe<Scalars["Int"]>;
  count?: Maybe<Scalars["Int"]>;
  states?: Maybe<ReadonlyArray<TakedownRequestContestState>>;
};

export type TakedownRequestSchemaNumProductsArgs = {
  states?: Maybe<ReadonlyArray<TakedownRequestContestState>>;
};

export type TakedownRequestState = "ACTIVE" | "COMPLETE" | "PENDING";

export type TaxAuthoritySchema = {
  readonly __typename?: "TaxAuthoritySchema";
  readonly id: Scalars["String"];
  readonly name: Scalars["String"];
  readonly type: TaxAuthorityType;
  readonly officialName?: Maybe<Scalars["String"]>;
};

export type TaxAuthorityType =
  | "FCP_ST"
  | "COUNTY_SALES_USE"
  | "DISTRICT_FOOD_BEVERAGE"
  | "MWST"
  | "GST"
  | "CITY_AMUSEMENT"
  | "HST"
  | "PIS"
  | "STATE_FOOD_BEVERAGE"
  | "GIT"
  | "IGST"
  | "ICMS_RD"
  | "VAT"
  | "IPI"
  | "DISTRICT_SALES_USE"
  | "DISTRICT_FEES"
  | "TOURISM_TAX_ADDITIONAL"
  | "COUNTY_AMUSEMENT"
  | "NHIL"
  | "COUNTY_RENTAL"
  | "CITY_RENTAL"
  | "CITY_FOOD_BEVERAGE"
  | "ITBMS"
  | "EEE"
  | "CITY_FEES"
  | "ICMS_ST_CNAE_IVA"
  | "BMP"
  | "SCT"
  | "IGV"
  | "TOURISM_TAX"
  | "GCT"
  | "CSU"
  | "CST"
  | "THSBT"
  | "STATE_SALES_USE"
  | "IGI"
  | "IVA"
  | "MOT"
  | "CBT"
  | "PST"
  | "ISS"
  | "ISV"
  | "IST"
  | "ICMS"
  | "SUT"
  | "COF"
  | "COM"
  | "ICMS_ST"
  | "FCP"
  | "STATE_AMUSEMENT"
  | "COMPENSATION_CESS"
  | "KDV"
  | "PVM"
  | "ICMS_ST_CNAE"
  | "FEE"
  | "IMI"
  | "PDV"
  | "ICMS_PMC"
  | "CLT"
  | "OMB"
  | "TVA"
  | "SGST"
  | "ST"
  | "SUFRAMA"
  | "EXC"
  | "MRDT"
  | "PCL"
  | "IGIC"
  | "UTGST"
  | "DISTRICT_AMUSEMENT"
  | "IPSI"
  | "ITBIS"
  | "DPH"
  | "TT"
  | "DISTRICT_RENTAL"
  | "COUNTY_FEES"
  | "COUNTY_FOOD_BEVERAGE"
  | "CGST"
  | "CITY_SALES_USE"
  | "CONSUMPTION_TAX"
  | "II"
  | "ICMS_PF"
  | "MVA"
  | "TELECOM"
  | "STATE_FEES"
  | "ICMS_CR"
  | "QST"
  | "STATE_RENTAL";

export type TaxConstants = {
  readonly __typename?: "TaxConstants";
  readonly us: UsTaxConstants;
  readonly ca: CaTaxConstants;
  readonly marketplaceCountries: ReadonlyArray<TaxMarketplaceCountry>;
  readonly marketplaceUnions: ReadonlyArray<TaxMarketplaceUnion>;
  readonly ukVatInfo: UkVatInfoSchema;
};

export type TaxConstantsMarketplaceCountriesArgs = {
  includeUpcoming?: Maybe<Scalars["Boolean"]>;
};

export type TaxConstantsMarketplaceUnionsArgs = {
  includeUpcoming?: Maybe<Scalars["Boolean"]>;
};

export type TaxDashboardReviewMutations = {
  readonly __typename?: "TaxDashboardReviewMutations";
  readonly reviewMerchantTaxIdentification: ReviewMerchantTaxIdentificationMutation;
};

export type TaxDashboardReviewMutationsReviewMerchantTaxIdentificationArgs = {
  input: ReviewMerchantTaxIdentificationInput;
};

export type TaxDashboardSchema = {
  readonly __typename?: "TaxDashboardSchema";
  readonly usTaxIdentificationMerchants?: Maybe<ReadonlyArray<MerchantSchema>>;
};

export type TaxDashboardSchemaUsTaxIdentificationMerchantsArgs = {
  query?: Maybe<Scalars["String"]>;
  searchType?: Maybe<MerchantTaxIdentificationSearchType>;
  formType?: Maybe<MerchantTaxIdentificationFormType>;
  status?: Maybe<MerchantTaxIdentificationStatus>;
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sort?: Maybe<MerchantTaxIdentificationSortFieldType>;
};

export type TaxLiabilitySchema = {
  readonly __typename?: "TaxLiabilitySchema";
  readonly userEntityTypeForRemit?: Maybe<KycMerchantType>;
  readonly remitType?: Maybe<CommerceTransactionTaxRemitType>;
  readonly remitPercentage?: Maybe<Scalars["Float"]>;
};

export type TaxMarketplaceCountry = {
  readonly __typename?: "TaxMarketplaceCountry";
  readonly country: Country;
  readonly launchDate?: Maybe<Datetime>;
};

export type TaxMarketplaceUnion = {
  readonly __typename?: "TaxMarketplaceUnion";
  readonly union: Union;
  readonly launchDate?: Maybe<Datetime>;
};

export type TaxonomyAttributeSchema = {
  readonly __typename?: "TaxonomyAttributeSchema";
  readonly id: Scalars["Int"];
  readonly name: Scalars["String"];
  readonly values?: Maybe<ReadonlyArray<TaxonomyAttributeValueSchema>>;
  readonly description: Scalars["String"];
  readonly dataType: AttributeDataType;
  readonly dataTypeFormat: AttributeDataTypeFormat;
  readonly usage: AttributeUsage;
  readonly mode: AttributeMode;
  readonly level: AttributeLevel;
  readonly isVariationAttribute: Scalars["Boolean"];
  readonly enabledForVariations: Scalars["Boolean"];
  readonly maxMultiSelect: Scalars["Int"];
};

export type TaxonomyAttributeValueSchema = {
  readonly __typename?: "TaxonomyAttributeValueSchema";
  readonly id: Scalars["Int"];
  readonly value: Scalars["String"];
};

export type TaxonomyCategorySchema = {
  readonly __typename?: "TaxonomyCategorySchema";
  readonly id: Scalars["String"];
  readonly name: Scalars["String"];
  readonly description: Scalars["String"];
  readonly categoryChildren?: Maybe<ReadonlyArray<TaxonomyCategorySchema>>;
  readonly categoriesAlongPath: ReadonlyArray<TaxonomyCategorySchema>;
  readonly categoryTreeId: Scalars["Int"];
  readonly categoryTreeVersion: Scalars["String"];
};

export type TaxonomySchema = {
  readonly __typename?: "TaxonomySchema";
  readonly category?: Maybe<TaxonomyCategorySchema>;
  readonly leafCategories?: Maybe<ReadonlyArray<TaxonomyCategorySchema>>;
  readonly attributes?: Maybe<ReadonlyArray<TaxonomyAttributeSchema>>;
  readonly l1Categories?: Maybe<ReadonlyArray<TaxonomyCategorySchema>>;
  readonly variationOptions?: Maybe<ReadonlyArray<TaxonomyAttributeSchema>>;
};

export type TaxonomySchemaCategoryArgs = {
  categoryId?: Maybe<Scalars["Int"]>;
  treeVersion?: Maybe<Scalars["String"]>;
};

export type TaxonomySchemaLeafCategoriesArgs = {
  l1CategoryId: Scalars["Int"];
  treeVersion?: Maybe<Scalars["String"]>;
};

export type TaxonomySchemaAttributesArgs = {
  categoryId: Scalars["Int"];
  treeVersion?: Maybe<Scalars["String"]>;
};

export type TaxonomySchemaL1CategoriesArgs = {
  leafCategoryIds?: Maybe<ReadonlyArray<Scalars["Int"]>>;
  treeVersion?: Maybe<Scalars["String"]>;
};

export type TaxonomySchemaVariationOptionsArgs = {
  categoryId: Scalars["Int"];
  treeVersion?: Maybe<Scalars["String"]>;
};

export type TaxSetting = {
  readonly __typename?: "TaxSetting";
  readonly id: Scalars["ObjectIdType"];
  readonly authority: TaxSettingAuthority;
  readonly taxNumber?: Maybe<Scalars["String"]>;
  readonly taxNumberType?: Maybe<TaxSettingTaxNumberType>;
  readonly merchantId: Scalars["ObjectIdType"];
  readonly lastUpdated: Datetime;
  readonly status: CommerceMerchantTaxInfoStatus;
  readonly reviewStatus?: Maybe<CommerceMerchantReviewStatus>;
  readonly certificateFileUrl?: Maybe<Scalars["String"]>;
  readonly taxCertificateFile?: Maybe<MerchantFileSchema>;
  readonly ossRegistrationCountry?: Maybe<Country>;
  readonly germanyDetails?: Maybe<TaxSettingGermanyDetails>;
  readonly mexicoDetails?: Maybe<TaxSettingMexicoDetails>;
  readonly taxLiability?: Maybe<ReadonlyArray<TaxLiabilitySchema>>;
  readonly euDetails?: Maybe<TaxSettingEuDetails>;
  readonly ukDetails?: Maybe<TaxSettingUkDetails>;
};

export type TaxSettingTaxLiabilityArgs = {
  whenShippingFromDomicileCountry?: Maybe<Scalars["Boolean"]>;
};

export type TaxSettingAuthority = {
  readonly __typename?: "TaxSettingAuthority";
  readonly displayName?: Maybe<Scalars["String"]>;
  readonly stateCode?: Maybe<Scalars["String"]>;
  readonly country: Country;
  readonly level: TaxSettingAuthorityLevel;
};

export type TaxSettingAuthorityLevel =
  | "COUNTY"
  | "CITY"
  | "STATE"
  | "DISTRICT"
  | "COUNTRY";

export type TaxSettingEuDetails = {
  readonly __typename?: "TaxSettingEUDetails";
  readonly ustSt1T1Number?: Maybe<Scalars["String"]>;
};

export type TaxSettingGermanyDetails = {
  readonly __typename?: "TaxSettingGermanyDetails";
  readonly noNumberReason?: Maybe<CommerceMerchantTaxInfoGermanyNoNumberReason>;
};

export type TaxSettingMexicoDetails = {
  readonly __typename?: "TaxSettingMexicoDetails";
  readonly defaultShipFromIsMx?: Maybe<Scalars["Boolean"]>;
};

export type TaxSettingsInput = {
  readonly taxNumber?: Maybe<Scalars["String"]>;
  readonly countryCode: CountryCode;
  readonly ossRegistrationCountryCode?: Maybe<CountryCode>;
  readonly authorityLevel: TaxSettingAuthorityLevel;
  readonly stateCode?: Maybe<Scalars["String"]>;
  readonly displayName?: Maybe<Scalars["String"]>;
  readonly taxNumberType?: Maybe<TaxSettingTaxNumberType>;
  readonly certificateFileUrl?: Maybe<Scalars["String"]>;
  readonly mxDefaultShipFromIsMx?: Maybe<Scalars["Boolean"]>;
  readonly ustSt1T1Number?: Maybe<Scalars["String"]>;
  readonly gbVatEntity?: Maybe<GbVatEntityType>;
};

export type TaxSettingsMutations = {
  readonly __typename?: "TaxSettingsMutations";
  readonly upsertTaxSettings: UpsertTaxSettingsMutation;
};

export type TaxSettingsMutationsUpsertTaxSettingsArgs = {
  input: UpsertTaxSettingsInput;
};

export type TaxSettingTaxNumberType =
  | "VALUE_ADDED_TAX"
  | "NATIONAL_INSURANCE_NUMBER"
  | "OSS"
  | "OTHER"
  | "COMPANY_REGISTRITION_NUMBER"
  | "TAX_IDENTIFICATION_NUMBER";

export type TaxSettingUkDetails = {
  readonly __typename?: "TaxSettingUKDetails";
  readonly gbVatEntity?: Maybe<GbVatEntityType>;
};

export type TaxTargetCurrency = "CUSTOMER" | "MERCHANT" | "AUTHORITY";

export type TaxType =
  | "US_SC"
  | "US_IM"
  | "US_SA"
  | "INTERNATIONAL_EXC"
  | "INTERNATIONAL_ES"
  | "US_VG"
  | "US_MVT"
  | "US_SV"
  | "INTERNATIONAL_EC"
  | "US_US"
  | "US_UU"
  | "INTERNATIONAL_CA1"
  | "INTERNATIONAL_ER"
  | "US_CU"
  | "INTERNATIONAL_NL"
  | "INTERNATIONAL_UN"
  | "INTERNATIONAL_MVT"
  | "INTERNATIONAL_SN"
  | "US_CA"
  | "US_BO"
  | "INTERNATIONAL_NR"
  | "US_UN"
  | "INTERNATIONAL_TR"
  | "INTERNATIONAL_US"
  | "INTERNATIONAL_SA"
  | "INTERNATIONAL_ZI"
  | "INTERNATIONAL_DS"
  | "US_S"
  | "INTERNATIONAL_ZC"
  | "INTERNATIONAL_SI"
  | "INTERNATIONAL_ZE"
  | "INTERNATIONAL_RC"
  | "US_IC"
  | "US_RC"
  | "US_CA1"
  | "US_GR"
  | "US_STK"
  | "US_RU"
  | "INTERNATIONAL_ZR"
  | "INTERNATIONAL_TE"
  | "US_LT"
  | "US_RS"
  | "US_ZE"
  | "INTERNATIONAL_IR"
  | "INTERNATIONAL_IS"
  | "INTERNATIONAL_VG"
  | "INTERNATIONAL_AC"
  | "INTERNATIONAL_MP"
  | "INTERNATIONAL_CA"
  | "INTERNATIONAL_IC"
  | "INTERNATIONAL_STK"
  | "INTERNATIONAL_S"
  | "US_ZR"
  | "US_EXC"
  | "US_NL"
  | "INTERNATIONAL_IM"
  | "INTERNATIONAL_MA";

export type TermsOfServiceRegionType = "EU" | "CN" | "US";

export type TermsOfServiceSchema = {
  readonly __typename?: "TermsOfServiceSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly tosType: TermsOfServiceType;
  readonly version: Scalars["Int"];
  readonly region?: Maybe<TermsOfServiceRegionType>;
  readonly releaseDate: Datetime;
  readonly canAccept: Scalars["Boolean"];
  readonly merchantTermsOfServiceAgreement?: Maybe<MerchantTermsOfServiceAgreementSchema>;
};

export type TermsOfServiceType =
  | "MERCHANT"
  | "PAYMENT_REAL_NAME_AUTH"
  | "UPS"
  | "MERCHANT_PARTNER"
  | "PRODUCT_BOOST"
  | "WISH_EXPRESS"
  | "MERCHANT_VALIDATION"
  | "WISH_EXPRESS_RETURN"
  | "WPS"
  | "EPC";

export type TicketSearchType =
  | "PRODUCT_ID"
  | "ID"
  | "TRANSACTION_ID"
  | "USER_NAME"
  | "ORDER_ID"
  | "SKU"
  | "RETURN_ID";

export type TicketSortFieldType = "CREATED_TIME" | "LAST_UPDATE";

export type Timedelta = {
  readonly __typename?: "Timedelta";
  readonly seconds: Scalars["Int"];
  readonly minutes: Scalars["Float"];
  readonly hours: Scalars["Float"];
  readonly days: Scalars["Float"];
};

export type TodoItem = {
  readonly __typename?: "TodoItem";
  readonly id: Scalars["ObjectIdType"];
  readonly type: MerchantTodoItemType;
  readonly sentiment: MerchantTodoItemSentiment;
  readonly completed: Scalars["Boolean"];
  readonly snoozeOptionText?: Maybe<Scalars["String"]>;
  readonly canSnooze: Scalars["Boolean"];
  readonly snoozeCount: Scalars["Int"];
  readonly snoozeHours?: Maybe<Scalars["Int"]>;
  readonly pinned: Scalars["Boolean"];
};

export type TodoSchema = {
  readonly __typename?: "TodoSchema";
  readonly items: ReadonlyArray<TodoItem>;
};

export type TosServiceSchema = {
  readonly __typename?: "TosServiceSchema";
  readonly termsOfService?: Maybe<TermsOfServiceSchema>;
};

export type TosServiceSchemaTermsOfServiceArgs = {
  tosType: TermsOfServiceType;
  version?: Maybe<Scalars["Int"]>;
  country?: Maybe<CountryCode>;
};

export type TrackingCheckpointLocationSchema = {
  readonly __typename?: "TrackingCheckpointLocationSchema";
  readonly city?: Maybe<Scalars["String"]>;
  readonly state?: Maybe<Scalars["String"]>;
  readonly country?: Maybe<Country>;
  readonly zipcode?: Maybe<Scalars["String"]>;
  readonly coordinates?: Maybe<GeoCoordinates>;
};

export type TrackingCheckpointResultingStateSchema = {
  readonly __typename?: "TrackingCheckpointResultingStateSchema";
  readonly state: CheckpointAfterActionState;
  readonly text?: Maybe<Scalars["String"]>;
};

export type TrackingCheckpointSchema = {
  readonly __typename?: "TrackingCheckpointSchema";
  readonly date: Datetime;
  readonly resultingTracking: TrackingCheckpointResultingStateSchema;
  readonly message?: Maybe<Scalars["String"]>;
  readonly wishpostAction?: Maybe<Scalars["String"]>;
  readonly type?: Maybe<TrackingInfoCheckpointType>;
  readonly location: TrackingCheckpointLocationSchema;
};

export type TrackingDisputeHub = {
  readonly __typename?: "TrackingDisputeHub";
  readonly disputeCount?: Maybe<Scalars["Int"]>;
  readonly disputes?: Maybe<ReadonlyArray<TrackingDisputeSchema>>;
};

export type TrackingDisputeHubDisputeCountArgs = {
  states: ReadonlyArray<TrackingDisputeState>;
  searchType?: Maybe<TrackingDisputeSearchType>;
  query?: Maybe<Scalars["String"]>;
  creationDateStart?: Maybe<DatetimeInput>;
  creationDateEnd?: Maybe<DatetimeInput>;
  filterWarningDisputes?: Maybe<Scalars["Boolean"]>;
};

export type TrackingDisputeHubDisputesArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  states: ReadonlyArray<TrackingDisputeState>;
  searchType?: Maybe<TrackingDisputeSearchType>;
  query?: Maybe<Scalars["String"]>;
  creationDateStart?: Maybe<DatetimeInput>;
  creationDateEnd?: Maybe<DatetimeInput>;
  sort?: Maybe<DisputeSort>;
  filterWarningDisputes?: Maybe<Scalars["Boolean"]>;
};

export type TrackingDisputeMessageSchema = {
  readonly __typename?: "TrackingDisputeMessageSchema";
  readonly senderType: TrackingDisputeMessageSenderType;
  readonly senderName: Scalars["String"];
  readonly date: Datetime;
  readonly message?: Maybe<Scalars["String"]>;
  readonly type: TrackingDisputeMessageType;
  readonly files: ReadonlyArray<MerchantFileSchema>;
  readonly reportedFulfillmentDate?: Maybe<Datetime>;
  readonly reportedDeliveredDate?: Maybe<Datetime>;
  readonly reportedState?: Maybe<UsStateCode>;
  readonly reportedCountry?: Maybe<CountryCode>;
};

export type TrackingDisputeMessageSenderType = "ADMIN" | "MERCHANT";

export type TrackingDisputeMessageType =
  | "ADMIN_COMMENT"
  | "INITIATED"
  | "REOPEN"
  | "REPLY"
  | "CANCELLED"
  | "CLOSE"
  | "APPROVED"
  | "DECLINED";

export type TrackingDisputeSchema = {
  readonly __typename?: "TrackingDisputeSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly state: TrackingDisputeState;
  readonly orderId: Scalars["ObjectIdType"];
  readonly trackingId?: Maybe<Scalars["String"]>;
  readonly requestReason: Scalars["String"];
  readonly merchant: MerchantSchema;
  readonly lastUpdate?: Maybe<Datetime>;
  readonly createDate: Datetime;
  readonly isWishExpressLate: Scalars["Boolean"];
  readonly productId: Scalars["ObjectIdType"];
  readonly messages: ReadonlyArray<TrackingDisputeMessageSchema>;
  readonly reportedFulfillmentDate?: Maybe<Datetime>;
  readonly reportedDeliveredDate?: Maybe<Datetime>;
  readonly reportedState?: Maybe<UsStateCode>;
  readonly reportedCountry?: Maybe<CountryCode>;
  readonly orderInfractionDisputeSubreason?: Maybe<OrderInfractionDisputeSubreason>;
  readonly warehouseCountry?: Maybe<Scalars["String"]>;
  readonly carrierSiteLink?: Maybe<Scalars["String"]>;
  readonly merchantNote?: Maybe<Scalars["String"]>;
  readonly isClosed?: Maybe<Scalars["Boolean"]>;
  readonly warningId?: Maybe<Scalars["ObjectIdType"]>;
};

export type TrackingDisputeSearchType = "ORDER_ID";

export type TrackingDisputeState =
  | "AWAITING_ADMIN"
  | "CANCELLED"
  | "AWAITING_MERCHANT"
  | "APPROVED"
  | "DECLINED";

export type TrackingIdFormatSchema = {
  readonly __typename?: "TrackingIDFormatSchema";
  readonly country?: Maybe<Country>;
  readonly format?: Maybe<Scalars["String"]>;
  readonly example?: Maybe<Scalars["String"]>;
};

export type TrackingInfoCheckpointType =
  | "SOURCE"
  | "DESTINATION"
  | "WISHPOST_DELEGATE"
  | "UNKNOWN";

export type TrackingPerformanceStats = {
  readonly __typename?: "TrackingPerformanceStats";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly validTrackingRate?: Maybe<Scalars["Float"]>;
  readonly lateConfirmedFulfillmentRate?: Maybe<Scalars["Float"]>;
  readonly averageFulfillmentTime?: Maybe<Timedelta>;
  readonly ordersFulfilled?: Maybe<Scalars["Int"]>;
  readonly averageClaimedFulfillmentTime?: Maybe<Timedelta>;
  readonly ordersWithValidTracking?: Maybe<Scalars["Int"]>;
  readonly preFulfillmentCancellations?: Maybe<Scalars["Int"]>;
  readonly preFulfillmentCancellationRate?: Maybe<Scalars["Float"]>;
  readonly lateConfirmedFulfillment?: Maybe<Scalars["Int"]>;
};

export type TrackingSourceEnum =
  | "TRACKINGMORE"
  | "DHL"
  | "CANADAPOST"
  | "GENERIC"
  | "ROUTE"
  | "USPS"
  | "WOSP"
  | "EASYPOST"
  | "NO_OP"
  | "TRACK17"
  | "LAPOSTE"
  | "USER"
  | "EMS"
  | "AFTERSHIP"
  | "WISHPOST"
  | "CHINAPOST"
  | "WTS";

export type TrademarkCountryCode =
  | "US"
  | "EU"
  | "CA"
  | "GB"
  | "MX"
  | "FR"
  | "CN"
  | "IT"
  | "JP"
  | "DE"
  | "SG"
  | "NL"
  | "IN"
  | "CH"
  | "AU"
  | "ES"
  | "BR"
  | "TR"
  | "AE";

export type TransactionPaymentType =
  | "BRAINTREE_FB"
  | "UNKNOWN"
  | "PAYPAL"
  | "SHOPIFY_CHECKOUT"
  | "PAYTM"
  | "TWITTERDIRECTBUY"
  | "KLARNA_PAYLATER"
  | "NONE"
  | "BRAINTREE"
  | "AFFIRM"
  | "EBANX"
  | "STRIPE_SAMSUNG_PAY"
  | "KLARNA"
  | "AFTERPAY_CASHAPP"
  | "PIX"
  | "PAYNEARME"
  | "BRAINTREE_ACH"
  | "BRAINTREE_GOOGLE"
  | "AFTERPAY"
  | "XENDIT_INVOICE"
  | "STRIPE"
  | "BRAINTREE_PAYPAL"
  | "OXXO"
  | "BOKU"
  | "ADYEN"
  | "COMMERCE_LOAN"
  | "OFFLINE_CASH"
  | "STRIPE_GOOGLE"
  | "FB_CHECKOUT"
  | "ADYEN_BANKING"
  | "BOLETO"
  | "STRIPE_APPLE_PAY"
  | "STRIPE_IDEAL"
  | "BRAINTREE_VENMO";

export type TrueTagSchema = {
  readonly __typename?: "TrueTagSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
  readonly topLevel?: Maybe<TrueTagSchema>;
};

export type TwoFactorCodeState = "EXPIRED" | "INVALID" | "OK";

export type TwoFactorGenTokenInput = {
  readonly username: Scalars["String"];
  readonly isEnablingTfa?: Maybe<Scalars["Boolean"]>;
  readonly sendPhoneCall?: Maybe<Scalars["Boolean"]>;
};

export type TwoFactorGenTokenMutation = {
  readonly __typename?: "TwoFactorGenTokenMutation";
  readonly obfuscatedPhoneNumber?: Maybe<Scalars["String"]>;
  readonly allowTfaPhone?: Maybe<Scalars["Boolean"]>;
  readonly isMerchant?: Maybe<Scalars["Boolean"]>;
  readonly bdEmail?: Maybe<Scalars["String"]>;
  readonly isInternalEmployee?: Maybe<Scalars["Boolean"]>;
  readonly ok: Scalars["Boolean"];
  readonly error?: Maybe<Scalars["String"]>;
};

export type TwoFactorMutations = {
  readonly __typename?: "TwoFactorMutations";
  readonly sendCode: TwoFactorSendCodeMutation;
  readonly verifyCode: TwoFactorVerifyCodeMutation;
  readonly turnOn: TwoFactorTurnOnMutation;
  readonly turnOff: TwoFactorTurnOffMutation;
};

export type TwoFactorMutationsVerifyCodeArgs = {
  input: TwoFactorVerifyCodeInput;
};

export type TwoFactorMutationsTurnOnArgs = {
  input: TwoFactorTurnOnInput;
};

export type TwoFactorMutationsTurnOffArgs = {
  input: TwoFactorTurnOffInput;
};

export type TwoFactorSendCodeMutation = {
  readonly __typename?: "TwoFactorSendCodeMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly sent?: Maybe<Scalars["Boolean"]>;
  readonly sentTime?: Maybe<Datetime>;
};

export type TwoFactorTurnOffInput = {
  readonly code: Scalars["String"];
};

export type TwoFactorTurnOffMutation = {
  readonly __typename?: "TwoFactorTurnOffMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly codeState?: Maybe<TwoFactorCodeState>;
  readonly isOn?: Maybe<Scalars["Boolean"]>;
};

export type TwoFactorTurnOnInput = {
  readonly code: Scalars["String"];
};

export type TwoFactorTurnOnMutation = {
  readonly __typename?: "TwoFactorTurnOnMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly codeState?: Maybe<TwoFactorCodeState>;
  readonly isOn?: Maybe<Scalars["Boolean"]>;
  readonly backupCodes?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type TwoFactorVerifyCodeInput = {
  readonly code: Scalars["String"];
};

export type TwoFactorVerifyCodeMutation = {
  readonly __typename?: "TwoFactorVerifyCodeMutation";
  readonly error?: Maybe<Scalars["String"]>;
  readonly codeState?: Maybe<TwoFactorCodeState>;
};

export type TypeOfInfringement =
  | "TRADEMARK_INFRINGEMENT"
  | "COPYRIGHT"
  | "PATENT_INFRINGEMENT"
  | "EU_COMMUNITY_DESIGN_VIOLATION"
  | "BRAND_PROTECTION"
  | "RIGHT_OF_PUBLICITY"
  | "COUNTERFEIT";

export type UiStateMutations = {
  readonly __typename?: "UIStateMutations";
  readonly clear: ClearUiState;
  readonly update: UpdateUiState;
  readonly clearAll: ClearAllUiState;
};

export type UiStateMutationsClearArgs = {
  input: UpdateUiStateInput;
};

export type UiStateMutationsUpdateArgs = {
  input: UpdateUiStateInput;
};

export type UiStateSchema = {
  readonly __typename?: "UIStateSchema";
  readonly string?: Maybe<Scalars["String"]>;
  readonly int?: Maybe<Scalars["Int"]>;
  readonly bool?: Maybe<Scalars["Boolean"]>;
  readonly stringArray?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly intArray?: Maybe<ReadonlyArray<Scalars["Int"]>>;
};

export type UiStateSchemaStringArgs = {
  state: UserUiState;
};

export type UiStateSchemaIntArgs = {
  state: UserUiState;
};

export type UiStateSchemaBoolArgs = {
  state: UserUiState;
};

export type UiStateSchemaStringArrayArgs = {
  state: UserUiState;
};

export type UiStateSchemaIntArrayArgs = {
  state: UserUiState;
};

export type UkVatInfoSchema = {
  readonly __typename?: "UKVatInfoSchema";
  readonly name: Scalars["String"];
  readonly number: Scalars["String"];
  readonly eoriNumber: Scalars["String"];
};

export type Union = {
  readonly __typename?: "Union";
  readonly code: Scalars["String"];
  readonly name: Scalars["String"];
  readonly countries?: Maybe<ReadonlyArray<Country>>;
};

export type UnionNameArgs = {
  localized?: Maybe<Scalars["Boolean"]>;
};

export type UnitCombined =
  | "CENTILITER"
  | "CENTIMETER"
  | "COUNT"
  | "CUBICMETER"
  | "FLUID_OUNCE"
  | "FOOT"
  | "GALLON"
  | "GRAM"
  | "INCH"
  | "KILOGRAM"
  | "LITER"
  | "LOAD"
  | "METER"
  | "MILLIGRAM"
  | "MILLILITER"
  | "OUNCE"
  | "PINT"
  | "POD"
  | "POUND"
  | "QUART"
  | "ROLL"
  | "SQUARE_FOOT"
  | "SQUARE_METER"
  | "WASH"
  | "YARD";

export type UpcProductSchema = {
  readonly __typename?: "UPCProductSchema";
  readonly upc: Scalars["String"];
  readonly name?: Maybe<Scalars["String"]>;
  readonly description?: Maybe<Scalars["String"]>;
  readonly variations?: Maybe<ReadonlyArray<UpcVariationSchema>>;
  readonly images?: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
  readonly brandName?: Maybe<Scalars["String"]>;
};

export type UpcProductServiceSchema = {
  readonly __typename?: "UPCProductServiceSchema";
  readonly product?: Maybe<UpcProductSchema>;
};

export type UpcProductServiceSchemaProductArgs = {
  upc?: Scalars["String"];
};

export type UpcVariationSchema = {
  readonly __typename?: "UPCVariationSchema";
  readonly upc: Scalars["String"];
  readonly size?: Maybe<Scalars["String"]>;
  readonly color?: Maybe<Scalars["String"]>;
  readonly price?: Maybe<CurrencyValue>;
  readonly images?: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
  readonly productName?: Maybe<Scalars["String"]>;
};

export type UpdateAuditQueueWarning = {
  readonly __typename?: "UpdateAuditQueueWarning";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpdateAuditQueueWarningInput = {
  readonly action: MerchantWarningAuditAction;
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly ids?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly auditRevertReason?: Maybe<MerchantWarningAuditRevertReason>;
};

export type UpdateMerchantFinalSale = {
  readonly __typename?: "UpdateMerchantFinalSale";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpdateMerchantGamingReviewTicket = {
  readonly __typename?: "UpdateMerchantGamingReviewTicket";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpdateOffsiteBoost = {
  readonly __typename?: "UpdateOffsiteBoost";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpdateOrderDeliveryConfirmation = {
  readonly __typename?: "UpdateOrderDeliveryConfirmation";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type UpdateOrderDeliveryConfirmationInput = {
  readonly orderId: Scalars["ObjectIdType"];
  readonly dateDelivered: DatetimeInput;
  readonly trackingUrl?: Maybe<Scalars["String"]>;
  readonly deliveryReceiptFileUrl?: Maybe<Scalars["String"]>;
};

export type UpdatePayoneerSettingInput = {
  readonly personalName: Scalars["String"];
  readonly personalPhoneNumber: Scalars["String"];
  readonly personalId?: Maybe<Scalars["String"]>;
  readonly businessName?: Maybe<Scalars["String"]>;
  readonly businessId?: Maybe<Scalars["String"]>;
  readonly collectorType: MerchantPaymentCollectorType;
};

export type UpdatePayoneerSettingMutation = {
  readonly __typename?: "UpdatePayoneerSettingMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly newNextPayoutTime?: Maybe<Datetime>;
};

export type UpdatePayPalSettingInput = {
  readonly email: Scalars["String"];
  readonly personalName: Scalars["String"];
  readonly personalPhoneNumber: Scalars["String"];
  readonly personalId?: Maybe<Scalars["String"]>;
  readonly businessName?: Maybe<Scalars["String"]>;
  readonly businessId?: Maybe<Scalars["String"]>;
  readonly collectorType: MerchantPaymentCollectorType;
};

export type UpdatePayPalSettingMutation = {
  readonly __typename?: "UpdatePayPalSettingMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly newNextPayoutTime?: Maybe<Datetime>;
};

export type UpdatePermissionInput = {
  readonly id: Scalars["String"];
  readonly permission: PermissionType;
  readonly status: PermissionStatusType;
};

export type UpdatePermissionMutation = {
  readonly __typename?: "UpdatePermissionMutation";
  readonly ok: Scalars["Boolean"];
  readonly error?: Maybe<Scalars["String"]>;
};

export type UpdateProductLogisticsMetadata = {
  readonly __typename?: "UpdateProductLogisticsMetadata";
  readonly success: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type UpdateProductLogisticsMetadataInput = {
  readonly productId: Scalars["ObjectIdType"];
  readonly variationId?: Maybe<Scalars["ObjectIdType"]>;
  readonly packageDimensions: PackageDimensionsInput;
};

export type UpdateRoleInput = {
  readonly id: Scalars["String"];
  readonly role: RoleType;
  readonly assigned: Scalars["Boolean"];
};

export type UpdateRoleMutation = {
  readonly __typename?: "UpdateRoleMutation";
  readonly ok: Scalars["Boolean"];
  readonly error?: Maybe<Scalars["String"]>;
};

export type UpdateShippingProvider = {
  readonly __typename?: "UpdateShippingProvider";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly shippingProvider?: Maybe<ShippingProviderSchema>;
};

export type UpdateShippingProviderName = {
  readonly __typename?: "UpdateShippingProviderName";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly shippingProvider?: Maybe<ShippingProviderSchema>;
};

export type UpdateShippingProviderNameInput = {
  readonly providerId: Scalars["Int"];
  readonly name: Scalars["String"];
};

export type UpdateShippingSetting = {
  readonly __typename?: "UpdateShippingSetting";
  readonly ok?: Maybe<Scalars["Boolean"]>;
  readonly message?: Maybe<Scalars["String"]>;
  readonly useShopifyShippingRate?: Maybe<Scalars["Boolean"]>;
};

export type UpdateSystemUpdateBaseAnnouncement = {
  readonly __typename?: "UpdateSystemUpdateBaseAnnouncement";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpdateSystemUpdateBaseAnnouncementInput = {
  readonly id: Scalars["ObjectIdType"];
  readonly publishDate?: Maybe<DatetimeInput>;
  readonly expiryDate?: Maybe<DatetimeInput>;
  readonly audienceGroups?: Maybe<ReadonlyArray<AudienceGroup>>;
  readonly merchantIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly categories?: Maybe<ReadonlyArray<AnnouncementCategory>>;
  readonly program?: Maybe<AnnouncementProgram>;
  readonly locales?: Maybe<ReadonlyArray<AnnouncementLocale>>;
  readonly content?: Maybe<ReadonlyArray<CreateAnnouncementContentSchemaInput>>;
};

export type UpdateUiState = {
  readonly __typename?: "UpdateUIState";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpdateUiStateInput = {
  readonly state: UserUiState;
  readonly intValue?: Maybe<Scalars["Int"]>;
  readonly boolValue?: Maybe<Scalars["Boolean"]>;
  readonly stringValue?: Maybe<Scalars["String"]>;
  readonly stringArrayValue?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly intArrayValue?: Maybe<ReadonlyArray<Scalars["Int"]>>;
};

export type UpdateUserInfoInput = {
  readonly id: Scalars["ObjectIdType"];
  readonly firstName?: Maybe<Scalars["String"]>;
  readonly lastName?: Maybe<Scalars["String"]>;
  readonly email?: Maybe<Scalars["String"]>;
  readonly bdMerchantCountry?: Maybe<BdMerchantCountryCodeType>;
  readonly manager?: Maybe<Scalars["ObjectIdType"]>;
  readonly enabled?: Maybe<Scalars["Boolean"]>;
};

export type UpdateUserInfoMutation = {
  readonly __typename?: "UpdateUserInfoMutation";
  readonly ok: Scalars["Boolean"];
  readonly error?: Maybe<Scalars["String"]>;
};

export type UpdateUserQueuesInput = {
  readonly id: Scalars["ObjectIdType"];
  readonly queueId: Scalars["ObjectIdType"];
  readonly assigned: Scalars["Boolean"];
};

export type UpdateUserQueuesMutation = {
  readonly __typename?: "UpdateUserQueuesMutation";
  readonly ok: Scalars["Boolean"];
  readonly error?: Maybe<Scalars["String"]>;
};

export type UploadEuvatTaxQuestionnaire = {
  readonly __typename?: "UploadEUVATTaxQuestionnaire";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type UploadMutations = {
  readonly __typename?: "UploadMutations";
  readonly initiateUpload?: Maybe<InitiateUploadMutation>;
};

export type UploadMutationsInitiateUploadArgs = {
  input: InitiateUploadInput;
};

export type UpsertConfirmedDeliveryCarrier = {
  readonly __typename?: "UpsertConfirmedDeliveryCarrier";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertDiscountCampaignInput = {
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly name?: Maybe<Scalars["String"]>;
  readonly startTime?: Maybe<DatetimeInput>;
  readonly endTime?: Maybe<DatetimeInput>;
  readonly countries?: Maybe<ReadonlyArray<CountryCode>>;
  readonly discountData?: Maybe<ReadonlyArray<VariationDiscountDataInput>>;
  readonly eventId?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertDiscountCampaignMutation = {
  readonly __typename?: "UpsertDiscountCampaignMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly campaignId?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertFlashSaleCampaignInput = {
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly name?: Maybe<Scalars["String"]>;
  readonly startTime?: Maybe<DatetimeInput>;
  readonly endTime?: Maybe<DatetimeInput>;
  readonly countries?: Maybe<ReadonlyArray<CountryCode>>;
  readonly discountData?: Maybe<ReadonlyArray<VariationDiscountDataInput>>;
  readonly eventId?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertFlashSaleCampaignMutation = {
  readonly __typename?: "UpsertFlashSaleCampaignMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly campaignId?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertFranceLinkProductCompliance = {
  readonly __typename?: "UpsertFranceLinkProductCompliance";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly rateLimit?: Maybe<Scalars["Boolean"]>;
};

export type UpsertFranceLinkProductComplianceInput = {
  readonly action: LinkProductComplianceAction;
  readonly compliance: LinkProductComplianceType;
  readonly productIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly responsiblePersonId?: Maybe<Scalars["ObjectIdType"]>;
  readonly uinIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly category?: Maybe<FranceProductUniqueIdentificationNumberCategory>;
};

export type UpsertFranceProductUniqueIdentificationNumber = {
  readonly __typename?: "UpsertFranceProductUniqueIdentificationNumber";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertGermanyLinkProductCompliance = {
  readonly __typename?: "UpsertGermanyLinkProductCompliance";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly rateLimit?: Maybe<Scalars["Boolean"]>;
};

export type UpsertGermanyLinkProductComplianceInput = {
  readonly action: LinkProductComplianceAction;
  readonly compliance: LinkProductComplianceType;
  readonly productIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly responsiblePersonId?: Maybe<Scalars["ObjectIdType"]>;
  readonly uinIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly category?: Maybe<GermanyProductUniqueIdentificationNumberCategory>;
};

export type UpsertGermanyProductUniqueIdentificationNumber = {
  readonly __typename?: "UpsertGermanyProductUniqueIdentificationNumber";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertLinkProductCompliance = {
  readonly __typename?: "UpsertLinkProductCompliance";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertMerchantReturnSettingsMutation = {
  readonly __typename?: "UpsertMerchantReturnSettingsMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertMerchantReturnSettingsMutationInput = {
  readonly countryCode: CountryCode;
  readonly policyType: PolicyType;
  readonly authType?: Maybe<AuthType>;
  readonly warehouseId?: Maybe<Scalars["ObjectIdType"]>;
  readonly useWishReturnWarehouse: Scalars["Boolean"];
  readonly returnDays: Scalars["Int"];
  readonly productId?: Maybe<Scalars["String"]>;
  readonly variationId?: Maybe<Scalars["String"]>;
};

export type UpsertMerchantReturnWarehouseMutation = {
  readonly __typename?: "UpsertMerchantReturnWarehouseMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertMerchantSenderAddressInput = {
  readonly merchantSenderAddressId?: Maybe<Scalars["ObjectIdType"]>;
  readonly warehouseName: Scalars["String"];
  readonly address: AddressInput;
  readonly isDefault: Scalars["Boolean"];
};

export type UpsertMerchantSenderAddressMutation = {
  readonly __typename?: "UpsertMerchantSenderAddressMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertMerchantTaxIdentificationInput = {
  readonly address: AddressInput;
  readonly signDate: DatetimeInput;
  readonly paymentReceiverIdentity: MerchantTaxIdentificationPaymentReceiverEntity;
  readonly selfIdentityClassification: MerchantTaxIdentificationSelfIdentityClassification;
  readonly firstName?: Maybe<Scalars["String"]>;
  readonly lastName?: Maybe<Scalars["String"]>;
  readonly businessName?: Maybe<Scalars["String"]>;
  readonly businessType?: Maybe<MerchantTaxIdentificationBusinessType>;
  readonly employeeIdNumber?: Maybe<Scalars["String"]>;
  readonly foreignTaxId?: Maybe<Scalars["String"]>;
  readonly domicileExplanation?: Maybe<Scalars["String"]>;
};

export type UpsertMerchantTaxIdentificationMutation = {
  readonly __typename?: "UpsertMerchantTaxIdentificationMutation";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type UpsertMerchantWarehouseMutation = {
  readonly __typename?: "UpsertMerchantWarehouseMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertMerchantWarning = {
  readonly __typename?: "UpsertMerchantWarning";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertMerchantWarningInput = {
  readonly action: MerchantWarningAction;
  readonly warningId?: Maybe<Scalars["ObjectIdType"]>;
  readonly messageInput?: Maybe<ReplyInfractionInput>;
  readonly disputeInput?: Maybe<DisputeInfractionInput>;
  readonly requestPaymentInput?: Maybe<RequestPaymentInput>;
};

export type UpsertOrderInfractionDispute = {
  readonly __typename?: "UpsertOrderInfractionDispute";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertOrderInfractionDisputeInput = {
  readonly action: OrderInfractionDisputeAction;
  readonly orderId?: Maybe<Scalars["ObjectIdType"]>;
  readonly message?: Maybe<Scalars["String"]>;
  readonly adminMessage?: Maybe<Scalars["String"]>;
  readonly uploadFiles?: Maybe<ReadonlyArray<FileInput>>;
  readonly customerAddressProof?: Maybe<ReadonlyArray<FileInput>>;
  readonly invalidAddressProof?: Maybe<ReadonlyArray<FileInput>>;
  readonly cannedResponseId?: Maybe<Scalars["ObjectIdType"]>;
  readonly reportedFulfillmentDate?: Maybe<DatetimeInput>;
  readonly reportedDeliveredDate?: Maybe<DatetimeInput>;
  readonly reportedDestinationCountryCode?: Maybe<CountryCode>;
  readonly reportedDestinationStateCode?: Maybe<UsStateCode>;
  readonly warehouseCountryCode?: Maybe<CountryCode>;
  readonly shippedFromCountryCode?: Maybe<CountryCode>;
  readonly carrierSiteLink?: Maybe<Scalars["String"]>;
  readonly warningId?: Maybe<Scalars["ObjectIdType"]>;
  readonly warningReason?: Maybe<MerchantWarningReason>;
  readonly disputeSubreason?: Maybe<OrderInfractionDisputeSubreason>;
  readonly newTrackingNumber?: Maybe<Scalars["String"]>;
  readonly reportedShippingProviderId?: Maybe<Scalars["ObjectIdType"]>;
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertProduct = {
  readonly __typename?: "UpsertProduct";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly productId?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertProductCategoryDispute = {
  readonly __typename?: "UpsertProductCategoryDispute";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly nextId?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertProductCategoryDisputeInput = {
  readonly action: ProductCategoryDisputeAction;
  readonly productId?: Maybe<Scalars["ObjectIdType"]>;
  readonly proposedTopCategoryTagId?: Maybe<Scalars["ObjectIdType"]>;
  readonly merchantNote?: Maybe<Scalars["String"]>;
  readonly uploadFiles?: Maybe<ReadonlyArray<FileInput>>;
  readonly source?: Maybe<ProductCategoryDisputeSource>;
  readonly adminUnchangedReason?: Maybe<ProductCategoryDisputeAdminUnchangedReason>;
  readonly reason?: Maybe<ProductCategoryDisputeReason>;
  readonly adminUnchangedOtherReasonDetails?: Maybe<Scalars["String"]>;
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertProducts = {
  readonly __typename?: "UpsertProducts";
  readonly ok: Scalars["Boolean"];
  readonly failures?: Maybe<ReadonlyArray<UpsertProductsErrorItem>>;
  readonly productIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
};

export type UpsertProductsErrorItem = {
  readonly __typename?: "UpsertProductsErrorItem";
  readonly productId?: Maybe<Scalars["ObjectIdType"]>;
  readonly message: Scalars["String"];
};

export type UpsertProductsFromCsvFile = {
  readonly __typename?: "UpsertProductsFromCSVFile";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly jobId?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertProductsFromCsvFileInput = {
  readonly fileUrl: Scalars["String"];
  readonly columnIdList?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly feedType: ProductCsvJobType;
};

export type UpsertRegulator = {
  readonly __typename?: "UpsertRegulator";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertRegulatorInput = {
  readonly action: RegulatorAction;
  readonly countryRegionCode: CountryCode;
  readonly organization: Scalars["String"];
  readonly website: Scalars["String"];
  readonly name: Scalars["String"];
  readonly emailAddress: Scalars["String"];
  readonly phoneNumber?: Maybe<Scalars["String"]>;
  readonly title?: Maybe<Scalars["String"]>;
};

export type UpsertRegulatorReport = {
  readonly __typename?: "UpsertRegulatorReport";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertRegulatorReportInput = {
  readonly action: RegulatorReportAction;
  readonly reason: RegulatorReportReason;
  readonly description: Scalars["String"];
  readonly supportingFiles: ReadonlyArray<FileInput>;
  readonly urls: ReadonlyArray<Scalars["String"]>;
  readonly emailAddress: Scalars["String"];
  readonly caseNumber?: Maybe<Scalars["String"]>;
};

export type UpsertResponsiblePerson = {
  readonly __typename?: "UpsertResponsiblePerson";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertRestrictedProductRequest = {
  readonly __typename?: "UpsertRestrictedProductRequest";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertReturnWarehouseInput = {
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly address: AddressInput;
  readonly name: Scalars["String"];
  readonly isActive: Scalars["Boolean"];
};

export type UpsertShippingProfile = {
  readonly __typename?: "UpsertShippingProfile";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertTaxSettingsInput = {
  readonly settings: ReadonlyArray<TaxSettingsInput>;
  readonly countryOfDomicile: CountryCode;
  readonly euStandardShipFromCc?: Maybe<CountryCode>;
  readonly euWishExpressShipFromCc?: Maybe<CountryCode>;
};

export type UpsertTaxSettingsMutation = {
  readonly __typename?: "UpsertTaxSettingsMutation";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
};

export type UpsertVideo = {
  readonly __typename?: "UpsertVideo";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
  readonly videoId?: Maybe<Scalars["ObjectIdType"]>;
};

export type UpsertWarehouseInput = {
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly enabledCountries?: Maybe<ReadonlyArray<CountryCode>>;
  readonly address?: Maybe<AddressInput>;
  readonly name?: Maybe<Scalars["String"]>;
};

export type UpsertWebhookSubscription = {
  readonly __typename?: "UpsertWebhookSubscription";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UpsertWebhookSubscriptionInput = {
  readonly subscriptionId?: Maybe<Scalars["ObjectIdType"]>;
  readonly topicId?: Maybe<Scalars["ObjectIdType"]>;
  readonly endpoint: Scalars["String"];
};

export type UserBackToOnboardingReason =
  | "DORMANT"
  | "FAKE_NON_CN_NO_REAL_NAME"
  | "REVERT_REVIEW_RESULT"
  | "TRIGGERED_CN_VERIFICATION";

export type UserEntityType = "COMPANY" | "INDIVIDUAL";

export type UserGateSchema = {
  readonly __typename?: "UserGateSchema";
  readonly isAllowed: Scalars["Boolean"];
};

export type UserGateSchemaIsAllowedArgs = {
  name: Scalars["String"];
};

export type UserMutation = {
  readonly __typename?: "UserMutation";
  readonly merchant?: Maybe<MerchantMutation>;
  readonly uiState?: Maybe<UiStateMutations>;
  readonly changeEmail?: Maybe<ChangeEmailMutation>;
  readonly password: PasswordMutations;
  readonly twoFactorAuthentication: TwoFactorMutations;
  readonly onboarding: UserOnboardingMutations;
  readonly changePhoneNumber: ChangePhoneNumberMutation;
  readonly deleteDevice: DeleteDeviceMutation;
  readonly deleteAllDevices: DeleteAllDevicesMutation;
  readonly manualLinkEntity: MerchantEntityManualLinkMutations;
};

export type UserMutationChangeEmailArgs = {
  input: ChangeEmailInput;
};

export type UserMutationDeleteDeviceArgs = {
  input: DeleteDeviceInput;
};

export type UserOnboardingAboutBusinessInfo = {
  readonly onboardingExistingSellingLocations: ExistingSellingLocations;
  readonly onboardingMerchantSellerAge: Scalars["String"];
  readonly onboardingAnnualRevenueRange: Scalars["String"];
  readonly onboardingSkuQuantity: Scalars["Int"];
  readonly onboardingProductCategory: Scalars["String"];
  readonly onboardingWishLocalInterested?: Maybe<Scalars["Boolean"]>;
  readonly existingStoreUrl?: Maybe<Scalars["String"]>;
  readonly onboardingTopPerformingWebsite?: Maybe<Scalars["String"]>;
  readonly onboardingHasErpPartners?: Maybe<Scalars["Boolean"]>;
};

export type UserOnboardingAccountSetup = {
  readonly firstName: Scalars["String"];
  readonly lastName: Scalars["String"];
  readonly email?: Maybe<Scalars["String"]>;
  readonly storeName?: Maybe<Scalars["String"]>;
};

export type UserOnboardingAccountSetupMutation = {
  readonly __typename?: "UserOnboardingAccountSetupMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UserOnboardingBusinessInfo = {
  readonly onboardingBusinessRegistrationName?: Maybe<Scalars["String"]>;
  readonly onboardingBusinessRegistrationNumber?: Maybe<Scalars["Int"]>;
  readonly streetAddress1: Scalars["String"];
  readonly streetAddress2?: Maybe<Scalars["String"]>;
  readonly city: Scalars["String"];
  readonly state?: Maybe<Scalars["String"]>;
  readonly zipcode: Scalars["String"];
  readonly country: CountryCode;
  readonly countryOfDomicile?: Maybe<CountryCode>;
};

export type UserOnboardingContactInfo = {
  readonly firstName: Scalars["String"];
  readonly lastName: Scalars["String"];
  readonly streetAddress1: Scalars["String"];
  readonly streetAddress2?: Maybe<Scalars["String"]>;
  readonly city: Scalars["String"];
  readonly state?: Maybe<Scalars["String"]>;
  readonly zipcode: Scalars["String"];
  readonly country: CountryCode;
  readonly phoneNumber: Scalars["String"];
};

export type UserOnboardingMutations = {
  readonly __typename?: "UserOnboardingMutations";
  readonly setContactInfo?: Maybe<UserOnboardingSetContactInfoMutation>;
  readonly setAboutBusinessInfo?: Maybe<UserOnboardingSetAboutBusinessInfoMutation>;
  readonly setBusinessInfo?: Maybe<UserOnboardingSetBusinessInfoMutation>;
  readonly setAccountInfo?: Maybe<UserOnboardingAccountSetupMutation>;
  readonly verifyPhoneNumber?: Maybe<UserOnboardingVerifyPhoneNumberMutation>;
};

export type UserOnboardingMutationsSetContactInfoArgs = {
  input: UserOnboardingContactInfo;
};

export type UserOnboardingMutationsSetAboutBusinessInfoArgs = {
  input: UserOnboardingAboutBusinessInfo;
};

export type UserOnboardingMutationsSetBusinessInfoArgs = {
  input: UserOnboardingBusinessInfo;
};

export type UserOnboardingMutationsSetAccountInfoArgs = {
  input: UserOnboardingAccountSetup;
};

export type UserOnboardingMutationsVerifyPhoneNumberArgs = {
  input: UserOnboardingVerifyPhoneNumber;
};

export type UserOnboardingSetAboutBusinessInfoMutation = {
  readonly __typename?: "UserOnboardingSetAboutBusinessInfoMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UserOnboardingSetBusinessInfoMutation = {
  readonly __typename?: "UserOnboardingSetBusinessInfoMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UserOnboardingSetContactInfoMutation = {
  readonly __typename?: "UserOnboardingSetContactInfoMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UserOnboardingVerifyPhoneNumber = {
  readonly phoneNumber: Scalars["String"];
  readonly byPhoneCall?: Maybe<Scalars["Boolean"]>;
  readonly verificationCode?: Maybe<Scalars["String"]>;
};

export type UserOnboardingVerifyPhoneNumberMutation = {
  readonly __typename?: "UserOnboardingVerifyPhoneNumberMutation";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type UserSchema = {
  readonly __typename?: "UserSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name?: Maybe<Scalars["String"]>;
  readonly lastName?: Maybe<Scalars["String"]>;
  readonly firstName?: Maybe<Scalars["String"]>;
  readonly email: Scalars["String"];
  readonly confirmEmailPath?: Maybe<Scalars["String"]>;
  readonly merchantId?: Maybe<Scalars["ObjectIdType"]>;
  readonly phoneNumber?: Maybe<Scalars["String"]>;
  readonly canEditPhoneNumber: Scalars["Boolean"];
  readonly canHandleEscalatedMerchantGamingReview: Scalars["Boolean"];
  readonly twoFactorEnabled: Scalars["Boolean"];
  readonly businessAddress?: Maybe<AddressSchema>;
  readonly isStoreOrMerchantUser: Scalars["Boolean"];
  readonly onboarding?: Maybe<OnboardingSchema>;
  readonly uiState?: Maybe<UiStateSchema>;
  readonly alerts?: Maybe<ReadonlyArray<AlertSchema>>;
  readonly isNewNav?: Maybe<Scalars["Boolean"]>;
  readonly username: Scalars["String"];
  readonly accountManager?: Maybe<UserSchema>;
  readonly numCurrentDevices?: Maybe<Scalars["Int"]>;
  readonly currentDevices: ReadonlyArray<DeviceSchema>;
  readonly canAcceptMerchantTos: Scalars["Boolean"];
  readonly gating: UserGateSchema;
  readonly todo: TodoSchema;
  readonly tfaTokenSentTime?: Maybe<Datetime>;
  readonly entityType?: Maybe<UserEntityType>;
  readonly isAdmin: Scalars["Boolean"];
  readonly isOnCsTeam: Scalars["Boolean"];
  readonly hasPermission: Scalars["Boolean"];
  readonly hasTfaBackupCodes: Scalars["Boolean"];
  readonly companyName?: Maybe<Scalars["String"]>;
  readonly displayName?: Maybe<Scalars["String"]>;
  readonly permissions?: Maybe<ReadonlyArray<PermissionSchema>>;
  readonly roles?: Maybe<ReadonlyArray<RoleSchema>>;
  readonly bdMerchantCountry?: Maybe<BdMerchantCountryCodeType>;
  readonly manager?: Maybe<UserSchema>;
  readonly isEnabled: Scalars["Boolean"];
  readonly isSalesRep: Scalars["Boolean"];
  readonly hasSeenFbwTos: Scalars["Boolean"];
  readonly serviceTypes?: Maybe<ReadonlyArray<UserServiceType>>;
  readonly possibleManagers?: Maybe<ReadonlyArray<UserSchema>>;
  readonly queues?: Maybe<ReadonlyArray<LogicalQueueSchema>>;
  readonly backToOnboardingReason?: Maybe<UserBackToOnboardingReason>;
  readonly utmSource?: Maybe<Scalars["String"]>;
  readonly qqGroupNumber?: Maybe<Scalars["String"]>;
  readonly onboardingUrl?: Maybe<Scalars["String"]>;
  readonly factoryManager?: Maybe<UserSchema>;
  readonly manualMerchantConnections?: Maybe<
    ReadonlyArray<MerchantConnectionSchema>
  >;
  readonly canAccessHome: Scalars["Boolean"];
  readonly isApiUser: Scalars["Boolean"];
  readonly supportConfig?: Maybe<MerchantSupportConfigSchema>;
};

export type UserSchemaCurrentDevicesArgs = {
  limit?: Maybe<Scalars["Int"]>;
  skip?: Maybe<Scalars["Int"]>;
};

export type UserSchemaHasPermissionArgs = {
  permissions: ReadonlyArray<PermissionType>;
};

export type UserSchemaPermissionsArgs = {
  status: PermissionStatusType;
};

export type UserSchemaQueuesArgs = {
  assigned?: Maybe<Scalars["Boolean"]>;
};

export type UserSchemaOnboardingUrlArgs = {
  currentUrlPath: Scalars["String"];
};

export type UserServiceType = "TICKET" | "EMAIL" | "TAGGING";

export type UsersSortFieldType = "USERNAME" | "ID" | "EMAIL";

export type UserUiState =
  | "STORE_TIME_SEEN_SELL_ON_WISH_BANNER"
  | "DISMISSED_VIDEO_OPTIMIZE_TIPS"
  | "PREFERS_OLD_NAV"
  | "DISMISSED_FULFILLMENT_SLA_INSIGHT"
  | "DISMISSED_FULFILLMENT_PENALTY_INSIGHT"
  | "DISMISSED_HOW_TO_FULFILL_INSIGHT"
  | "HAS_COMPLETED_CS_SURVEY"
  | "HAS_SEEN_MFP_PRICE_ONLY_CAROUSEL"
  | "HAS_SEEN_KYC_VERIFICATION_SUCCESS_MESSAGE"
  | "DISMISSED_KYC_VERIFICATION_INTRO_BANNER"
  | "DISMISSED_WISH_EXPRESS_INTRO_BANNER"
  | "PREFERS_NEW_NAV"
  | "FULFILLMENT_MOST_RECENT_ORIGIN_COUNTRIES"
  | "DISMISSED_SWITCH_NAV_BACK_TUTORIAL"
  | "DISMISSED_SELLER_VERIFICATION_INTRO_BANNER"
  | "HAS_SEEN_SELLER_VERIFICATION_SUCCESS_MESSAGE"
  | "HAS_SEEN_PB_PRODUCTS_TABLE_V2"
  | "FULFILLMENT_MOST_RECENT_SHIPPING_PROVIDERS";

export type UsStateCode =
  | "WA"
  | "DE"
  | "DC"
  | "WI"
  | "WV"
  | "HI"
  | "AE"
  | "FL"
  | "WY"
  | "NH"
  | "NJ"
  | "NM"
  | "TX"
  | "LA"
  | "AK"
  | "NC"
  | "ND"
  | "NE"
  | "TN"
  | "NY"
  | "PA"
  | "RI"
  | "NV"
  | "AA"
  | "VA"
  | "GU"
  | "CO"
  | "CA"
  | "AL"
  | "AP"
  | "AS"
  | "AR"
  | "VT"
  | "IL"
  | "GA"
  | "IN"
  | "IA"
  | "MA"
  | "AZ"
  | "ID"
  | "CT"
  | "ME"
  | "MD"
  | "OK"
  | "OH"
  | "UT"
  | "MO"
  | "MN"
  | "MI"
  | "KS"
  | "MT"
  | "MP"
  | "MS"
  | "SC"
  | "KY"
  | "OR"
  | "SD";

export type UsTaxConstants = {
  readonly __typename?: "USTaxConstants";
  readonly marketplaceStates: ReadonlyArray<Scalars["String"]>;
  readonly marketplaceMunicipalities: ReadonlyArray<UsTaxMarketplaceMunicipalities>;
  readonly nomadStates: ReadonlyArray<Scalars["String"]>;
  readonly homeRuleStates: ReadonlyArray<Scalars["String"]>;
};

export type UsTaxMarketplaceMunicipalities = {
  readonly __typename?: "USTaxMarketplaceMunicipalities";
  readonly stateCode: Scalars["String"];
  readonly cities: ReadonlyArray<Scalars["String"]>;
  readonly counties: ReadonlyArray<Scalars["String"]>;
  readonly districts: ReadonlyArray<Scalars["String"]>;
};

export type VacationSettings = {
  readonly __typename?: "VacationSettings";
  readonly changeVacationSettings: ChangeVacationSettingsMutation;
  readonly clearVacationSettings: ClearVacationSettingsMutation;
};

export type VacationSettingsChangeVacationSettingsArgs = {
  input: ChangeVacationSettingsInput;
};

export type VacationSettingsSchema = {
  readonly __typename?: "VacationSettingsSchema";
  readonly startDate: Datetime;
  readonly endDate: Datetime;
  readonly extensionDays: Scalars["Int"];
  readonly primaryWarehouseOnly: Scalars["Boolean"];
};

export type ValidationResultSchema = {
  readonly __typename?: "ValidationResultSchema";
  readonly payableId: Scalars["String"];
  readonly isEvent: Scalars["Boolean"];
  readonly reason: ReadonlyArray<Reason>;
};

export type VariationDimensions = {
  readonly __typename?: "VariationDimensions";
  readonly length: Length;
  readonly width: Length;
  readonly height: Length;
};

export type VariationDiscountDataInput = {
  readonly productId: Scalars["ObjectIdType"];
  readonly variationId: Scalars["ObjectIdType"];
  readonly discountPercentage: Scalars["Float"];
  readonly maxQuantity?: Maybe<Scalars["Int"]>;
};

export type VariationInput = {
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly enabled?: Maybe<Scalars["Boolean"]>;
  readonly sku?: Maybe<Scalars["String"]>;
  readonly inventory?: Maybe<ReadonlyArray<InventoryInput>>;
  readonly price?: Maybe<CurrencyInput>;
  readonly cost?: Maybe<CurrencyInput>;
  readonly size?: Maybe<Scalars["String"]>;
  readonly color?: Maybe<Scalars["String"]>;
  readonly gtin?: Maybe<Scalars["String"]>;
  readonly originCountry?: Maybe<CountryCode>;
  readonly declaredValue?: Maybe<CurrencyInput>;
  readonly declaredName?: Maybe<Scalars["String"]>;
  readonly declaredLocalName?: Maybe<Scalars["String"]>;
  readonly pieces?: Maybe<Scalars["Int"]>;
  readonly image?: Maybe<ImageInput>;
  readonly weight?: Maybe<WeightInput>;
  readonly height?: Maybe<LengthInput>;
  readonly length?: Maybe<LengthInput>;
  readonly width?: Maybe<LengthInput>;
  readonly hasPowder?: Maybe<Scalars["Boolean"]>;
  readonly hasLiquid?: Maybe<Scalars["Boolean"]>;
  readonly hasBattery?: Maybe<Scalars["Boolean"]>;
  readonly hasMetal?: Maybe<Scalars["Boolean"]>;
  readonly customsHsCode?: Maybe<Scalars["String"]>;
  readonly quantityWeight?: Maybe<WeightInput>;
  readonly quantityLength?: Maybe<LengthInput>;
  readonly quantityVolume?: Maybe<VolumeInput>;
  readonly quantityArea?: Maybe<AreaInput>;
  readonly quantityUnit?: Maybe<CountInput>;
  readonly attributes?: Maybe<ReadonlyArray<AttributeInput>>;
  readonly options?: Maybe<ReadonlyArray<AttributeInput>>;
};

export type VariationSchema = {
  readonly __typename?: "VariationSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly sku: Scalars["String"];
  readonly size?: Maybe<Scalars["String"]>;
  readonly color?: Maybe<Scalars["String"]>;
  readonly productId: Scalars["String"];
  readonly weight?: Maybe<Weight>;
  readonly effectiveWeight?: Maybe<Weight>;
  readonly height?: Maybe<Length>;
  readonly length?: Maybe<Length>;
  readonly width?: Maybe<Length>;
  readonly customsHsCode?: Maybe<Scalars["String"]>;
  readonly gtin?: Maybe<Scalars["String"]>;
  readonly originCountry?: Maybe<Country>;
  readonly declaredValue?: Maybe<CurrencyValue>;
  readonly declaredName?: Maybe<Scalars["String"]>;
  readonly declaredLocalName?: Maybe<Scalars["String"]>;
  readonly pieces?: Maybe<Scalars["Int"]>;
  readonly hasPowder?: Maybe<Scalars["Boolean"]>;
  readonly hasLiquid?: Maybe<Scalars["Boolean"]>;
  readonly hasBattery?: Maybe<Scalars["Boolean"]>;
  readonly hasMetal?: Maybe<Scalars["Boolean"]>;
  readonly inventory: ReadonlyArray<InventorySchema>;
  readonly fbwInventory: ReadonlyArray<FbwInventorySchema>;
  readonly price: CurrencyValue;
  readonly msrp?: Maybe<CurrencyValue>;
  readonly image?: Maybe<ImageSchema>;
  readonly enabled?: Maybe<Scalars["Boolean"]>;
  readonly totalInventory?: Maybe<Scalars["Int"]>;
  readonly productName: Scalars["String"];
  readonly logisticsMetadata: LogisticsMetadataSchema;
  readonly quantityWeight?: Maybe<Weight>;
  readonly quantityLength?: Maybe<Length>;
  readonly quantityVolume?: Maybe<Volume>;
  readonly quantityArea?: Maybe<Area>;
  readonly quantityUnit?: Maybe<Count>;
  readonly attributes?: Maybe<ReadonlyArray<MerchantProvidedAttributeSchema>>;
  readonly options?: Maybe<ReadonlyArray<MerchantProvidedAttributeSchema>>;
};

export type VariationSchemaTotalInventoryArgs = {
  shippingType?: Maybe<WarehouseShippingType>;
};

export type VariationSearchType = "PRODUCT_ID" | "PRODUCT_NAME" | "SKU";

export type VariationSort = {
  readonly field: VariationSortField;
  readonly order: SortOrderType;
};

export type VariationSortField = "ID" | "INVENTORY" | "SKU";

export type VerificationFlowTypes =
  | "CN_FLOW"
  | "DEFAULT_FLOW"
  | "EEA_KYC"
  | "SIGNUP_V3";

export type VideoCaptionSpec = {
  readonly text: Scalars["String"];
  readonly location: ScreenCoordinates;
};

export type VideoCategory =
  | "ALL"
  | "FASHION"
  | "MAKEUP_AND_BEAUTY"
  | "GADGETS"
  | "HOME_DECOR"
  | "KITCHEN"
  | "HOBBIES"
  | "TOYS"
  | "OUTDOOR";

export type VideoLeaderboard = {
  readonly __typename?: "VideoLeaderboard";
  readonly lastUpdated: Datetime;
  readonly videos: ReadonlyArray<ProductVideo>;
};

export type VideoMotion =
  | "UNKNOWN_ANIMATION"
  | "SLOW_EXPAND"
  | "PAN_LEFT"
  | "PAN_RIGHT";

export type VideoMutations = {
  readonly __typename?: "VideoMutations";
  readonly generateVideo?: Maybe<GenerateVideoMutation>;
  readonly posts?: Maybe<ProductPostsMutations>;
};

export type VideoMutationsGenerateVideoArgs = {
  input: GenerateVideoInput;
};

export type VideoPerformance = {
  readonly __typename?: "VideoPerformance";
  readonly totalViewsPercentChange: Scalars["Float"];
  readonly totalLikesPercentChange: Scalars["Float"];
  readonly totalWatchTimePercentChange: Scalars["Float"];
  readonly totalGmvPercentChange: Scalars["Float"];
  readonly avgWatchTimePercentChange: Scalars["Float"];
  readonly engagedViewsPercentChange: Scalars["Float"];
  readonly buyerIntentPercentChange: Scalars["Float"];
  readonly addToCartPercentChange: Scalars["Float"];
  readonly conversionsPercentChange: Scalars["Float"];
  readonly dailyStats: ReadonlyArray<ProductVideoDailyStats>;
};

export type VideoQualityLevel = "UNKNOWN_LEVEL" | "AVERAGE" | "GOOD" | "BAD";

export type VideoSearchType = "ID" | "NAME" | "PRODUCT_ID";

export type VideoSlideSpec = {
  readonly inputUrl: Scalars["String"];
  readonly isVideo: Scalars["Boolean"];
  readonly caption: VideoCaptionSpec;
  readonly duration: Scalars["Int"];
  readonly imageMotion?: Maybe<VideoMotion>;
};

export type VideoSort = {
  readonly field: VideoSortField;
  readonly order: SortOrderType;
};

export type VideoSortField = "ID";

export type VideoUpsertInput = {
  readonly id?: Maybe<Scalars["ObjectIdType"]>;
  readonly videoUrl?: Maybe<Scalars["String"]>;
  readonly visibility?: Maybe<VideoVisibility>;
  readonly productIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  readonly title?: Maybe<Scalars["String"]>;
  readonly description?: Maybe<Scalars["String"]>;
  readonly audioStartTime?: Maybe<Scalars["Float"]>;
  readonly audioEndTime?: Maybe<Scalars["Float"]>;
  readonly audioUrl?: Maybe<Scalars["String"]>;
};

export type VideoVisibility = "LIVE" | "UNLISTED";

export type ViewTermsOfService = {
  readonly __typename?: "ViewTermsOfService";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ViewTermsOfServiceById = {
  readonly __typename?: "ViewTermsOfServiceById";
  readonly ok: Scalars["Boolean"];
  readonly message?: Maybe<Scalars["String"]>;
};

export type ViewTermsOfServiceByIdInput = {
  readonly tosId: Scalars["ObjectIdType"];
};

export type Volume = {
  readonly __typename?: "Volume";
  readonly value: Scalars["Float"];
  readonly unit: VolumeUnit;
};

export type VolumeValueArgs = {
  targetUnit?: Maybe<VolumeUnit>;
};

export type VolumeInput = {
  readonly value: Scalars["Float"];
  readonly unit: VolumeUnit;
};

export type VolumeUnit =
  | "LITER"
  | "CENTILITER"
  | "CUBICMETER"
  | "FLUID_OUNCE"
  | "GALLON"
  | "MILLILITER"
  | "PINT"
  | "QUART";

export type WarehouseCountryShippingInput = {
  readonly shippingType: WarehouseShippingType;
  readonly countryShipping?: Maybe<ReadonlyArray<CountryShippingInput>>;
};

export type WarehouseCountryShippingSchema = {
  readonly __typename?: "WarehouseCountryShippingSchema";
  readonly shippingType: WarehouseShippingType;
  readonly countryShipping?: Maybe<ReadonlyArray<CountryShippingSchema>>;
};

export type WarehouseShippingType =
  | "MERCHANT_TTD_13_DAY"
  | "REGULAR"
  | "MERCHANT_TTD_40_DAY"
  | "MERCHANT_TTD_38_DAY"
  | "MERCHANT_TTD_3_DAY"
  | "MERCHANT_TTD_17_DAY"
  | "MERCHANT_TTD_20_DAY"
  | "MERCHANT_TTD_7_DAY"
  | "MERCHANT_TTD_35_DAY"
  | "MERCHANT_TTD_44_DAY"
  | "MERCHANT_TTD_23_DAY"
  | "WISH_EXPRESS_2_DAY"
  | "MERCHANT_TTD_27_DAY"
  | "FBW_V1_WLC"
  | "WISH_EXPRESS"
  | "MERCHANT_TTD_19_DAY"
  | "MERCHANT_TTD_9_DAY"
  | "WISH_BLUE"
  | "MERCHANT_TTD_15_DAY"
  | "MERCHANT_TTD_25_DAY"
  | "MERCHANT_TTD_31_DAY"
  | "FBW_V2_REGULAR"
  | "MERCHANT_TTD_11_DAY"
  | "MERCHANT_TTD_16_DAY"
  | "MERCHANT_TTD_33_DAY"
  | "MERCHANT_TTD_21_DAY"
  | "MERCHANT_TTD_12_DAY"
  | "MERCHANT_TTD_42_DAY"
  | "MERCHANT_TTD_4_DAY"
  | "MERCHANT_TTD_41_DAY"
  | "FBW_V2"
  | "MERCHANT_TTD_45_DAY"
  | "MERCHANT_TTD_37_DAY"
  | "FBW_V1"
  | "MERCHANT_TTD_39_DAY"
  | "MERCHANT_TTD_2_DAY"
  | "MERCHANT_TTD_22_DAY"
  | "MERCHANT_TTD_18_DAY"
  | "MERCHANT_TTD_34_DAY"
  | "WISH_EXPRESS_7_DAY"
  | "FBW_V2_CALCULATED"
  | "MERCHANT_TTD_30_DAY"
  | "MERCHANT_TTD_10_DAY"
  | "FBW_V2_EXPRESS"
  | "MERCHANT_TTD_43_DAY"
  | "MERCHANT_TTD_32_DAY"
  | "MERCHANT_TTD_26_DAY"
  | "MERCHANT_TTD_14_DAY"
  | "WAIT_AND_SAVE"
  | "MERCHANT_TTD_6_DAY"
  | "MERCHANT_TTD_8_DAY"
  | "MERCHANT_TTD_24_DAY"
  | "MERCHANT_TTD_36_DAY"
  | "MERCHANT_TTD_28_DAY"
  | "MERCHANT_TTD_5_DAY"
  | "MERCHANT_TTD_29_DAY"
  | "MERCHANT_TTD_1_DAY";

export type WarehouseVerificationRequestSchema = {
  readonly __typename?: "WarehouseVerificationRequestSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly documentUrls: ReadonlyArray<Scalars["String"]>;
  readonly submitTime: Datetime;
  readonly reviewTime?: Maybe<Datetime>;
  readonly reviewerComment?: Maybe<Scalars["String"]>;
};

export type WarehouseVerificationState =
  | "VERIFIED"
  | "REJECTED"
  | "PENDING_VERIFICATION"
  | "INELIGIBLE"
  | "UNSET"
  | "UNVERIFIED";

export type WebhookApiVersion = "V3";

export type WebhookMutations = {
  readonly __typename?: "WebhookMutations";
  readonly upsertSubscription?: Maybe<UpsertWebhookSubscription>;
  readonly deleteSubscription?: Maybe<DeleteWebhookSubscription>;
  readonly sendTestMessage?: Maybe<SendTestMessage>;
};

export type WebhookMutationsUpsertSubscriptionArgs = {
  input: UpsertWebhookSubscriptionInput;
};

export type WebhookMutationsDeleteSubscriptionArgs = {
  input: DeleteWebhookSubscriptionInput;
};

export type WebhookMutationsSendTestMessageArgs = {
  input: SendTestMessageInput;
};

export type WebhookSchema = {
  readonly __typename?: "WebhookSchema";
  readonly topics: ReadonlyArray<WebhookTopicSchema>;
  readonly subscriptions?: Maybe<ReadonlyArray<WebhookSubscriptionSchema>>;
  readonly allowWebhookUi: Scalars["Boolean"];
};

export type WebhookSchemaTopicsArgs = {
  apiVersion?: Maybe<WebhookApiVersion>;
};

export type WebhookSubscriptionInput = {
  readonly id: Scalars["ObjectIdType"];
  readonly topic: WebhookTopicInput;
  readonly endpoint: Scalars["String"];
  readonly endpointType: SubscriptionEndpointType;
};

export type WebhookSubscriptionSchema = {
  readonly __typename?: "WebhookSubscriptionSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly topic: WebhookTopicSchema;
  readonly endpoint: Scalars["String"];
  readonly deactivated: Scalars["Boolean"];
  readonly deactivateReasonBrief?: Maybe<Scalars["String"]>;
  readonly deactivateReasonDetail?: Maybe<Scalars["String"]>;
};

export type WebhookTopicInput = {
  readonly id: Scalars["ObjectIdType"];
  readonly name: WebhookTopicName;
  readonly apiVersion: WebhookApiVersion;
};

export type WebhookTopicName =
  | "ORDER_ALL"
  | "ORDER_RELEASE"
  | "ORDER_FULFILLMENT_DEADLINE"
  | "ORDER_ADDRESS_CHANGE"
  | "ORDER_PENALTY"
  | "ORDER_TRACKING_UPDATE"
  | "ORDER_REFUND"
  | "ORDER_TAX"
  | "POLICY_PENALTY_ISSUE"
  | "POLICY_PENALTY_REVERSE"
  | "POLICY_PENALTY_CANCEL"
  | "TICKET_AWAITING_MERCHANT"
  | "PRODUCT_BOOST_CAMPAIGN_STATS_UPDATE"
  | "PRODUCT_BOOST_CAMPAIGN_CREATION"
  | "PRODUCT_BOOST_CAMPAIGN_ATTRIBUTE_UPDATE"
  | "PRODUCT_BOOST_CAMPAIGN_PRODUCT_STATS_UPDATE"
  | "PRODUCT_BOOST_CAMPAIGN_PRODUCT_LOW_PERFORMANCE"
  | "PRODUCT_BOOST_TRENDING_CATEGORIES"
  | "PRODUCT_BOOST_ACCOUNT_BALANCE_UPDATE"
  | "PRODUCT_UPDATE_MERCHANT"
  | "PRODUCT_IMAGE_JOB_STATUS_UPDATE"
  | "PRODUCT_TAGGING_UPDATE"
  | "PRODUCT_INVENTORY_CHANGE_WISH_USER"
  | "PRODUCT_INVENTORY_CHANGE_MERCHANT";

export type WebhookTopicSchema = {
  readonly __typename?: "WebhookTopicSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: WebhookTopicName;
  readonly apiVersion: WebhookApiVersion;
};

export type WechatCheckScanInput = {
  readonly qrTicket: Scalars["String"];
};

export type WechatCheckScanMutation = {
  readonly __typename?: "WechatCheckScanMutation";
  readonly expireIn?: Maybe<Scalars["Int"]>;
  readonly scanned?: Maybe<Scalars["Boolean"]>;
  readonly ok: Scalars["Boolean"];
  readonly error?: Maybe<Scalars["String"]>;
};

export type Weight = {
  readonly __typename?: "Weight";
  readonly value: Scalars["Float"];
  readonly unit: WeightUnit;
};

export type WeightValueArgs = {
  targetUnit?: Maybe<WeightUnit>;
};

export type WeightInput = {
  readonly value: Scalars["Float"];
  readonly unit: WeightUnit;
};

export type WeightUnit = "GRAM" | "KILOGRAM" | "MILLIGRAM" | "OUNCE" | "POUND";

export type WfpMutations = {
  readonly __typename?: "WFPMutations";
  readonly cancelWfpWithhold?: Maybe<CancelWfpWithholdMutation>;
};

export type WfpMutationsCancelWfpWithholdArgs = {
  input: CancelWfpWithholdMutationInput;
};

export type WfpOrderDeliveryState =
  | "LATE"
  | "SIGNIFICANTLY_LATE"
  | "UNKNOWN"
  | "ON_TIME"
  | "NOT_DELIVERED";

export type WfpWithholdReasonSchema = {
  readonly __typename?: "WFPWithholdReasonSchema";
  readonly reason: Scalars["String"];
  readonly lateDeliveryDetail?: Maybe<LateDeliverySchema>;
};

export type WhitelistProductInfo = {
  readonly __typename?: "WhitelistProductInfo";
  readonly product: ProductSchema;
  readonly variations: ReadonlyArray<VariationSchema>;
  readonly startTime: Datetime;
  readonly endTime: Datetime;
};

export type WhitelistProductSort = {
  readonly field: MfpWhitelistProductSortBy;
  readonly order: SortOrderType;
};

export type WishCompanyInfo = {
  readonly __typename?: "WishCompanyInfo";
  readonly hqAddress: AddressSchema;
  readonly companyOperatorName: Scalars["String"];
};

export type WishEuvatPayerInfo = {
  readonly __typename?: "WishEUVATPayerInfo";
  readonly address: AddressSchema;
  readonly iossNumber: Scalars["String"];
};

export type WishExpressCountryDetails = {
  readonly __typename?: "WishExpressCountryDetails";
  readonly supportsWishExpress: Scalars["Boolean"];
  readonly expectedTimeToDoor?: Maybe<Scalars["Int"]>;
};

export type WishExpressInfoSchema = {
  readonly __typename?: "WishExpressInfoSchema";
  readonly fulfillmentDeadline: Timedelta;
};

export type WishPostShippingSchema = {
  readonly __typename?: "WishPostShippingSchema";
  readonly country: Country;
  readonly maxPrice?: Maybe<CurrencyValue>;
  readonly minPrice?: Maybe<CurrencyValue>;
};

export type WishPostShippingUpdatesSchema = {
  readonly __typename?: "WishPostShippingUpdatesSchema";
  readonly orderId: Scalars["ObjectIdType"];
  readonly amount: CurrencyValue;
  readonly date: Datetime;
  readonly paymentDate?: Maybe<Datetime>;
  readonly reason: Scalars["String"];
};

export type WishSellerStandardStats = {
  readonly __typename?: "WishSellerStandardStats";
  readonly maturedOrderCount: Scalars["Int"];
  readonly userRating?: Maybe<Scalars["Float"]>;
  readonly orderFultillmentRate?: Maybe<Scalars["Float"]>;
  readonly validTrackingRate?: Maybe<Scalars["Float"]>;
  readonly productQualityRefundRate?: Maybe<Scalars["Float"]>;
  readonly productLogisticsRefundRate?: Maybe<Scalars["Float"]>;
  readonly fulfillmentSpeed?: Maybe<Timedelta>;
  readonly orderCancellationCount: Scalars["Int"];
  readonly ninetyDayOrderCount: Scalars["Int"];
  readonly unfulfilledOrderCount: Scalars["Int"];
  readonly lateConfirmedFulfillmentCount: Scalars["Int"];
  readonly misleadingTrackingCount: Scalars["Int"];
  readonly prohibitedProductCount: Scalars["Int"];
  readonly misleadingListingCount: Scalars["Int"];
  readonly ipViolationProductCount: Scalars["Int"];
  readonly repeatIpInfractionCount: Scalars["Int"];
  readonly materialListingChangeCount: Scalars["Int"];
  readonly date: Datetime;
};

export type WishUserSchema = {
  readonly __typename?: "WishUserSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name?: Maybe<Scalars["String"]>;
  readonly email?: Maybe<Scalars["String"]>;
  readonly signupMethod?: Maybe<WishUserSignupMethod>;
  readonly isVerified?: Maybe<Scalars["Boolean"]>;
  readonly emailBouncedReason?: Maybe<Scalars["String"]>;
};

export type WishUserSignupMethod =
  | "PHONE_NUMBER"
  | "GOOGLE_PLUS"
  | "FACEBOOK"
  | "APPLE"
  | "EMAIL";

export type WpsAdditionalTrackingService = {
  readonly __typename?: "WPSAdditionalTrackingService";
  readonly type: WpsAvailableServices;
  readonly name: Scalars["String"];
  readonly fee?: Maybe<CurrencyValue>;
};

export type WpsAvailableServices =
  | "SATURDAY_DELIVERY"
  | "ADDITIONAL_HANDLING"
  | "BASE_SERVICE"
  | "SIGNATURE_REQUIRED";

export type WpsFee = {
  readonly __typename?: "WPSFee";
  readonly totalFee: CurrencyValue;
  readonly itemizedCharges: ReadonlyArray<WpsItemizedCharge>;
};

export type WpsFeeAdjustment = {
  readonly __typename?: "WPSFeeAdjustment";
  readonly creationDate: Datetime;
  readonly amount: CurrencyValue;
  readonly paymentId?: Maybe<Scalars["ObjectIdType"]>;
  readonly paymentProcessedDate?: Maybe<Datetime>;
  readonly reason?: Maybe<Scalars["String"]>;
};

export type WpsFulfillmentInfoSchema = {
  readonly __typename?: "WPSFulfillmentInfoSchema";
  readonly shippingOptionId?: Maybe<Scalars["ObjectIdType"]>;
  readonly shippingLabelDownloadLink?: Maybe<Scalars["String"]>;
  readonly shipmentFee: WpsFee;
  readonly shipmentState: WpsShipmentState;
  readonly purchaseDate?: Maybe<Datetime>;
  readonly paymentId?: Maybe<Scalars["ObjectIdType"]>;
  readonly paymentProcessedDate?: Maybe<Datetime>;
  readonly feeAdjustments?: Maybe<ReadonlyArray<WpsFeeAdjustment>>;
};

export type WpsGetShippingOptionsSchema = {
  readonly __typename?: "WPSGetShippingOptionsSchema";
  readonly ok: Scalars["Boolean"];
  readonly errorMessage?: Maybe<Scalars["String"]>;
  readonly shippingOptions?: Maybe<ReadonlyArray<WpsShippingOptionSchema>>;
};

export type WpsItemizedCharge = {
  readonly __typename?: "WPSItemizedCharge";
  readonly type: WpsAvailableServices;
  readonly name: Scalars["String"];
  readonly fee: CurrencyValue;
};

export type WpsPackageType = "BOX" | "ENVELOPE";

export type WpsShipmentState =
  | "ORDER_STATE_UPLOADED"
  | "ADJUSTED"
  | "COMPLETE"
  | "CREATED"
  | "REFUNDED"
  | "PAID"
  | "CANCELLATION_PENDING"
  | "FAILED"
  | "ADJUSTMENT_PENDING"
  | "CANCELLED"
  | "PAYMENT_PENDING"
  | "REFUND_PENDING"
  | "EXPIRED";

export type WpsShippingOptionSchema = {
  readonly __typename?: "WPSShippingOptionSchema";
  readonly id: Scalars["ObjectIdType"];
  readonly name: Scalars["String"];
  readonly price: CurrencyValue;
  readonly provider: WpsShippingProviderSchema;
  readonly daysToDeliver: Scalars["Int"];
  readonly maxDaysToDeliver: Scalars["Int"];
  readonly minDaysToDeliver: Scalars["Int"];
  readonly includesTracking: Scalars["Boolean"];
  readonly isRegistered: Scalars["Boolean"];
  readonly availableAdditionalServiceOptions: ReadonlyArray<WpsAdditionalTrackingService>;
};

export type WpsShippingProviderSchema = {
  readonly __typename?: "WPSShippingProviderSchema";
  readonly id: Scalars["String"];
  readonly name: Scalars["String"];
  readonly wpsId: Scalars["ObjectIdType"];
};

export type WpsTermsTypeEnum = "UPS" | "WPS";

export type WssDeepDivePageType =
  | "FULFILLMENT_SPEED"
  | "FULFILLMENT_RATE"
  | "VALID_TRACKING_RATE"
  | "LOGISTICS_REFUND";

export type WssImpactState = "YES" | "EVALUATING" | "NO";

export type WssLogisticsRefundReason =
  | "SHIPPING_TAKING_TOO_LONG"
  | "ITEM_NEVER_ARRIVED"
  | "MERCHANT_SENT_TO_WRONG_ADDRESS"
  | "ITEM_RETURNED_TO_SENDER"
  | "ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE"
  | "NOT_QUALIFIED_SHIPPING_PROVIDER"
  | "FBW_FAILED_TO_FULFILL_DUE_TO_CARRIER_RETURN"
  | "EPC_OVERWEIGHT"
  | "EPC_OVERSIZE"
  | "EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP"
  | "EPC_OVERVALUE"
  | "ITEM_HELD_AT_CUSTOMS"
  | "USER_ENTERED_INVALID_ADDRESS";

export type WssMerchantLevelType =
  | "PLATINUM"
  | "GOLD"
  | "BAN"
  | "UNASSESSED"
  | "SILVER"
  | "BRONZE";

export type WssMetricTrend =
  | "UNSPECIFIED"
  | "INCREASING"
  | "DECREASING"
  | "SAME";

export type WssMetricType =
  | "ORDER_FULFILLMENT_RATE"
  | "ORDER_FULFILLMENT_SPEED"
  | "VALID_TRACKING_RATE"
  | "AVERAGE_USER_RATING"
  | "PRODUCT_QUALITY_REFUND"
  | "LOGISTICS_REFUND"
  | "PROHIBITED_PRODUCT"
  | "MISLEADING_LISTING"
  | "MISLEADING_TRACKING"
  | "ORDER_CANCELLATION"
  | "UNFULFILLED_ORDER"
  | "LATE_CONFIRMED_FULFILLMENT";

export type WssOrderFulfillment = {
  readonly __typename?: "WSSOrderFulfillment";
  readonly orderId?: Maybe<Scalars["ObjectIdType"]>;
  readonly transactionDate?: Maybe<Datetime>;
  readonly destination?: Maybe<Scalars["String"]>;
  readonly productId?: Maybe<Scalars["ObjectIdType"]>;
  readonly carrier?: Maybe<Scalars["String"]>;
  readonly fulfillmentSpeed?: Maybe<Timedelta>;
  readonly unfulfilledReason?: Maybe<WsssUnfulfilledReasons>;
  readonly trackingId?: Maybe<Scalars["ObjectIdType"]>;
  readonly productName?: Maybe<Scalars["String"]>;
  readonly productImageUrl?: Maybe<Scalars["String"]>;
};

export type WssOrderFulfillmentPage = {
  readonly __typename?: "WSSOrderFulfillmentPage";
  readonly totalCount: Scalars["Int"];
  readonly dataSlice: ReadonlyArray<WssOrderFulfillment>;
};

export type WssOrderRefund = {
  readonly __typename?: "WSSOrderRefund";
  readonly orderId?: Maybe<Scalars["ObjectIdType"]>;
  readonly transactionDate?: Maybe<Datetime>;
  readonly carrier?: Maybe<Scalars["String"]>;
  readonly refundReason?: Maybe<ReturnRequestRefundReason>;
};

export type WssOrderRefundPage = {
  readonly __typename?: "WSSOrderRefundPage";
  readonly totalCount: Scalars["Int"];
  readonly dataSlice: ReadonlyArray<WssOrderRefund>;
};

export type WssPerformanceDeepDiveHub = {
  readonly __typename?: "WSSPerformanceDeepDiveHub";
  readonly orderUnfulfilled: WssOrderFulfillmentPage;
  readonly orderInvalidTracking: WssOrderFulfillmentPage;
  readonly orderFulfillmentSpeed: WssOrderFulfillmentPage;
  readonly orderLogisticsRefund: WssOrderRefundPage;
  readonly orderQualityRefund: WssOrderRefundPage;
  readonly productQualityRefund: WssProductRefundPage;
  readonly productRating: WssProductRatingPage;
  readonly qualityRefundBreakdown: ReadonlyArray<WssRefundBreakdown>;
  readonly fulfillmentRateDenominator?: Maybe<Scalars["Int"]>;
  readonly validTrackingRateDenominator?: Maybe<Scalars["Int"]>;
  readonly hasFulfillmentSpeedOrderCount?: Maybe<Scalars["Int"]>;
  readonly refundRateDenominator?: Maybe<Scalars["Int"]>;
  readonly qualityRefundCount?: Maybe<Scalars["Int"]>;
  readonly totalRatingsReceived?: Maybe<Scalars["Int"]>;
  readonly carriersInFulfillment?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly carriersInRefund?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly destinationsInFulfillment?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly carriers?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly destinations?: Maybe<ReadonlyArray<Scalars["String"]>>;
  readonly unfulfilledReasons?: Maybe<ReadonlyArray<WsssUnfulfilledReasons>>;
  readonly logisticsRefundReasons?: Maybe<
    ReadonlyArray<WssLogisticsRefundReason>
  >;
  readonly qualityRefundReasons?: Maybe<ReadonlyArray<WssQualityRefundReason>>;
};

export type WssPerformanceDeepDiveHubOrderUnfulfilledArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sortField?: Maybe<SortOrderTransactionDateField>;
  sortOrder?: Maybe<SortByOrder>;
  orderIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  unfulfilledReasons?: Maybe<ReadonlyArray<WsssUnfulfilledReasons>>;
  destinations?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type WssPerformanceDeepDiveHubOrderInvalidTrackingArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sortField?: Maybe<SortOrderTransactionDateField>;
  sortOrder?: Maybe<SortByOrder>;
  orderIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  destinations?: Maybe<ReadonlyArray<Scalars["String"]>>;
  carriers?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type WssPerformanceDeepDiveHubOrderFulfillmentSpeedArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sortField?: Maybe<SortOrderFulfillmentSpeed>;
  sortOrder?: Maybe<SortByOrder>;
  orderIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  destinations?: Maybe<ReadonlyArray<Scalars["String"]>>;
  carriers?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type WssPerformanceDeepDiveHubOrderLogisticsRefundArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sortField?: Maybe<SortOrderTransactionDateField>;
  sortOrder?: Maybe<SortByOrder>;
  orderIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
  refundReasons?: Maybe<ReadonlyArray<WssLogisticsRefundReason>>;
  carriers?: Maybe<ReadonlyArray<Scalars["String"]>>;
};

export type WssPerformanceDeepDiveHubOrderQualityRefundArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sortField?: Maybe<SortOrderTransactionDateField>;
  sortOrder?: Maybe<SortByOrder>;
  productId?: Maybe<Scalars["ObjectIdType"]>;
  refundReasons?: Maybe<ReadonlyArray<WssQualityRefundReason>>;
};

export type WssPerformanceDeepDiveHubProductQualityRefundArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sortField?: Maybe<SortProductQualityRefundField>;
  sortOrder?: Maybe<SortByOrder>;
  productIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
};

export type WssPerformanceDeepDiveHubProductRatingArgs = {
  offset?: Maybe<Scalars["Int"]>;
  limit?: Maybe<Scalars["Int"]>;
  sortField?: Maybe<SortProductRatingField>;
  sortOrder?: Maybe<SortByOrder>;
  productIds?: Maybe<ReadonlyArray<Scalars["ObjectIdType"]>>;
};

export type WssPerformanceDeepDiveHubQualityRefundBreakdownArgs = {
  productId?: Maybe<Scalars["ObjectIdType"]>;
};

export type WssPerformanceDeepDiveHubCarriersArgs = {
  pageType: WssDeepDivePageType;
};

export type WssPerformanceDeepDiveHubDestinationsArgs = {
  pageType: WssDeepDivePageType;
};

export type WssPerformanceDeepDiveHubQualityRefundReasonsArgs = {
  productId: Scalars["ObjectIdType"];
};

export type WssProductRating = {
  readonly __typename?: "WSSProductRating";
  readonly productId: Scalars["ObjectIdType"];
  readonly receivedRatings: Scalars["Int"];
  readonly averageRating: Scalars["Float"];
  readonly productName?: Maybe<Scalars["String"]>;
  readonly productImageUrl?: Maybe<Scalars["String"]>;
};

export type WssProductRatingPage = {
  readonly __typename?: "WSSProductRatingPage";
  readonly totalCount: Scalars["Int"];
  readonly dataSlice: ReadonlyArray<WssProductRating>;
};

export type WssProductRefund = {
  readonly __typename?: "WSSProductRefund";
  readonly productId: Scalars["ObjectIdType"];
  readonly receivedOrders: Scalars["Int"];
  readonly qualityRefundIssued: Scalars["Int"];
  readonly qualityRefundRate?: Maybe<Scalars["Float"]>;
  readonly productName?: Maybe<Scalars["String"]>;
  readonly productImageUrl?: Maybe<Scalars["String"]>;
};

export type WssProductRefundPage = {
  readonly __typename?: "WSSProductRefundPage";
  readonly totalCount: Scalars["Int"];
  readonly dataSlice: ReadonlyArray<WssProductRefund>;
};

export type WssQualityRefundReason =
  | "OTHER"
  | "ITEM_IS_COUNTERFEIT"
  | "ITEM_DOES_NOT_FIT"
  | "RECEIVED_WRONG_ITEM"
  | "ITEM_IS_DAMAGED"
  | "ITEM_DOES_NOT_WORK_AS_DESCRIBED"
  | "ITEM_DOES_NOT_MATCH_LISTING"
  | "MISLEADING_LISTING"
  | "ITEM_IS_DANGEROUS"
  | "WRONG_COLOR"
  | "ITEM_IS_POOR_QUALITY"
  | "PRODUCT_LISTING_MISSING_INFO"
  | "ITEM_DID_NOT_MEET_EXPECTATIONS"
  | "EMPTY_PACKAGE"
  | "INCORRECT_QUANTITY_OF_ITEMS"
  | "MISSING_ITEM_OR_PARTS"
  | "STORE_SENT_THE_WRONG_SIZE"
  | "PRODUCT_MALFUNCTION"
  | "RECEIVED_NOTE_FROM_MERCHANT";

export type WssRefundBreakdown = {
  readonly __typename?: "WSSRefundBreakdown";
  readonly productId?: Maybe<Scalars["ObjectIdType"]>;
  readonly reason?: Maybe<ReturnRequestRefundReason>;
  readonly count?: Maybe<Scalars["Int"]>;
};

export type WsssUnfulfilledReasons =
  | "ORDER_CANCELLED"
  | "ORDER_EXPIRED"
  | "ORDER_REFUNDED"
  | "ORDER_TRACKING_CANCELLED";

export type WssThingsToWatch = {
  readonly __typename?: "WSSThingsToWatch";
  readonly metricType?: Maybe<WssMetricType>;
  readonly metricTrend?: Maybe<WssMetricTrend>;
  readonly metricValue?: Maybe<Scalars["Float"]>;
  readonly recordTime?: Maybe<Datetime>;
};

export type WssThingsToWatchBoard = {
  readonly __typename?: "WSSThingsToWatchBoard";
  readonly dataSlice: ReadonlyArray<WssThingsToWatch>;
};

export type WssTier =
  | "PLATINUM"
  | "GOLD"
  | "BAN"
  | "UNASSESSED"
  | "SILVER"
  | "BRONZE";
