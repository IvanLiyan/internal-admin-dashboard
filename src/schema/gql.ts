/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query AuthQuery {\n    currentUser {\n      id\n      roles {\n        id\n      }\n    }\n  }\n": types.AuthQueryDocument,
    "\n  mutation Toolkit_InitialUpload($input: InitiateUploadInput!) {\n    uploads {\n      initiateUpload(input: $input) {\n        ok\n        message\n        uploadUrl\n        uploadHeaders\n        downloadUrl\n      }\n    }\n  }\n": types.Toolkit_InitialUploadDocument,
    "\n  mutation Disputes_BulkAction($input: BulkUpsertMerchantWarningInput) {\n    policy {\n      bulkUpsertMerchantWarning(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n": types.Disputes_BulkActionDocument,
    "\n  mutation Dispute_Action($input: UpsertMerchantWarningInput) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.Dispute_ActionDocument,
    "\n  query Disputes_BulkStatus(\n    $offset: Int\n    $limit: Int\n    $search: String\n    $types: [BulkMerchantWarningAction!]\n  ) {\n    policy {\n      merchantWarningBulkProcessCount(search: $search, types: $types)\n      merchantWarningBulkProcesses(\n        offset: $offset\n        limit: $limit\n        search: $search\n        types: $types\n      ) {\n        id\n        submitted {\n          unix\n        }\n        type\n        requestedBy\n        requestedWarningIds\n        results {\n          warningId\n          success\n          error\n        }\n      }\n    }\n  }\n": types.Disputes_BulkStatusDocument,
    "\n  query Disputes_Messages($warningId: ObjectIdType) {\n    policy {\n      merchantWarning(id: $warningId) {\n        replies {\n          senderType\n          senderName\n          message\n          date {\n            unix\n          }\n        }\n        trackingDispute {\n          messages {\n            senderType\n            senderName\n            message\n            date {\n              unix\n            }\n          }\n        }\n      }\n    }\n  }\n": types.Disputes_MessagesDocument,
    "\n  query Disputes_GetInfractions(\n    $id: ObjectIdType\n    $ids: [ObjectIdType!]\n    $offset: Int\n    $limit: Int\n    $states: [MerchantWarningState!]\n    $claimStatus: MerchantWarningClaimStatus\n    $reasons: [MerchantWarningReason!]\n    $sort: MerchantWarningSort\n    $issueDateStart: DatetimeInput\n    $issueDateEnd: DatetimeInput\n    $searchProofIdTypes: [MerchantWarningProofType!]\n    $category: CounterfeitReasonCode\n    $subcategory: TaggingViolationSubReasonCode\n    $correspondenceStatus: MerchantWarningCorrespondenceStatus\n    $disputePendingEditReview: Boolean\n    $disputePendingBrandAuth: Boolean\n  ) {\n    currentUser {\n      id\n    }\n    policy {\n      merchantWarningCount(\n        ids: $ids\n        id: $id\n        states: $states\n        claimStatus: $claimStatus\n        reasons: $reasons\n        issueDateStart: $issueDateStart\n        issueDateEnd: $issueDateEnd\n        searchProofIdTypes: $searchProofIdTypes\n        category: $category\n        subcategory: $subcategory\n        correspondenceStatus: $correspondenceStatus\n        disputePendingEditReview: $disputePendingEditReview\n        disputePendingBrandAuth: $disputePendingBrandAuth\n      )\n      merchantWarnings(\n        ids: $ids\n        id: $id\n        offset: $offset\n        limit: $limit\n        states: $states\n        claimStatus: $claimStatus\n        reasons: $reasons\n        sort: $sort\n        issueDateStart: $issueDateStart\n        issueDateEnd: $issueDateEnd\n        searchProofIdTypes: $searchProofIdTypes\n        category: $category\n        subcategory: $subcategory\n        correspondenceStatus: $correspondenceStatus\n        disputePendingEditReview: $disputePendingEditReview\n        disputePendingBrandAuth: $disputePendingBrandAuth\n      ) {\n        id\n        creatorName\n        adminReasonText\n        counterfeitReasonText\n        banned\n        correspondenceStatus\n        wssImpact\n        urgencyScore\n        bulkProcessing\n        productTrueTagInfo {\n          subreason {\n            subcategory\n          }\n        }\n        claimedBy {\n          id\n        }\n        createdTime {\n          unix\n        }\n        lastUpdate {\n          unix\n        }\n        merchant {\n          id\n          displayName\n          accountManager {\n            name\n            bdMerchantCountry\n          }\n          wishSellerStandard {\n            level\n          }\n          storeStats {\n            thirtyDayTotals: totals(days: 30) {\n              orders\n            }\n            sevenDayTotals: totals(days: 7) {\n              gmv {\n                display\n              }\n            }\n            totalGmv {\n              display\n            }\n          }\n        }\n      }\n    }\n  }\n": types.Disputes_GetInfractionsDocument,
    "\n  query GetNotices(\n    $queryInput: NoticeQueryInput!\n    $offset: Int!\n    $limit: Int!\n  ) {\n    dsa {\n      notifierOrganizations\n      noticeCount(queryInput: $queryInput)\n      notices(queryInput: $queryInput, offset: $offset, limit: $limit) {\n        id\n        status\n        datetimeCreated {\n          datetime\n        }\n        notifierName\n        notifierOrganization\n        notifierEmail\n        priority\n        lastClaimedUser {\n          email\n        }\n      }\n    }\n  }\n": types.GetNoticesDocument,
    "\n  mutation NoticePortal_ClaimNotice($input: ClaimNoticesInput!) {\n    dsa {\n      claimNotices(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n": types.NoticePortal_ClaimNoticeDocument,
    "\n  mutation UpsertNote($input: UpsertNoteInput!) {\n    dsa {\n      upsertNote(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n": types.UpsertNoteDocument,
    "\n  query GetNoticeProducts(\n    $noticeId: ObjectIdType!\n    $offset: Int!\n    $limit: Int\n    $queryInput: NoticeProductQueryInput!\n  ) {\n    dsa {\n      notice(noticeId: $noticeId) {\n        allProducts: products(queryInput: $queryInput, offset: 0) {\n          status\n        }\n        products(queryInput: $queryInput, offset: $offset, limit: $limit) {\n          status\n          product {\n            id\n            name\n            description\n            mainImage {\n              wishUrl\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetNoticeProductsDocument,
    "\n  mutation NoticePortal_SubmitReview($input: CompleteNoticeReviewInput!) {\n    dsa {\n      completeNoticeReview(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n": types.NoticePortal_SubmitReviewDocument,
    "\n  mutation NoticePortal_UnclaimNotice($input: UnclaimNoticesInput!) {\n    dsa {\n      unclaimNotices(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n": types.NoticePortal_UnclaimNoticeDocument,
    "\n  mutation SellerIdentity_ReviewBankDocument(\n    $input: ReviewBankAccountDocumentInput!\n  ) {\n    merchantIdentity {\n      bankAccountVerification {\n        reviewDocument(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.SellerIdentity_ReviewBankDocumentDocument,
    "\n  query SellerIdentity_BankAccountDocuments($merchantId: ObjectIdType) {\n    merchants {\n      merchant(id: $merchantId) {\n        state\n        bankAccountVerification {\n          id\n          state\n          bankAccountDocuments {\n            id\n            state\n            documentFile {\n              id\n              fileUrl(console: true)\n            }\n            uploadedAt {\n              unix\n            }\n            comment\n            documentType\n            reviewedAt {\n              unix\n            }\n            reviewer {\n              name\n            }\n            last4Digits\n            stateReason\n          }\n        }\n      }\n    }\n  }\n": types.SellerIdentity_BankAccountDocumentsDocument,
    "\n  query SellerIdentity_BankAccountVerifications(\n    $offset: Int\n    $limit: Int\n    $merchantId: ObjectIdType\n    $state: BankAccountVerificationStatus\n  ) {\n    merchantIdentity {\n      bankAccountVerificationsCount(merchantId: $merchantId, state: $state)\n      bankAccountVerifications(\n        offset: $offset\n        limit: $limit\n        merchantId: $merchantId\n        state: $state\n      ) {\n        id\n        state\n        lastReviewedAt {\n          unix\n        }\n        lastUploadedAt {\n          unix\n        }\n        bankAccountDocuments {\n          id\n        }\n      }\n    }\n  }\n": types.SellerIdentity_BankAccountVerificationsDocument,
    "\n  mutation SellerIdentity_ReviewTaxDocument(\n    $input: ReviewMerchantIdentityDocumentInput!\n  ) {\n    merchantIdentity {\n      merchantIdentityVerification {\n        reviewIdentityVerificationDocument(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.SellerIdentity_ReviewTaxDocumentDocument,
    "\n  query SellerIdentityTaxAccountDocuments(\n    $merchantId: ObjectIdType!\n    $verificationType: MerchantIdentityVerificationType\n  ) {\n    merchants {\n      mainUser(merchantId: $merchantId) {\n        id\n      }\n      merchant(id: $merchantId) {\n        id\n        state\n        merchantIdentityVerification(verificationType: $verificationType) {\n          id\n          state\n          merchantIdentityDocuments {\n            id\n            state\n            documentFile {\n              id\n              fileUrl(console: true)\n            }\n            uploadedAt {\n              unix\n            }\n            comment\n            documentType\n            reviewedAt {\n              unix\n            }\n            reviewer {\n              name\n            }\n            stateReason\n          }\n        }\n      }\n    }\n  }\n": types.SellerIdentityTaxAccountDocumentsDocument,
    "\n  query SellerIdentityTaxAccountVerifications(\n    $offset: Int\n    $limit: Int\n    $merchantId: ObjectIdType\n    $state: MerchantIdentityVerificationStatus\n    $verificationType: MerchantIdentityVerificationType\n  ) {\n    merchantIdentity {\n      merchantIdentityVerificationsCount(\n        merchantId: $merchantId\n        state: $state\n        verificationType: $verificationType\n      )\n      merchantIdentityVerifications(\n        offset: $offset\n        limit: $limit\n        merchantId: $merchantId\n        state: $state\n        verificationType: $verificationType\n      ) {\n        id\n        merchantId\n        state\n        lastUploadedAt {\n          unix\n        }\n        lastReviewedAt {\n          unix\n        }\n      }\n    }\n  }\n": types.SellerIdentityTaxAccountVerificationsDocument,
    "\n  mutation Authentication_LoginMutation($input: LoginMutationInput!) {\n    authentication {\n      login(input: $input) {\n        loginOk\n        error\n        errorState\n      }\n    }\n  }\n": types.Authentication_LoginMutationDocument,
    "\n  query DevOnly_GetUser {\n    currentUser {\n      id\n    }\n  }\n": types.DevOnly_GetUserDocument,
    "\n  query GetNotice($noticeId: ObjectIdType!) {\n    dsa {\n      notice(noticeId: $noticeId) {\n        id\n        status\n        description\n        datetimeCreated {\n          datetime\n        }\n        datetimeDisputed {\n          datetime\n        }\n        notifierName\n        notifierEmail\n        notifierOrganization\n        lastClaimedUser {\n          id\n          email\n        }\n        supportFiles {\n          id\n          displayFilename\n          fileUrl\n        }\n        disputeDescription\n        disputeReviewResponse\n        disputeSupportFiles {\n          id\n          displayFilename\n          fileUrl\n        }\n        note\n      }\n    }\n  }\n": types.GetNoticeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AuthQuery {\n    currentUser {\n      id\n      roles {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query AuthQuery {\n    currentUser {\n      id\n      roles {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Toolkit_InitialUpload($input: InitiateUploadInput!) {\n    uploads {\n      initiateUpload(input: $input) {\n        ok\n        message\n        uploadUrl\n        uploadHeaders\n        downloadUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Toolkit_InitialUpload($input: InitiateUploadInput!) {\n    uploads {\n      initiateUpload(input: $input) {\n        ok\n        message\n        uploadUrl\n        uploadHeaders\n        downloadUrl\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Disputes_BulkAction($input: BulkUpsertMerchantWarningInput) {\n    policy {\n      bulkUpsertMerchantWarning(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Disputes_BulkAction($input: BulkUpsertMerchantWarningInput) {\n    policy {\n      bulkUpsertMerchantWarning(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Dispute_Action($input: UpsertMerchantWarningInput) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Dispute_Action($input: UpsertMerchantWarningInput) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Disputes_BulkStatus(\n    $offset: Int\n    $limit: Int\n    $search: String\n    $types: [BulkMerchantWarningAction!]\n  ) {\n    policy {\n      merchantWarningBulkProcessCount(search: $search, types: $types)\n      merchantWarningBulkProcesses(\n        offset: $offset\n        limit: $limit\n        search: $search\n        types: $types\n      ) {\n        id\n        submitted {\n          unix\n        }\n        type\n        requestedBy\n        requestedWarningIds\n        results {\n          warningId\n          success\n          error\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Disputes_BulkStatus(\n    $offset: Int\n    $limit: Int\n    $search: String\n    $types: [BulkMerchantWarningAction!]\n  ) {\n    policy {\n      merchantWarningBulkProcessCount(search: $search, types: $types)\n      merchantWarningBulkProcesses(\n        offset: $offset\n        limit: $limit\n        search: $search\n        types: $types\n      ) {\n        id\n        submitted {\n          unix\n        }\n        type\n        requestedBy\n        requestedWarningIds\n        results {\n          warningId\n          success\n          error\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Disputes_Messages($warningId: ObjectIdType) {\n    policy {\n      merchantWarning(id: $warningId) {\n        replies {\n          senderType\n          senderName\n          message\n          date {\n            unix\n          }\n        }\n        trackingDispute {\n          messages {\n            senderType\n            senderName\n            message\n            date {\n              unix\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Disputes_Messages($warningId: ObjectIdType) {\n    policy {\n      merchantWarning(id: $warningId) {\n        replies {\n          senderType\n          senderName\n          message\n          date {\n            unix\n          }\n        }\n        trackingDispute {\n          messages {\n            senderType\n            senderName\n            message\n            date {\n              unix\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Disputes_GetInfractions(\n    $id: ObjectIdType\n    $ids: [ObjectIdType!]\n    $offset: Int\n    $limit: Int\n    $states: [MerchantWarningState!]\n    $claimStatus: MerchantWarningClaimStatus\n    $reasons: [MerchantWarningReason!]\n    $sort: MerchantWarningSort\n    $issueDateStart: DatetimeInput\n    $issueDateEnd: DatetimeInput\n    $searchProofIdTypes: [MerchantWarningProofType!]\n    $category: CounterfeitReasonCode\n    $subcategory: TaggingViolationSubReasonCode\n    $correspondenceStatus: MerchantWarningCorrespondenceStatus\n    $disputePendingEditReview: Boolean\n    $disputePendingBrandAuth: Boolean\n  ) {\n    currentUser {\n      id\n    }\n    policy {\n      merchantWarningCount(\n        ids: $ids\n        id: $id\n        states: $states\n        claimStatus: $claimStatus\n        reasons: $reasons\n        issueDateStart: $issueDateStart\n        issueDateEnd: $issueDateEnd\n        searchProofIdTypes: $searchProofIdTypes\n        category: $category\n        subcategory: $subcategory\n        correspondenceStatus: $correspondenceStatus\n        disputePendingEditReview: $disputePendingEditReview\n        disputePendingBrandAuth: $disputePendingBrandAuth\n      )\n      merchantWarnings(\n        ids: $ids\n        id: $id\n        offset: $offset\n        limit: $limit\n        states: $states\n        claimStatus: $claimStatus\n        reasons: $reasons\n        sort: $sort\n        issueDateStart: $issueDateStart\n        issueDateEnd: $issueDateEnd\n        searchProofIdTypes: $searchProofIdTypes\n        category: $category\n        subcategory: $subcategory\n        correspondenceStatus: $correspondenceStatus\n        disputePendingEditReview: $disputePendingEditReview\n        disputePendingBrandAuth: $disputePendingBrandAuth\n      ) {\n        id\n        creatorName\n        adminReasonText\n        counterfeitReasonText\n        banned\n        correspondenceStatus\n        wssImpact\n        urgencyScore\n        bulkProcessing\n        productTrueTagInfo {\n          subreason {\n            subcategory\n          }\n        }\n        claimedBy {\n          id\n        }\n        createdTime {\n          unix\n        }\n        lastUpdate {\n          unix\n        }\n        merchant {\n          id\n          displayName\n          accountManager {\n            name\n            bdMerchantCountry\n          }\n          wishSellerStandard {\n            level\n          }\n          storeStats {\n            thirtyDayTotals: totals(days: 30) {\n              orders\n            }\n            sevenDayTotals: totals(days: 7) {\n              gmv {\n                display\n              }\n            }\n            totalGmv {\n              display\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Disputes_GetInfractions(\n    $id: ObjectIdType\n    $ids: [ObjectIdType!]\n    $offset: Int\n    $limit: Int\n    $states: [MerchantWarningState!]\n    $claimStatus: MerchantWarningClaimStatus\n    $reasons: [MerchantWarningReason!]\n    $sort: MerchantWarningSort\n    $issueDateStart: DatetimeInput\n    $issueDateEnd: DatetimeInput\n    $searchProofIdTypes: [MerchantWarningProofType!]\n    $category: CounterfeitReasonCode\n    $subcategory: TaggingViolationSubReasonCode\n    $correspondenceStatus: MerchantWarningCorrespondenceStatus\n    $disputePendingEditReview: Boolean\n    $disputePendingBrandAuth: Boolean\n  ) {\n    currentUser {\n      id\n    }\n    policy {\n      merchantWarningCount(\n        ids: $ids\n        id: $id\n        states: $states\n        claimStatus: $claimStatus\n        reasons: $reasons\n        issueDateStart: $issueDateStart\n        issueDateEnd: $issueDateEnd\n        searchProofIdTypes: $searchProofIdTypes\n        category: $category\n        subcategory: $subcategory\n        correspondenceStatus: $correspondenceStatus\n        disputePendingEditReview: $disputePendingEditReview\n        disputePendingBrandAuth: $disputePendingBrandAuth\n      )\n      merchantWarnings(\n        ids: $ids\n        id: $id\n        offset: $offset\n        limit: $limit\n        states: $states\n        claimStatus: $claimStatus\n        reasons: $reasons\n        sort: $sort\n        issueDateStart: $issueDateStart\n        issueDateEnd: $issueDateEnd\n        searchProofIdTypes: $searchProofIdTypes\n        category: $category\n        subcategory: $subcategory\n        correspondenceStatus: $correspondenceStatus\n        disputePendingEditReview: $disputePendingEditReview\n        disputePendingBrandAuth: $disputePendingBrandAuth\n      ) {\n        id\n        creatorName\n        adminReasonText\n        counterfeitReasonText\n        banned\n        correspondenceStatus\n        wssImpact\n        urgencyScore\n        bulkProcessing\n        productTrueTagInfo {\n          subreason {\n            subcategory\n          }\n        }\n        claimedBy {\n          id\n        }\n        createdTime {\n          unix\n        }\n        lastUpdate {\n          unix\n        }\n        merchant {\n          id\n          displayName\n          accountManager {\n            name\n            bdMerchantCountry\n          }\n          wishSellerStandard {\n            level\n          }\n          storeStats {\n            thirtyDayTotals: totals(days: 30) {\n              orders\n            }\n            sevenDayTotals: totals(days: 7) {\n              gmv {\n                display\n              }\n            }\n            totalGmv {\n              display\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetNotices(\n    $queryInput: NoticeQueryInput!\n    $offset: Int!\n    $limit: Int!\n  ) {\n    dsa {\n      notifierOrganizations\n      noticeCount(queryInput: $queryInput)\n      notices(queryInput: $queryInput, offset: $offset, limit: $limit) {\n        id\n        status\n        datetimeCreated {\n          datetime\n        }\n        notifierName\n        notifierOrganization\n        notifierEmail\n        priority\n        lastClaimedUser {\n          email\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetNotices(\n    $queryInput: NoticeQueryInput!\n    $offset: Int!\n    $limit: Int!\n  ) {\n    dsa {\n      notifierOrganizations\n      noticeCount(queryInput: $queryInput)\n      notices(queryInput: $queryInput, offset: $offset, limit: $limit) {\n        id\n        status\n        datetimeCreated {\n          datetime\n        }\n        notifierName\n        notifierOrganization\n        notifierEmail\n        priority\n        lastClaimedUser {\n          email\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NoticePortal_ClaimNotice($input: ClaimNoticesInput!) {\n    dsa {\n      claimNotices(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NoticePortal_ClaimNotice($input: ClaimNoticesInput!) {\n    dsa {\n      claimNotices(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpsertNote($input: UpsertNoteInput!) {\n    dsa {\n      upsertNote(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertNote($input: UpsertNoteInput!) {\n    dsa {\n      upsertNote(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetNoticeProducts(\n    $noticeId: ObjectIdType!\n    $offset: Int!\n    $limit: Int\n    $queryInput: NoticeProductQueryInput!\n  ) {\n    dsa {\n      notice(noticeId: $noticeId) {\n        allProducts: products(queryInput: $queryInput, offset: 0) {\n          status\n        }\n        products(queryInput: $queryInput, offset: $offset, limit: $limit) {\n          status\n          product {\n            id\n            name\n            description\n            mainImage {\n              wishUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetNoticeProducts(\n    $noticeId: ObjectIdType!\n    $offset: Int!\n    $limit: Int\n    $queryInput: NoticeProductQueryInput!\n  ) {\n    dsa {\n      notice(noticeId: $noticeId) {\n        allProducts: products(queryInput: $queryInput, offset: 0) {\n          status\n        }\n        products(queryInput: $queryInput, offset: $offset, limit: $limit) {\n          status\n          product {\n            id\n            name\n            description\n            mainImage {\n              wishUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NoticePortal_SubmitReview($input: CompleteNoticeReviewInput!) {\n    dsa {\n      completeNoticeReview(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NoticePortal_SubmitReview($input: CompleteNoticeReviewInput!) {\n    dsa {\n      completeNoticeReview(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NoticePortal_UnclaimNotice($input: UnclaimNoticesInput!) {\n    dsa {\n      unclaimNotices(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NoticePortal_UnclaimNotice($input: UnclaimNoticesInput!) {\n    dsa {\n      unclaimNotices(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SellerIdentity_ReviewBankDocument(\n    $input: ReviewBankAccountDocumentInput!\n  ) {\n    merchantIdentity {\n      bankAccountVerification {\n        reviewDocument(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SellerIdentity_ReviewBankDocument(\n    $input: ReviewBankAccountDocumentInput!\n  ) {\n    merchantIdentity {\n      bankAccountVerification {\n        reviewDocument(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerIdentity_BankAccountDocuments($merchantId: ObjectIdType) {\n    merchants {\n      merchant(id: $merchantId) {\n        state\n        bankAccountVerification {\n          id\n          state\n          bankAccountDocuments {\n            id\n            state\n            documentFile {\n              id\n              fileUrl(console: true)\n            }\n            uploadedAt {\n              unix\n            }\n            comment\n            documentType\n            reviewedAt {\n              unix\n            }\n            reviewer {\n              name\n            }\n            last4Digits\n            stateReason\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SellerIdentity_BankAccountDocuments($merchantId: ObjectIdType) {\n    merchants {\n      merchant(id: $merchantId) {\n        state\n        bankAccountVerification {\n          id\n          state\n          bankAccountDocuments {\n            id\n            state\n            documentFile {\n              id\n              fileUrl(console: true)\n            }\n            uploadedAt {\n              unix\n            }\n            comment\n            documentType\n            reviewedAt {\n              unix\n            }\n            reviewer {\n              name\n            }\n            last4Digits\n            stateReason\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerIdentity_BankAccountVerifications(\n    $offset: Int\n    $limit: Int\n    $merchantId: ObjectIdType\n    $state: BankAccountVerificationStatus\n  ) {\n    merchantIdentity {\n      bankAccountVerificationsCount(merchantId: $merchantId, state: $state)\n      bankAccountVerifications(\n        offset: $offset\n        limit: $limit\n        merchantId: $merchantId\n        state: $state\n      ) {\n        id\n        state\n        lastReviewedAt {\n          unix\n        }\n        lastUploadedAt {\n          unix\n        }\n        bankAccountDocuments {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SellerIdentity_BankAccountVerifications(\n    $offset: Int\n    $limit: Int\n    $merchantId: ObjectIdType\n    $state: BankAccountVerificationStatus\n  ) {\n    merchantIdentity {\n      bankAccountVerificationsCount(merchantId: $merchantId, state: $state)\n      bankAccountVerifications(\n        offset: $offset\n        limit: $limit\n        merchantId: $merchantId\n        state: $state\n      ) {\n        id\n        state\n        lastReviewedAt {\n          unix\n        }\n        lastUploadedAt {\n          unix\n        }\n        bankAccountDocuments {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SellerIdentity_ReviewTaxDocument(\n    $input: ReviewMerchantIdentityDocumentInput!\n  ) {\n    merchantIdentity {\n      merchantIdentityVerification {\n        reviewIdentityVerificationDocument(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SellerIdentity_ReviewTaxDocument(\n    $input: ReviewMerchantIdentityDocumentInput!\n  ) {\n    merchantIdentity {\n      merchantIdentityVerification {\n        reviewIdentityVerificationDocument(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerIdentityTaxAccountDocuments(\n    $merchantId: ObjectIdType!\n    $verificationType: MerchantIdentityVerificationType\n  ) {\n    merchants {\n      mainUser(merchantId: $merchantId) {\n        id\n      }\n      merchant(id: $merchantId) {\n        id\n        state\n        merchantIdentityVerification(verificationType: $verificationType) {\n          id\n          state\n          merchantIdentityDocuments {\n            id\n            state\n            documentFile {\n              id\n              fileUrl(console: true)\n            }\n            uploadedAt {\n              unix\n            }\n            comment\n            documentType\n            reviewedAt {\n              unix\n            }\n            reviewer {\n              name\n            }\n            stateReason\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SellerIdentityTaxAccountDocuments(\n    $merchantId: ObjectIdType!\n    $verificationType: MerchantIdentityVerificationType\n  ) {\n    merchants {\n      mainUser(merchantId: $merchantId) {\n        id\n      }\n      merchant(id: $merchantId) {\n        id\n        state\n        merchantIdentityVerification(verificationType: $verificationType) {\n          id\n          state\n          merchantIdentityDocuments {\n            id\n            state\n            documentFile {\n              id\n              fileUrl(console: true)\n            }\n            uploadedAt {\n              unix\n            }\n            comment\n            documentType\n            reviewedAt {\n              unix\n            }\n            reviewer {\n              name\n            }\n            stateReason\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SellerIdentityTaxAccountVerifications(\n    $offset: Int\n    $limit: Int\n    $merchantId: ObjectIdType\n    $state: MerchantIdentityVerificationStatus\n    $verificationType: MerchantIdentityVerificationType\n  ) {\n    merchantIdentity {\n      merchantIdentityVerificationsCount(\n        merchantId: $merchantId\n        state: $state\n        verificationType: $verificationType\n      )\n      merchantIdentityVerifications(\n        offset: $offset\n        limit: $limit\n        merchantId: $merchantId\n        state: $state\n        verificationType: $verificationType\n      ) {\n        id\n        merchantId\n        state\n        lastUploadedAt {\n          unix\n        }\n        lastReviewedAt {\n          unix\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SellerIdentityTaxAccountVerifications(\n    $offset: Int\n    $limit: Int\n    $merchantId: ObjectIdType\n    $state: MerchantIdentityVerificationStatus\n    $verificationType: MerchantIdentityVerificationType\n  ) {\n    merchantIdentity {\n      merchantIdentityVerificationsCount(\n        merchantId: $merchantId\n        state: $state\n        verificationType: $verificationType\n      )\n      merchantIdentityVerifications(\n        offset: $offset\n        limit: $limit\n        merchantId: $merchantId\n        state: $state\n        verificationType: $verificationType\n      ) {\n        id\n        merchantId\n        state\n        lastUploadedAt {\n          unix\n        }\n        lastReviewedAt {\n          unix\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Authentication_LoginMutation($input: LoginMutationInput!) {\n    authentication {\n      login(input: $input) {\n        loginOk\n        error\n        errorState\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Authentication_LoginMutation($input: LoginMutationInput!) {\n    authentication {\n      login(input: $input) {\n        loginOk\n        error\n        errorState\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DevOnly_GetUser {\n    currentUser {\n      id\n    }\n  }\n"): (typeof documents)["\n  query DevOnly_GetUser {\n    currentUser {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetNotice($noticeId: ObjectIdType!) {\n    dsa {\n      notice(noticeId: $noticeId) {\n        id\n        status\n        description\n        datetimeCreated {\n          datetime\n        }\n        datetimeDisputed {\n          datetime\n        }\n        notifierName\n        notifierEmail\n        notifierOrganization\n        lastClaimedUser {\n          id\n          email\n        }\n        supportFiles {\n          id\n          displayFilename\n          fileUrl\n        }\n        disputeDescription\n        disputeReviewResponse\n        disputeSupportFiles {\n          id\n          displayFilename\n          fileUrl\n        }\n        note\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetNotice($noticeId: ObjectIdType!) {\n    dsa {\n      notice(noticeId: $noticeId) {\n        id\n        status\n        description\n        datetimeCreated {\n          datetime\n        }\n        datetimeDisputed {\n          datetime\n        }\n        notifierName\n        notifierEmail\n        notifierOrganization\n        lastClaimedUser {\n          id\n          email\n        }\n        supportFiles {\n          id\n          displayFilename\n          fileUrl\n        }\n        disputeDescription\n        disputeReviewResponse\n        disputeSupportFiles {\n          id\n          displayFilename\n          fileUrl\n        }\n        note\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;