
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT IT DIRECTLY.
# DO NOT ATTEMPT TO RESOLVE MERGE CONFLICTS MANUALLY.
# RUN `./finch generate-graphql-types` regenerate it.

  schema {
  query: RootQuery
  mutation: RootMutation
}

type AcceptDEComplianceTermsOfService {
  ok: Boolean!
  message: String
}

type AcceptEUComplianceTermsOfService {
  ok: Boolean!
  message: String
}

type AcceptFRComplianceTermsOfService {
  ok: Boolean!
  message: String
}

type AcceptMerchantPolicy {
  ok: Boolean!
  message: String
}

input AcceptMerchantPolicyInput {
  agreed: Boolean!
  source: MerchantPolicyAgreementSource!
}

type AcceptTermsOfService {
  ok: Boolean!
  message: String
}

input AcceptTermsOfServiceInput {
  tosVersion: Int!
  tosRegion: TermsOfServiceRegionType
}

type AcceptTos {
  ok: Boolean!
  message: String
}

input AcceptTosInput {
  country: CountryCode!
}

enum AccountBalanceType {
  CONFIRMED
  PENDING
}

type ActionRequiredOrdersCsvDownload {
  ok: Boolean!
  errorMessage: String
}

input ActionRequiredOrdersCsvDownloadInput {
  query: String
  searchType: ActionRequiredSearchType
  offset: Int = 0
  sort: ActionRequiredSort
  filter: CSVExportFilterType
  startDate: DatetimeInput
  endDate: DatetimeInput
  wishExpressOnly: Boolean = false
}

enum ActionRequiredSearchType {
  ORDER_ID
  PRODUCT_ID
  TRACKING_NUMBER
  USER_NAME
  TRANSACTION_ID
}

input ActionRequiredSort {
  field: ActionRequiredSortFieldType!
  order: SortOrderType!
}

enum ActionRequiredSortFieldType {
  ORDER_TIME
  RELEASED_TIME
}

type AdaptivePolicyAdminMutations {
  manualEnrollUpload(input: AdaptivePolicyManualEnrollUploadInput!): AdaptivePolicyManualEnrollUpload
  manualEnroll(input: AdaptivePolicyManualEnrollConfirmInput!): AdaptivePolicyManualEnroll
}

type AdaptivePolicyManualEnroll {
  ok: Boolean!
  logs: String
}

input AdaptivePolicyManualEnrollConfirmInput {
  fileUrl: String!
  allPrivileges: Boolean!
  resetRevenueShare: Boolean!
}

type AdaptivePolicyManualEnrollSchema {
  merchantId: ObjectIdType!
  policyTier: String!
  reason: String!
}

type AdaptivePolicyManualEnrollUpload {
  ok: Boolean!
  logs: String
  updateList: [AdaptivePolicyManualEnrollSchema!]!
}

input AdaptivePolicyManualEnrollUploadInput {
  fileUrl: String!
}

input AddProductPostInput {
  merchantId: ObjectIdType!
  productId: ObjectIdType!
  sourceBucket: String!
  sourceBucketKey: String!
}

type AddProductPostMutation {
  ok: Boolean!
  message: String
  errorCode: ProductPostErrorCode
}

type AddTrademark {
  ok: Boolean!
  message: String
}

input AddTrademarkInput {
  brandInfoId: ObjectIdType!
  trademarkInfo: BrandPartnerTrademarkInfoInputObject!
}

input AddressInput {
  name: String!
  streetAddress1: String!
  streetAddress2: String
  streetAddress3: String
  city: String!
  county: String
  state: String!
  neighborhood: String
  region: String
  countryCode: CountryCode
  zipcode: String
  phoneNumber: String
}

type AddressSchema {
  name: String!
  streetAddress1: String!
  streetAddress2: String
  city: String!
  zipcode: String
  countryCode: CountryCode!
  state: String
  county: String
  country: Country!
  phoneNumber: String
}

type AddressUpdateError {
  orderId: ObjectIdType!
  message: String!
}

enum AddressVerificationState {
  SYSTEM_VERIFIED
  NOT_VERIFIED
  REQUEST_VERIFICATION
  USER_VERIFIED
  WPS_VERIFIED
}

type AdminCancelMFPCampaign {
  ok: Boolean!
  message: String
}

type AdminRefreshCampaignQuantity {
  ok: Boolean!
  message: String
}

input AdminRefreshCampaignQuantityInput {
  campaignId: ObjectIdType!
}

input AdminRemoveCountriesInput {
  campaignId: ObjectIdType!
  countries: [CountryCode!]!
  comment: String!
}

type AdminRemoveCountriesMutation {
  ok: Boolean!
  message: String
}

type AdminRemoveProductsMutation {
  ok: Boolean!
  message: String
}

type AlertSchema {
  link: String
  description: String!
  date: Datetime
  sentiment: AlertSentiment
}

enum AlertSentiment {
  INFO
  WARNING
  NEGATIVE
}

type AnalyticsServiceMutations {
  log(input: LogToTreasureDataInput!): LogToTreasureData
}

type AnnouncementAdmin {
  announcements(offset: Int = 0, limit: Int = 20, senderId: ObjectIdType, announcementType: AnnouncementType): AnnouncementListSchema
  announcement(id: String!): AnnouncementSchema
  options: AnnouncementOptionsSchema
  announcementJobs(offset: Int = 0, limit: Int = 20): [AnnouncementJobSchema!]
  announcementJob(id: String!): AnnouncementJobSchema
  announcementJobCount: Int!
  csv: CSVAnnouncementSchema
}

type AnnouncementAdminMutations {
  createSystemUpdateBaseAnnouncement(input: CreateSystemUpdateBaseAnnouncementInput!): CreateSystemUpdateBaseAnnouncement
  updateSystemUpdateBaseAnnouncement(input: UpdateSystemUpdateBaseAnnouncementInput!): UpdateSystemUpdateBaseAnnouncement
  createBdBaseAnnouncement(input: BDBaseAnnouncementInput!): CreateBDBaseAnnouncement
  publishAnnouncement(input: PublishAnnouncementInput!): PublishAnnouncement
}

type AnnouncementAudienceGroup {
  title: String!
  value: AudienceGroup!
}

enum AnnouncementAudienceSourceType {
  AUDIENCE_SOURCE_TYPE_UNSPECIFIED
  AUDIENCE_SOURCE_TYPE_ENUM
  AUDIENCE_SOURCE_TYPE_CSV
}

input AnnouncementCSVFieldsSchemaInput {
  sourceS3FileName: String!
  sourceFileUrl: String!
  placeholders: [String!]
  columnMapping: [CsvColumnMappingEntryInput!]!
}

enum AnnouncementCategory {
  CATEGORY_UNSPECIFIED
  CATEGORY_ACCOUNTSETTINGS
  CATEGORY_API
  CATEGORY_INSIGHTS
  CATEGORY_INTELLECTUALPROPERTY
  CATEGORY_LOCALCURRENCY
  CATEGORY_LOGISTICS
  CATEGORY_LOGISTICSPRICING
  CATEGORY_ORDERS
  CATEGORY_PAYMENTS
  CATEGORY_POLICIESANDTERMS
  CATEGORY_PRODUCTS
  CATEGORY_SHIPPINGCARRIERS
  CATEGORY_TAX
}

type AnnouncementCategorySchema {
  type: MerchantAnnouncementCategory!
  text: String!
}

type AnnouncementCategorySchemaV2 {
  type: AnnouncementCategory!
  text: String!
}

type AnnouncementContentSchema {
  locale: AnnouncementLocale!
  title: String!
  message: String!
  link: String
  ctaText: String
  ctaDueDate: Datetime
}

enum AnnouncementContentType {
  ANNOUNCEMENT_CONTENT_TYPE_UNSPECIFIED
  ANNOUNCEMENT_CONTENT_TYPE_STATIC
  ANNOUNCEMENT_CONTENT_TYPE_DYNAMIC
}

type AnnouncementJobSchema {
  id: ObjectIdType!
  createdTime: Datetime!
  jobType: AnnouncementJobType!
  csvS3Url: String!
  s3Filename: String!
  sender: UserSchema!
  state: AnnouncementJobState!
  titleEn: String!
  messageTemplateEn: String!
  messageTemplateCn: String
  midCount: Int!
  baseAnnouncementTotal: Int
  baseAnnouncementCount: Int!
  annUrlsCsvFileUrl: String
  isEmailSent: Boolean
}

enum AnnouncementJobState {
  COMPLETE
  CREATING_ANNOUNCEMENTS
  PARSING_CSV
  RETRIEVING_MERCHANTS
  NEW
  DOWNLOADING_CSV
}

enum AnnouncementJobType {
  STATIC_TEXT
  DYNAMIC_TEXT
}

type AnnouncementListSchema {
  announcements: [AnnouncementSchema!]
  count: Int
}

enum AnnouncementLocale {
  LOCALE_UNSPECIFIED
  LOCALE_EN
  LOCALE_CN
  LOCALE_PT_BR
  LOCALE_ES_LA
  LOCALE_FR_FR
  LOCALE_DE_DE
  LOCALE_IT_IT
  LOCALE_JA_JP
  LOCALE_KO_KR
}

type AnnouncementMutations {
  admin: AnnouncementAdminMutations
}

type AnnouncementOptionsSchema {
  types: [AnnouncementType!]
  audienceGroups: [AnnouncementAudienceGroup!]
}

enum AnnouncementProgram {
  PROGRAM_UNSPECIFIED
  PROGRAM_ADVANCED_LOGISTICS
  PROGRAM_EPC
  PROGRAM_FBW_FBS
  PROGRAM_MERCHANT_STANDING
  PROGRAM_PARTIAL_REFUNDS
  PROGRAM_PRODUCT_BOOST
  PROGRAM_RETURNS_PROGRAM
  PROGRAM_WISH_EXPRESS
  PROGRAM_WISHPOST
  PROGRAM_MERCHANT_FUNDED_PROMOTIONS
  PROGRAM_VIDEOS
  PROGRAM_WISH_STANDARDS
}

type AnnouncementProgramSchema {
  type: MerchantAnnouncementProgram!
  text: String!
}

type AnnouncementProgramSchemaV2 {
  type: AnnouncementProgram!
  text: String!
}

type AnnouncementSchema {
  id: ObjectIdType!
  type: AnnouncementType!
  publishDate: Datetime
  expiryDate: Datetime
  audienceSourceType: AnnouncementAudienceSourceType!
  audienceGroups: [AudienceGroup!]
  merchantIds: [ObjectIdType!]
  merchants(limit: Int = 20, offset: Int = 0): [UserSchema!]
  contentType: AnnouncementContentType
  content: [AnnouncementContentSchema!]!
  sender: UserSchema!
  state: AnnouncementState!
  userAnnouncementCount: Int!
  overrideEmailPreference: Boolean!
  sourceS3FileName: String
  sourceS3FileUrl: String
  categories: [AnnouncementCategory!]!
  program: AnnouncementProgram!
  locales: [AnnouncementLocale!]!
}

enum AnnouncementState {
  ANNOUNCEMENT_STATE_UNSPECIFIED
  ANNOUNCEMENT_STATE_NEW
  ANNOUNCEMENT_STATE_DOWNLOADING_CSV
  ANNOUNCEMENT_STATE_PARSING_CSV
  ANNOUNCEMENT_STATE_RETRIEVING_MERCHANTS
  ANNOUNCEMENT_STATE_CREATING
  ANNOUNCEMENT_STATE_COMPLETE
  ANNOUNCEMENT_STATE_UPDATE
  ANNOUNCEMENT_STATE_UPDATING
}

enum AnnouncementType {
  ANNOUNCEMENT_TYPE_UNSPECIFIED
  ANNOUNCEMENT_TYPE_SYSTEM_UPDATE
  ANNOUNCEMENT_TYPE_BD_ANNOUNCEMENT
}

type AnnouncementsForUsersV2Schema {
  list(announcementType: AnnouncementType! = 1, limit: Int = 10, offset: Int = 0): [MerchantAnnouncementV2Schema!]
  single(announcementId: ObjectIdType!): MerchantAnnouncementV2Schema
}

type AnnouncementsService {
  admin: AnnouncementAdmin
  forUsers(announcementType: MerchantAnnouncementType! = 1, limit: Int = 10, offset: Int = 0): [MerchantAnnouncementSchema!]
  forUsersV2: AnnouncementsForUsersV2Schema
}

type ApproveTrademarks {
  ok: Boolean!
  message: String
}

input ApproveTrademarksInput {
  brandInfoId: ObjectIdType!
  trademarkIds: [ObjectIdType!]!
  newBrandId: ObjectIdType
}

type Area {
  value(targetUnit: AreaUnit): Float!
  unit: AreaUnit!
}

input AreaInput {
  value: Float!
  unit: AreaUnit!
}

enum AreaUnit {
  SQUARE_METER
  SQUARE_FOOT
}

enum AttributeConfigEntryMode {
  SINGLE_SELECTION
  FREE_TEXT
  MULTI_SELECTION
}

type AttributeConfigSchema {
  attributeField: String!
  attributeValues: [String!]
  maxMultiSelect: Int
  description: String!
  entryMode: AttributeConfigEntryMode!
}

enum AttributeDataType {
  ATTRIBUTE_DATA_TYPE_UNSPECIFIED
  ATTRIBUTE_DATA_TYPE_DATE
  ATTRIBUTE_DATA_TYPE_NUMBER
  ATTRIBUTE_DATA_TYPE_STRING
  ATTRIBUTE_DATA_TYPE_STRING_ARRAY
}

enum AttributeDataTypeFormat {
  ATTRIBUTE_DATA_TYPE_FORMAT_UNSPECIFIED
  ATTRIBUTE_DATA_TYPE_FORMAT_DATE_YYYY
  ATTRIBUTE_DATA_TYPE_FORMAT_DATE_YYYY_MM
  ATTRIBUTE_DATA_TYPE_FORMAT_DATE_YYYY_MM_DD
  ATTRIBUTE_DATA_TYPE_FORMAT_NUMBER_INT32
  ATTRIBUTE_DATA_TYPE_FORMAT_NUMBER_DOUBLE
}

type AttributeExtractionTagSubmissionSchema {
  tagger: UserSchema!
  submissionDatetime: Datetime!
  attributeExtractionResult: [AttributeFieldTagResultSchema!]!
}

type AttributeExtractionTaggerJobSchema {
  jobId: ObjectIdType!
  taskId: String!
  jobType: AttributeExtractionTaggerJobType!
  attributeConfigs: [AttributeConfigSchema!]!
  text: String!
  productId: ObjectIdType
  productTitle: String
  productDescription: String
  productImageUrls: [String!]
  query: String
  tagSubmissions: [AttributeExtractionTagSubmissionSchema!]
  preloadingResult: [AttributeFieldTagResultSchema!]
}

enum AttributeExtractionTaggerJobType {
  QUERY
  PRODUCT
}

type AttributeFieldTagResultSchema {
  attributeField: String!
  annotationResult: [String!]!
}

input AttributeInput {
  id: Int
  name: String
  value: [AttributeValueInput!]
}

enum AttributeLevel {
  ATTRIBUTE_LEVEL_UNSPECIFIED
  ATTRIBUTE_LEVEL_PRODUCT
  ATTRIBUTE_LEVEL_VARIANT
}

enum AttributeMode {
  ATTRIBUTE_MODE_UNSPECIFIED
  ATTRIBUTE_MODE_FREE_TEXT
  ATTRIBUTE_MODE_SINGLE_SELECTION_ONLY
  ATTRIBUTE_MODE_MULTI_SELECTION_ONLY
}

enum AttributeUsage {
  ATTRIBUTE_USAGE_UNSPECIFIED
  ATTRIBUTE_USAGE_OPTIONAL
  ATTRIBUTE_USAGE_RECOMMENDED
  ATTRIBUTE_USAGE_REQUIRED
}

input AttributeValueInput {
  id: Int
  value: String
}

enum AudienceGroup {
  AUDIENCE_GROUP_UNSPECIFIED
  AUDIENCE_GROUP_ACCENTURE_TAGGER_LEAD
  AUDIENCE_GROUP_ACCENTURE_TAGGER_WORKER
  AUDIENCE_GROUP_ACCENTURE_DETAIL_LEAD
  AUDIENCE_GROUP_ACCENTURE_DETAIL_WORKER
  AUDIENCE_GROUP_ACCENTURE_WORKER
  AUDIENCE_GROUP_ALORICA_LEAD
  AUDIENCE_GROUP_ALORICA_WORKER
  AUDIENCE_GROUP_BRAND_PROTECTION_WORKER
  AUDIENCE_GROUP_CS_REP_INTERNAL
  AUDIENCE_GROUP_IN_HOUSE_TAGGER
  AUDIENCE_GROUP_TELEPERFORMANCE_LEAD
  AUDIENCE_GROUP_TELEPERFORMANCE_WORKER
  AUDIENCE_GROUP_TELEPERFORMANCE_BOGOTA_LEAD
  AUDIENCE_GROUP_TELEPERFORMANCE_BOGOTA_WORKER
  AUDIENCE_GROUP_TRANSCOSMOS_LEAD
  AUDIENCE_GROUP_TRANSCOSMOS_WORKER
  AUDIENCE_GROUP_ALL_MERCHANTS
  AUDIENCE_GROUP_CN_MERCHANTS
  AUDIENCE_GROUP_NON_CN_MERCHANTS
  AUDIENCE_GROUP_ERP_PARTNERS
  AUDIENCE_GROUP_WISHEXPRESS_MERCHANTS
  AUDIENCE_GROUP_MERCHANT_PLUS_MERCHANTS
  AUDIENCE_GROUP_SPECIFIC_MERCHANT_IDS
  AUDIENCE_GROUP_LOCAL_STORES
}

enum AudioGenre {
  LATIN
  HIP_HOP
  ELECTRONICA_DANCE
  CLASSICAL
  COUNTRY
  WORLD_COUNTRIES
  POP
  FUNK
  ROCK
  ACOUSTIC
  BLUES
  COMEDY
  RNB_SOUL
  CHILDREN
  FILM
}

enum AudioMoodEmotion {
  FUNNY
  CHASING
  RESTLESS
  ANGRY
  HOPEFUL
  DARK
  DREAMY
  BUSY_FRANTIC
  FLOATING
  MARCHING
  ROMANTIC
  SMOOTH
  EUPHORIC
  SAD
  LOUNGE
  ELEGANT
  QUIRKY
  HAPPY
  SCARY
  GLAMOROUS
  SENTIMENTAL
  RELAXING
  LAID_BACK
  MYSTERIOUS
  SEXY
  WEIRD
  COUNTRYSIDE
  ECCENTRIC
  INDUSTRY
  SPORTS_ARENA
  RUNNING
  CHANGING_TEMPO
  PEACEFUL
  HEAVY_PONDEROUS
  SUSPENSE
  EPIC
  SUNNY_HOLIDAY
}

enum AudioProductCategory {
  MEN_CLOTHING
  FASHION
  FLOOR_CARE
  HOME_DECOR
  WOMEN_CLOTHING
  MAKEUP_BEAUTY
  AUTOMOTIVE
  SHOES
  ACCESSORIES
  WATCHES
  SMALL_APPLIANCES
  GADGETS
  WALLETS_BAGS
  HEALTH_WELLNESS
  HOBBIES
  BABY_KIDS
  PHONE_UPGRADES
  HOUSEHOLD_SUPPLIES
}

enum AuthType {
  MERCHANT
  WISH
}

type AuthenticationMutations {
  merchantSignup(input: MerchantSignupInput!): MerchantSignupMutation
  merchantSignupSendPhoneVerification(input: MerchantSignupSendPhoneVerificationInput!): MerchantSignupSendPhoneVerificationMutation
  merchantLeadSubmission(input: MerchantLeadSubmissionInput!): MerchantLeadSubmissionMutation
  mmsLeadSubmission(input: MMSLeadSubmissionInput!): MMSLeadSubmissionMutation
  login(input: LoginMutationInput!): LoginMutation
  logout: LogoutMutation
  notifyPasswordRecovery(input: NotifyPasswordRecoveryMutationInput!): NotifyPasswordRecoveryMutation
  resetPassword(input: ResetPasswordMutationInput!): ResetPasswordMutation
  loginAs: LoginAsMutations
  gen2faCode(input: TwoFactorGenTokenInput!): TwoFactorGenTokenMutation
  genWechatQr(input: GenWechatQrInput!): GenWechatQrMutation
  checkWechatScan(input: WechatCheckScanInput!): WechatCheckScanMutation
}

type AuthenticationServiceSchema {
  showCaptchaOnSignup: Boolean!
  passwordEvaluation(password: String!): PasswordEvaluation!
  shopifyOnboardingAuthInfo: ShopifyOnboardingAuthInfo!
  merchantInviteInfo(invite: String): MerchantInviteInfo
  salesforceLeadInfo(salesforceLeadId: String): SalesforceLeadInfo
  bdSignupCodeInfo(bdSignupCode: String): BdSignupCodeInfo
  storeCategories: [String!]!
  countriesWeShipTo: [Country!]!
}

type AuthorizeReturn {
  ok: Boolean!
  message: String
}

input AuthorizeReturnInput {
  orderId: ObjectIdType!
  returnTrackingId: String!
  returnShippingCarrier: String!
  prepaidReturnLabelUrl: String!
  prepaidReturnLabelFilename: String!
}

enum BDAudienceInput {
  ALL
  MERCHANT_IDS
}

input BDBaseAnnouncementInput {
  title: String!
  message: String!
  expiryDate: DatetimeInput
  merchantIds: [ObjectIdType!]
  audienceType: BDAudienceInput
  publishDate: DatetimeInput!
}

enum BDMerchantCountryCodeType {
  CN
  KR
  SG
  JP
  US
  HK
  VN
  BR
  TW
  EU
  MY
  MX
}

type BalanceTransactionRecord {
  id: ObjectIdType!
  balanceBeforeUpdate: CurrencyValue!
  balanceAfterUpdate: CurrencyValue!
  dateCreated: Datetime!
  transactionAmount: CurrencyValue!
  campaignId: ObjectIdType
  productId: ObjectIdType
  updatedReason: BalanceUpdateReason!
  updateReasonDescription: String!
  receiptId: ObjectIdType
}

enum BalanceUpdateReason {
  REFUND
  PAYMENT_BY_CREDITS
  ISSUING_CREDITS
}

type BankAccountDocumentSchema {
  id: ObjectIdType!
  documentFile: MerchantFileSchema
  last4Digits: String!
  uploadedAt: Datetime!
  state: BankAccountVerificationStatus!
  stateReason: BankAccountVerificationStatusReason
  comment: String
  documentType: BankAccountDocumentType
  reviewedAt: Datetime
  reviewer: UserSchema
}

enum BankAccountDocumentType {
  UNIDENTIFIED
  BANK_STATEMENT
  BANK_ACCOUNT_CERTIFICATE
  BANK_ACCOUNT_CARD
}

type BankAccountVerificationMerchantMutations {
  uploadDocument(input: UploadBankAccountDocumentInput!): UploadBankAccountDocument!
}

type BankAccountVerificationReviewerMutations {
  reviewDocument(input: ReviewBankAccountDocumentInput!): ReviewBankAccountDocument
}

type BankAccountVerificationSchema {
  id: ObjectIdType!
  state: BankAccountVerificationStatus!
  stateReason: BankAccountVerificationStatusReason
  lastReviewedAt: Datetime
  lastUploadedAt: Datetime
  bankAccountDocuments: [BankAccountDocumentSchema!]
  dueDate: Datetime
}

enum BankAccountVerificationStatus {
  SUBMITTED
  REJECTED
  APPROVED
  PENDING
}

enum BankAccountVerificationStatusReason {
  MISMATCH_LAST_FOUR_DIGITS
  PARTIAL_IMAGE
  BLURRY_IMAGE
  UNQUALIFIED_BANK_DOCUMENT
  APPROVE
  INVALID_DOCUMENT
}

type BdSignupCodeInfo {
  valid: Boolean!
  bdName: String
  hasPromotion: Boolean
  useMarketingTransactionBonus: Boolean
}

scalar BigInt

enum BlurredInformationCategory {
  BLURRED_WATERMARKS
  BLURRED_OR_CENSORED_TAGS
  BLURRED_OR_CENSORED_LOGOS
}

type BonusBudgetSchema {
  isBonusBudgetCampaign: Boolean!
  bonusBudgetRate: Float!
  bonusBudget: CurrencyValue!
  usedBonusBudget: CurrencyValue!
  bonusBudgetType: MarketingBonusBudgetType!
  eligibleBonusBudgetType: MarketingBonusBudgetType!
}

type BrandAuthorizationSchema {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  brand: BrandSchema!
  state: BrandAuthorizationState!
}

enum BrandAuthorizationState {
  EXPIRED
  NOT_APPROVED
  PENDING_MERCHANT
  CLOSED
  PENDING_ADMIN
  APPROVED
  PENDING
}

enum BrandCategoryCode {
  FASHION
  BEAUTY
  KID_TOYS_OR_GAME
  MEDIA
  SPORTS
  SHOE
  MOTOR
  COPYRIGHTED_IMAGES
  BRANDED_ACCESSORIES
  ELECTRONIC
  LUXURY_WELL_KNOWN
}

type BrandEnrollmentMutations {
  createBrandEnrollmentRequest(input: CreateBrandEnrollmentInput): CreateBrandEnrollmentRequest
  addTrademark(input: AddTrademarkInput): AddTrademark
  deleteBrandEnrollment(input: DeleteBrandEnrollmentInput): DeleteBrandEnrollment
}

type BrandManagement {
  brands(brandIds: [ObjectIdType!], brandName: String, offset: Int = 0, count: Int = 50, hideDeleted: Boolean = true, brandTypes: [BrandTypeCode!]): [BrandSchema!]!
  numBrands(brandIds: [ObjectIdType!], brandName: String, hideDeleted: Boolean = true, brandTypes: [BrandTypeCode!]): Int!
  canManageBrands: Boolean!
  canManageBrandToProduct: Boolean!
}

type BrandMutations {
  everc: EverCBrandMutations
  injunctionMerchantFreeze: InjunctionMerchantFreezeMutations
}

type BrandPartnerAdmin {
  brandPartners(count: Int = 10, offset: Int = 0, brandName: String, email: String, brandPartnerId: String, trademarkStates: [BrandPartnerTrademarkState!], brandPartnerStates: [BrandPartnerState!]): [BrandPartnerInfoSchema!]!
  numBrandPartners(brandName: String, email: String, brandPartnerId: String, trademarkStates: [BrandPartnerTrademarkState!], brandPartnerStates: [BrandPartnerState!]): Int!
  brandEnrollments(count: Int = 10, offset: Int = 0, brandName: String, email: String, brandPartnerId: String, brandInfoId: String, trademarkStates: [BrandPartnerTrademarkState!]): [BrandPartnerBrandInfoSchema!]!
  numBrandEnrollments(brandName: String, email: String, brandPartnerId: String, brandInfoId: String, trademarkStates: [BrandPartnerTrademarkState!]): Int!
}

type BrandPartnerAdminMutations {
  disableBrandPartner(input: DisableBrandPartnerInput!): DisableBrandPartner
  approveTrademarks(input: ApproveTrademarksInput!): ApproveTrademarks
  rejectTrademarksAndBrandInfo(input: RejectTrademarksAndBrandInfoInput!): RejectTrademarksAndBrandInfo
  editTrademarksAndBrandInfo(input: EditTrademarksAndBrandInfoInput!): EditTrademarksAndBrandInfo
}

type BrandPartnerAuthenticationMutations {
  sendPasswordResetEmail(input: BrandPartnerSendPasswordResetEmailInput!): BrandPartnerSendPasswordResetEmail
  resetPassword(input: BrandPartnerResetPasswordInput!): BrandPartnerResetPassword
}

type BrandPartnerBrandInfoSchema {
  id: ObjectIdType!
  brandPartnerId: ObjectIdType!
  isNewBrand: Boolean!
  confirmedBrandId: ObjectIdType
  confirmedBrand: BrandSchema
  state: BrandPartnerBrandState!
  brandOwnerName: String!
  email: String!
  phoneNumber: String!
  brandRepName: String!
  brandRepTitle: String!
  proposedBrandId: ObjectIdType
  providedBrandName: String!
  providedBrandWebsite: String
  providedBrandLogo: MerchantFileSchema
  providedBrandAdditionalInfo: String
  authorizationProofs: [MerchantFileSchema!]!
  rejectionReason: String
  enrollmentDate: Datetime!
  trademarks(offset: Int = 0, count: Int = 5, states: [BrandPartnerTrademarkState!]): [BrandPartnerTrademarkInfoSchema!]!
  numTrademarks(states: [BrandPartnerTrademarkState!]): Int!
}

enum BrandPartnerBrandState {
  REJECTED
  APPROVED
  PENDING
}

type BrandPartnerChangeUserInfo {
  ok: Boolean!
  message: String
}

input BrandPartnerChangeUserInfoInput {
  brandPartnerId: ObjectIdType
  firstName: String
  lastName: String
  professionalTitle: String
  companyName: String
  streetAddress1: String
  streetAddress2: String
  city: String
  state: String
  countryCode: String
  zipcode: String
  phoneNumber: String
  currentPassword: String
  newPassword: String
  email: String
  internalNote: String
}

type BrandPartnerCountryAndRegion {
  code: BrandPartnerCountryAndRegionCode!
  name: String!
}

enum BrandPartnerCountryAndRegionCode {
  BE
  FR
  BG
  BA
  HR
  DE
  JP
  HU
  MK
  BR
  FI
  DK
  PR
  NL
  PT
  NO
  TR
  LT
  LI
  LV
  NZ
  LU
  ES
  PE
  MT
  RO
  AE
  IS
  PL
  CH
  CO
  GR
  CN
  CL
  EE
  VI
  CA
  ZA
  AL
  CZ
  AR
  AU
  GB
  EU
  CR
  AD
  IE
  GI
  ME
  MD
  MC
  UA
  IL
  RS
  US
  SK
  KR
  SI
  SM
  IT
  SG
  MX
  SE
  AT
}

type BrandPartnerInfoSchema {
  id: ObjectIdType!
  isBrandPartnerV2: Boolean!
  brandPartnerName: String!
  firstName: String
  lastName: String
  lastUpdated: Datetime!
  internalNote: String
  professionalTitle: String
  companyName: String
  email: String!
  phoneNumber: String
  businessAddress: AddressSchema
  state: BrandPartnerState!
  brandInfos(brandNameQuery: String, brandInfoIdQuery: String, offset: Int = 0, count: Int = 10, states: [BrandPartnerBrandState!]): [BrandPartnerBrandInfoSchema!]!
  numBrandInfos(brandNameQuery: String, states: [BrandPartnerBrandState!]): Int!
  onboarding: BrandPartnerOnboardingSchema!
  takedownRequests(offset: Int = 0, count: Int = 10, reportIdQuery: String, brandNameQuery: String, states: [TakedownRequestState!]): [TakedownRequestSchema!]!
  numTakedownRequests(reportIdQuery: String, brandNameQuery: String, states: [TakedownRequestState!]): Int!
}

type BrandPartnerMutations {
  takedownRequest: TakedownRequestMutations
  brandEnrollmentMutations: BrandEnrollmentMutations
  user: BrandPartnerUserMutations
  authentication: BrandPartnerAuthenticationMutations
  admin: BrandPartnerAdminMutations
}

type BrandPartnerOnboardingSchema {
  steps(completed: Boolean): [BrandPartnerOnboardingStep!]!
  numStepsLeft: Int!
  numStepsCompleted: Int!
  numSteps: Int!
}

type BrandPartnerOnboardingStep {
  name: BrandPartnerOnboardingSteps!
  title: String!
  description: String!
  ctaText: String!
  ctaLink: String!
  illustration: String
  completed: Boolean!
}

enum BrandPartnerOnboardingSteps {
  CONFIRM_EMAIL
  ENROLL_BRAND
}

type BrandPartnerResetPassword {
  ok: Boolean!
  message: String
  email: String
}

input BrandPartnerResetPasswordInput {
  password: String!
  token: String!
  tfaToken: String
}

type BrandPartnerSendPasswordResetEmail {
  ok: Boolean!
  message: String
}

input BrandPartnerSendPasswordResetEmailInput {
  email: String!
}

enum BrandPartnerState {
  PENDING_PHONE
  REJECTED
  PENDING_EMAIL
  PENDING_REVIEW
  ACTIVE
  PENDING
}

input BrandPartnerTrademarkInfoInputObject {
  trademarkName: String!
  location: BrandPartnerCountryAndRegionCode!
  trademarkType: BrandPartnerTrademarkType!
  registrationNumber: String!
  registrationUrl: String
  registrationDocs: [FileInput!]!
}

type BrandPartnerTrademarkInfoSchema {
  id: ObjectIdType!
  brandPartnerId: ObjectIdType!
  brandInfoId: ObjectIdType!
  brandId: ObjectIdType
  state: BrandPartnerTrademarkState!
  location: BrandPartnerCountryAndRegion!
  trademarkName: String!
  trademarkType: BrandPartnerTrademarkType!
  registrationNumber: String!
  registrationUrl: String
  registrationDocs: [MerchantFileSchema!]!
  rejectionReason: String
  enrollmentDate: Datetime!
}

enum BrandPartnerTrademarkState {
  REJECTED
  APPROVED
  PENDING
}

enum BrandPartnerTrademarkType {
  OTHER
  WORDMARK
  DESIGNMARK
}

type BrandPartnerUserMutations {
  changeUserInfo(input: BrandPartnerChangeUserInfoInput!): BrandPartnerChangeUserInfo
}

type BrandProtection {
  injunctionMerchantFreezes(imfIds: [ObjectIdType!], merchantIds: [ObjectIdType!], troNumbers: [Int!], state: [InjunctionMerchantFreezeState!], freezeTypes: [InjunctionMerchantFreezeType!], fineIds: [ObjectIdType!], legalStartDateUnix: Int, legalEndDateUnix: Int, updatedStartDateUnix: Int, updatedEndDateUnix: Int, offset: Int = 0, count: Int = 50): [InjunctionMerchantFreezeSchema!]!
  numInjunctionMerchantFreezes(imfIds: [ObjectIdType!], merchantIds: [ObjectIdType!], troNumbers: [Int!], state: [InjunctionMerchantFreezeState!], freezeTypes: [InjunctionMerchantFreezeType!], fineIds: [ObjectIdType!], legalStartDateUnix: Int, legalEndDateUnix: Int, updatedStartDateUnix: Int, updatedEndDateUnix: Int): Int!
  canManageFreezes: Boolean!
}

type BrandProtectionConstants {
  holidayMessage: String!
}

enum BrandReach {
  INTERNATIONAL
  REGIONAL
  LOCAL
  ONLINE
}

enum BrandRegistrationCountry {
  US
  EU
  Japan
  Others
}

type BrandSchema {
  id: ObjectIdType!
  name: String!
  displayName: String!
  brandTypes: [BrandType!]
  isTrueBrand: Boolean!
  logoUrl: String
  logoAspectRatio: Float!
  brandUrl: String
  isAdult: Boolean!
  isActive: Boolean!
  ipViolationCategory: IPViolationBrandCategory
  severity: BrandSeverity
  keywords: [String!]
  autoApproveMerchantIds: [ObjectIdType!]
  numTaggedProducts: Int
  brandProductTags: [TrueTagSchema!]
  minimumPrice: CurrencyValue
  brandReach: BrandReach
  counterfeitRiskLevel: CounterfeitRiskLevel
  brandOwnerEntityCountry: Country
  manufacturingCountry: Country
  internalNote: String
  evercBrands: [EverCBrandSchema!]
}

type BrandServiceSchema {
  brandManagement: BrandManagement
  trueBrands(brandIds: [ObjectIdType!], brandName: String, queryString: String, offset: Int = 0, count: Int = 50, sort: BrandSort): [BrandSchema!]!
  acceptedTrademarkCountries(usePriorityOrdering: Boolean = false): [TrademarkCountryCode!]!
  brandPartnerTrademarkLocations: [BrandPartnerCountryAndRegion!]!
  brandPartnerAdmin: BrandPartnerAdmin
  brandAuthorizations(offset: Int = 0, limit: Int = 0, merchantId: ObjectIdType, id: ObjectIdType, states: [BrandAuthorizationState!]): [BrandAuthorizationSchema!]
  brandProtection: BrandProtection
}

enum BrandSeverity {
  HIGH
  MEDIUM
  LOW
}

input BrandSort {
  field: BrandSortField!
  order: SortOrderType!
}

enum BrandSortField {
  ID
  NAME
}

type BrandType {
  brandType: BrandTypeCode!
  displayName: String!
}

enum BrandTypeCode {
  DEFAULT
  TRUE_BRAND
  TRO
  COPYRIGHT_IMAGE
  BRAND_OF_INTEREST
}

type BrandedMerchantLifeTimeStatsObjectSchema {
  gmv: CurrencyValue!
  cost: CurrencyValue!
  orders: Int!
  feedImpressions: Int!
  quantitiesSold: Int!
}

type BrandingSchema {
  brands(brandIds: [String!]): [MerchantBrandSchema!]!
  latestDateWithBrandData: Datetime
}

enum BulkMerchantWarningAction {
  DECLINE
  REVERSE
  CONFIRM
  DECLINE_AND_CLOSE
  APPROVE
  DELETE
}

input BulkReviewInput {
  merchantIds: [ObjectIdType!]!
  reviewState: SanctionScreeningHitStateType!
  reviewComment: String!
  pausedImpressionState: Boolean
}

type BulkReviewMutation {
  ok: Boolean!
  updatedIds: [ObjectIdType!]!
  totalToUpdate: Int!
  successfullyUpdated: Int!
  errorMessage: String
}

type BulkUpsertMerchantWarning {
  ok: Boolean!
  message: String
}

input BulkUpsertMerchantWarningInput {
  action: BulkMerchantWarningAction!
  warningIds: [ObjectIdType!]!
  message: String
  comment: String
}

enum BusinessDocTypes {
  TAX_FORM_W_9
  OFFICIAL_BANK_STATEMENT
  RECENT_BUSINESS_RETURNS
  SHARE_ALLOCATION_CERTIFICATE
  CERTIFICATE_OF_INCORPORATION
  TAX_FORM
  CREDIT_CARD_STATEMENT
  TAX_FORM_W9
  UTILITY_BILL_STATEMENT
  GOVERNMENT_ISSUED_BUSINESS_LICENSE
  ENTITY_TRADING_NAME
  ARTICLES_OF_INCORPORATION
  TAX_FORM_W_8
  TAX_FORM_W8_BEN_E
  PRODUCT_LICENSING
  TAX_FORM_W8_BEN
}

enum BuyerFraudReasonCategory {
  MERCHANT_REPORTED_SUSPICIOUS_SHIPPING_LOCATION
  MERCHANT_REPORTED_POLICY_ABUSE
  MERCHANT_REPORTED_OTHER
  MERCHANT_REPORTED_SUSPICIOUS_QUANTITY_OR_PAYMENT
}

input ByUserIdInput {
  id: ObjectIdType!
}

type ByUserIdMutation {
  ok: Boolean!
  error: String
  sessionKey: String
}

type CATaxConstants {
  marketplaceProvinces: [String!]!
  pstQstProvinces: [String!]!
}

type CSPerformanceStats {
  startDate: Datetime!
  endDate: Datetime!
  lateResponseRate30d: Float
  customerSatisfactionScore: Float
  averageTicketResponseTime: Timedelta
  gmv: CurrencyValue!
  orders: Int
  orders30d: Int
  refund30d: Int
  refundRatio30d: Float
  orders93d: Int
  refund93d: Int
  refundRatio93d: Float
  chargeback: Int
  chargebackRatio: Float
  chargebackAmount: CurrencyValue!
  chargebackAmountRatio: Float
  tickets: Int
  ticketRatio: Float
  customerSatisfaction: Float
  averageRating30d: Float
}

type CSVAnnouncementSchema {
  validate(messageTemplateEn: String!, messageTemplateCn: String, csvFileUrl: String!, contentType: AnnouncementContentType! = 1): CSVValidationSchema
}

enum CSVExportFilterType {
  UNCONFIRMED_TRACKING
  SHIPPED
  NO_TRACKING
  REFUNDED
  REFUNDED_BY_WISH
  FBW
  FBS
}

type CSVProductImportJobDetailSchema {
  id: ObjectIdType!
  startTime: Datetime!
  completedTime: Datetime
  fileName: String
  fileLink: String
  feedType: ProductCSVJobType!
  status: String!
  totalCount: Int!
  aliveCount: Int!
  errorsCount: Int!
  processingCount: Int!
  underReviewCount: Int!
  noChangesCount: Int!
}

type CSVProductImportJobSchema {
  id: ObjectIdType!
  feedType: ProductCSVJobType!
  startTime: Datetime!
  status: MerchantFeedJobStatus!
  totalRows: Int!
  processedCount: Int!
  errorCount: Int!
  addedCount: Int!
  updatedCount: Int!
  fpApprovedCount: Int!
  fpBlockedCount: Int!
  csvUrl: String
  fileName: String
}

type CSVProductImportJobSchemaV2 {
  id: ObjectIdType!
  startTime: Datetime!
  completedTime: Datetime
  fileName: String
  feedType: ProductCSVJobType!
  status: String
  version: Int
}

type CSVValidationSchema {
  errors: String
  previewData: JSONString
  placeholderKeys: [String!]
  midCount: Int
  columnMapping: [CsvColumnMappingEntrySchema!]!
}

enum CalculatedShippingAccountConfigType {
  ACCOUNT_LEVEL_OFF
  ACCOUNT_LEVEL_ON
  USE_PRODUCT_LEVEL_CONFIG
}

type CampaignEventInfo {
  id: ObjectIdType!
  name: String!
  startTime: Datetime!
  endTime: Datetime!
  submissionDeadline: Datetime!
  minDiscountPercentage: Float!
  productCategoryRestrictions: [TaxonomyCategorySchema!]!
  countries: [Country!]!
  description: String
  promotionType: MFPCampaignPromotionType!
}

input CampaignEventSort {
  field: MFPCampaignEventSortBy!
  order: SortOrderType!
}

type CampaignProductSchema {
  productId: ObjectIdType!
  product: ProductSchema
  keywords: [String!]!
  isMaxboost: Boolean!
  brandId: ObjectIdType
}

type CampaignSchema {
  id: ObjectIdType!
  name: String!
  merchant: MerchantSchema!
  state: MarketingCampaignState!
  products: [CampaignProductSchema!]!
  startDate: Datetime!
  endDate: Datetime!
  isEvergreen: Boolean!
  intenseBoost: Boolean!
  maxBudget: CurrencyValue!
  scheduledAddBudget: ScheduledAddBudgetSchema!
  merchantBudget: CurrencyValue!
  merchantId: ObjectIdType!
  localizedCurrency: PaymentCurrencyCode!
  flexibleBudget: FlexibleBudgetSchema!
  bonusBudget: BonusBudgetSchema!
}

input CancelChargeTransactionInput {
  chargeId: String!
}

type CancelChargeTransactionMutation {
  ok: Boolean!
  message: String
}

input CancelInfractionInput {
  reason: CancelReason!
}

type CancelMFPCampaign {
  ok: Boolean!
  message: String
}

input CancelMFPCampaignInput {
  campaignId: ObjectIdType!
  cancelReason: MFPCampaignCancelReason!
  comment: String
}

enum CancelReason {
  ALREADY_DELETED
  POLICY_UPDATE
  WHITE_GLOVE_WISH_X_STRAT_MERCH
  AGENT_ERROR
  INCORRECT_DATA
  OFFENDING_CONTENT_REMOVED
  EXPIRED
  PASSED_AUTHORIZATION_TAGGING
}

type CancelReturn {
  ok: Boolean!
  message: String
}

input CancelReturnInput {
  orderId: ObjectIdType!
  cancelReason: ReturnRequestCancelReason!
  message: String!
  otherReasonExplanation: String
  supportingDocument: String
}

type CancelWFPWithholdMutation {
  ok: Boolean!
  message: String!
  orderId: String
  merchantId: String
}

input CancelWFPWithholdMutationInput {
  orderId: ObjectIdType!
  cancelTicket: String!
  cancelReason: String
}

input CancelWPSTrackingIDInput {
  orderId: ObjectIdType!
}

type CancelWPSTrackingIDMutation {
  ok: Boolean!
  wpsShipmentId: String
  errorMessage: String
}

type CannedResponseCategorySchema {
  id: ObjectIdType!
  name: String!
}

enum CannedResponseFeature {
  TICKET
  FRAUD
  WARNING
  TRACKING_DISPUTE
  DISPUTE
}

type CannedResponseHub {
  cannedResponseCategoriesCount(feature: CannedResponseFeature!, locale: Locale): Int
  cannedResponseCategories(feature: CannedResponseFeature!, locale: Locale): [CannedResponseCategorySchema!]
  cannedResponsesCount(category: ObjectIdType, feature: CannedResponseFeature, locale: Locale, isRefund: Boolean, canRePurchase: Boolean): Int
  cannedResponses(category: ObjectIdType, feature: CannedResponseFeature!, locale: Locale, isRefund: Boolean, canRePurchase: Boolean): [CannedResponseSchema!]
  filledCannedResponseText(searchType: FilledCannedResponseSearchType, searchId: ObjectIdType!, cannedResponseId: ObjectIdType!): FilledCannedResponseTextSchema
}

type CannedResponseSchema {
  id: ObjectIdType!
  name: String!
}

type CartPriceDetailSchema {
  productPrice(includeTax: Boolean = true, forMmrpRefund: Boolean = false): CurrencyValue
  shippingPrice(includeTax: Boolean = true, forMmrpRefund: Boolean = false): CurrencyValue
  total: CurrencyValue
}

enum CategorizationSource {
  MANUAL_OVERRIDE_TOOL
  HUMAN_LABELED
  INFERENCE_MODEL
  MERCHANT_SPECIFIED
  MONGO_BACK_FILL
  DISPUTE
}

type CategoryClassificationTaggerJobSchema {
  jobId: ObjectIdType!
  title: String!
  description: String!
  imageUrls: [String!]
  treeVersion: String
  merchantGeneratedCategory: TaxonomyCategorySchema
  modelGeneratedCategory: TaxonomyCategorySchema
}

type CategoryEprSchema {
  id: ObjectIdType
  category: Int!
  categoryName: String!
  uin: String
  responsibleEntityName: String
  status: EPRStatus
  inScopePidCount: Int!
}

input ChangeDisplayNameInput {
  displayName: String!
}

type ChangeDisplayNameMutation {
  error: String
  displayName: String
}

input ChangeEmailInput {
  email: String!
  password: String!
}

type ChangeEmailMutation {
  error: String
  passwordOk: Boolean
  email: String
}

type ChangeLocale {
  ok: Boolean!
  message: String
}

input ChangeLocaleInput {
  locale: Locale!
}

input ChangeMFTOptOutInput {
  isOptedOut: Boolean!
}

type ChangeMFTOptOutMutation {
  error: String
  ok: String
}

input ChangePasswordInput {
  curPassword: String
  newPassword: String
}

type ChangePasswordMutation {
  error: String
  passwordOk: Boolean
}

type ChangePhoneNumberMutation {
  sendCode(input: ChangePhoneNumberSendCodeInput!): ChangePhoneNumberSendCodeMutation!
  verifyCode(input: ChangePhoneNumberVerifyCodeInput!): ChangePhoneNumberVerifyCodeMutation!
}

input ChangePhoneNumberSendCodeInput {
  newPhoneNumber: String!
}

type ChangePhoneNumberSendCodeMutation {
  error: String
  sentOk: Boolean!
}

input ChangePhoneNumberVerifyCodeInput {
  newPhoneNumber: String!
  verificationCode: String!
}

type ChangePhoneNumberVerifyCodeMutation {
  error: String
  verifiedOk: Boolean!
}

input ChangePreferredUnitsInput {
  preferredWeightUnit: WeightUnit!
  preferredLengthUnit: LengthUnit!
}

type ChangePreferredUnitsMutation {
  error: String
  ok: Boolean
}

type ChangeShippingProviderStatus {
  ok: Boolean!
  message: String
  shippingProvider: ShippingProviderSchema
}

input ChangeShippingProviderStatusInput {
  providerId: Int!
}

input ChangeVacationSettingsInput {
  startDate: DatetimeInput
  endDate: DatetimeInput
  primaryWarehouseOnly: Boolean!
  vacationMode: Int
}

type ChangeVacationSettingsMutation {
  message: String
  ok: Boolean
}

input ChargeInput {
  chargeId: String!
  chargeProvider: ChargePaymentProviderType
  clientToken: String
  paypalPayerId: String
  paypalPayerEmail: String
  paypalDeviceData: String
}

type ChargeItem {
  type: ChargeItemType!
}

enum ChargeItemType {
  STORE_REGISTRATION_FEE
  PRODUCT_BOOST_CAMPAIGN
}

type ChargeMutation {
  ok: Boolean!
  message: String
}

enum ChargePaymentProviderType {
  NONE
  PAYONEER
  PAYPAL
  UMPAY
}

type ChargeTransactionInfo {
  chargeProvider: ChargePaymentProviderType
  chargeItem: ChargeItem
  currency: PaymentCurrencyCode
  totalAmountInUsd: CurrencyValue
  totalAmount: CurrencyValue
  state: ChargeTransactionState!
  chargeCreatedTime: Datetime!
  chargeReceivedTime: Datetime
  canChangeChargeProvider: Boolean!
  type: ChargeTransactionType!
  clientToken: String
  signupUrl: String
}

enum ChargeTransactionState {
  EXCEPTION
  SUCCEEDED
  REFUNDED
  VOIDED
  FAILED
  NEW
  REQUIRE_REVIEW
  PENDING
}

enum ChargeTransactionType {
  INVOICING
  BUYING
}

enum CheckpointAfterActionState {
  DELETE_FOR_REUSE_API_SUCCESS
  EXCEPTION
  IN_TRANSIT
  ATTEMPT_FAIL
  REACTIVATE_FAIL
  DELETE_SUCCESS
  PENDING
  DELETE_FAIL
  TRACK_END
  DELETE_FOR_REUSE_API_FAIL
  EXPIRED
  MARKED_SHIPPED
  DELIVERED
  TRACKING_CHANGED
  AVAILABLE_FOR_PICKUP
  CANCELLED
  ARRIVE_AT_DEST_COUNTRY
  ORDER_PLACED
  SEND_TRACKING_FAIL
  DELETE_FOR_REUSE_DATA
  ALERT
  OUT_FOR_DELIVERY
  INFO_RECEIVED
  REACTIVATE_SUCCESS
  SEND_TRACKING_SUCCESS
}

type ChromeBadgeSchema {
  badgeType: ChromeBadgeType
  expiryDate: Datetime
}

enum ChromeBadgeType {
  NEW
  BETA
}

type ChromeNodeSchema {
  url: String
  path: String
  label: String
  overviewLabel: String
  badge: ChromeBadgeSchema
  children: [ChromeNodeSchema!]
  nodeid: String
  keywords: [String!]
  description: String
  searchPhrase: String
  showInSideMenu: Boolean
  openInNewTab: Boolean
  totalHits: Int
  mostRecentHit: Datetime
  countSelectors: [String!]
}

type ChromeSchema {
  merchantGraph: ChromeNodeSchema
  merchantGraphString: String
  objectSearch(objectId: ObjectIdType!, currentPath: String): NavigationResultSchema
}

input ClaimInfractionInput {
  warningIds: [ObjectIdType!]
}

type ClaimNotices {
  ok: Boolean!
  message: String
}

input ClaimNoticesInput {
  noticeIds: [ObjectIdType!]!
}

type ClearAllUIState {
  ok: Boolean!
  message: String
}

type ClearUIState {
  ok: Boolean!
  message: String
}

type ClearVacationSettingsMutation {
  ok: Boolean
  message: String
}

enum ClientWritableBucket {
  BRAND_LOGO
  BANK_ACCOUNT_DOCUMENTS
  RACC_SOURCE_ASSETS
  TEMP_UPLOADS
  REGULATOR_REPORT_FILE_UPLOADS
  TEMP_UPLOADS_V2
  PUBLIC_APP_LOGO
  TAX_SETTING_FILE_UPLOADS
}

input CloseInfractionInput {
  warningIds: [ObjectIdType!]
}

enum ColumnCategoryId {
  LOGISTICS
  COUNTRY_SHIPPING
  ADDITIONAL_ITEM_SHIPPING
  PRODUCT_DETAILS
  TTD
}

type ColumnCategorySchema {
  id: ColumnCategoryId!
  name: String!
}

enum CommerceMerchantEUEntityStatus {
  NOT_STARTED
  VALIDATED
  REJECTED
  PENDING_REVIEW
  NOT_ESTABLISHED
}

enum CommerceMerchantReviewStatus {
  FAILED
  NOT_APPLICABLE
  PENDING_ADMIN_REVIEW
  APPROVED
  PENDING_AUTO_REVIEW
}

enum CommerceMerchantState {
  WISH_EXPRESS_ONLY
  PENDING_PHONE
  REQUEST_INFO
  VACATION
  DISABLED
  PENDING_EMAIL
  APPROVED
  PENDING
}

enum CommerceMerchantTaxInfoGermanyNoNumberReason {
  WILL_REGISTER_SOON
  BUYER_IS_IMPORTER_OF_RECORD
}

enum CommerceMerchantTaxInfoStatus {
  OLD_ACTIVE_NEW_PENDING_REVIEW
  INACTIVE
  PENDING_ONESOURCE_SETUP
  ACTIVE
  PENDING_REVIEW
  FAILED_REVIEW
}

enum CommerceProductCondition {
  NEW
  USED
  REFURBISHED
}

enum CommerceProductFPReviewStatus {
  UNDER_REVIEW
  APPROVED
  BLOCKED
}

enum CommerceProductListingState {
  ACTIVE
  MERCHANT_INACTIVE
  REMOVED_BY_MERCHANT
  REMOVED_BY_WISH
  WISH_INACTIVE
}

enum CommerceProductListingStateReason {
  AVAILABLE
  AVAILABLE_AND_PENDING_EDIT
  REMOVED_BY_MERCH
  LISTING_BLOCKED
  NEW_LISTING_UNDER_REVIEW
  MERCH_INACTIVE_AND_BLOCKED_EDIT
  NOT_AVAILABLE
  AVAILABLE_AND_BLOCKED_EDIT
  REMOVED_BY_WISH
  MERCH_INACTIVE
  LISTING_UNDER_REVIEW
  MERCH_INACTIVE_AND_PENDING_EDIT
  NEW_LISTING_BLOCKED
}

enum CommerceProductReviewStatus {
  REJECTED
  APPROVED
  PENDING
}

enum CommerceProductStatus {
  DISABLED
  REMOVED_BY_MERCHANT
  ENABLED
}

enum CommerceTransactionClient {
  ANDROID_INSTANT_APP
  WEB
  WINDOWS_APP
  IOS_APP
  ANDROID_APP
  WINDOWS_PHONE_APP
  IPAD_APP
  MOBILE_WEB
}

enum CommerceTransactionState {
  REQUIRE_REVIEW
  EXCEPTION
  C2C_ACCEPTED
  LABEL_GENERATED
  LABEL_DOWNLOADED
  REFUNDED
  DELAYING
  ACKNOWLEDGED
  GIFT_WAITING_FOR_ACCEPT
  C2C_DELIVERED
  SHIPPED
  C2C_ON_DELIVERY
  PENDING
  APPROVED
  DECLINED
}

enum CommerceTransactionTaxEventType {
  REFUND_SHIPPING
  REFUND_PRICE
  SALE_SHIPPING
  COLORADO_DELIVERY_FEE
  SALE_PRICE
}

enum CommerceTransactionTaxRemitType {
  MERCHANT_REMIT
  WISH_REMIT
  NO_REMIT
  TBD_REMIT
}

type CompleteDisputeReview {
  ok: Boolean!
  message: String
}

input CompleteDisputeReviewInput {
  noticeId: ObjectIdType!
  disputeReviewResponse: String!
}

type CompleteNoticeReview {
  ok: Boolean!
  message: String
}

input CompleteNoticeReviewInput {
  noticeId: ObjectIdType!
  reviewResponse: String!
}

type ConfirmedDeliveryCarriers {
  availableCountries: [Country!]!
  shippingProviders: [ShippingProviderSchema!]!
  availableShippingCountries: [CountryAvailableShippingProviders!]!
  swedenConfirmedDeliveredCarrierTypes: [SwedenConfirmedDeliveredCarrierTypes!]!
}

type ContactBuyer {
  ok: Boolean!
  message: String
}

input ContactBuyerInput {
  orderId: ObjectIdType!
  contactReason: ReturnRequestContactBuyerReason!
  message: String!
  otherReasonExplanation: String
  supportingDocument: String
}

enum ContestWarningType {
  ON_PRODUCT_COMBINED_CANCER_REPRODUCTIVE
  RAW_WOOD
  FOOD
  DEP_PASSENGER_OFF_ROAD_VEHICLE
  CHEMICAL
  DIESEL_ENGINE
  ON_PRODUCT_REPRODUCTIVE
  DEP_RECREATIONAL_VESSEL
  ON_PRODUCT_CANCER
  FURNITURE
}

enum ConversionRate {
  MKL_POLICY
  WISH_LATEST
}

type ConvertToPlus {
  ok: Boolean
}

input ConvertToPlusInput {
  merchantIds: [ObjectIdType!]!
}

type Count {
  value(targetUnit: CountUnit): Float!
  unit: CountUnit!
}

input CountInput {
  value: Float!
  unit: CountUnit!
}

enum CountUnit {
  COUNT
  LOAD
  POD
  ROLL
  WASH
}

enum CounterfeitReasonCode {
  UNLICENSED_MEDIA
  SAFETY_EQUIPMENT
  LIGHTERS
  PROP_MONEY
  GRAPHIC_VIOLENCE
  ILLEGAL_ELECTRONICS
  ANIMAL_PRODUCTS
  BLURRED_WATERMARK
  WISH_ADMIN
  HARMFUL_CHEMICALS
  CN_PROHIBITED_PRODUCTS
  FALSE_ADVERTISING
  RECALLED_TOYS
  CARSEAT
  PLANTS_AND_SEEDS
  UNVERIFIED_MONEY
  WEAPON
  TEAM_LOGO
  PICTURED_WITH_MAJOR_BRAND
  PIERCING_GUN
  ADULT_CONTENT
  PRICE_GOUGING
  SMOKING
  MISLEADING_LISTING
  REGIONAL_RESTRICTIONS
  PRODUCT_MODIFIED
  CENSORED_FACE
  NUDITY
  HATE_CRIME
  BLURRED_LABEL
  MEDICAL_MATERIALS
  AMBIGUOUS_LISTING
  JEWELRY_AND_METALS
  HOVERBOARD
  CELEBRITY_PHOTO
  TRICK_CANDLES
  BLURRED_INFORMATION
  CONSUMPTION_MATERIALS
  HAZARDOUS_MATERIALS
  IS_MAJOR_BRAND
  DISTASTEFUL_CONTENT
  DANGEROUS_ITEMS
  HARNESS
  TATTOO_GUN
  MISLEADING_LISTING_AUTHENTIC_BRAND
  CONTACT_LENSES
  VIRTUAL_GOODS
  BIKE_HELMETS
  PLANT_SEEDS
}

enum CounterfeitRiskLevel {
  HIGH
  MEDIUM
  LOW
}

type CounterfeitViolationSchema {
  isConfirmed: Boolean!
  reason: CounterfeitReasonCode
  reasonDisplayName: String
  reasonExplanation: String
  subcategoryMessage: String
}

type Country {
  code: CountryCode!
  name(localized: Boolean = true): String!
  gmvRank: Int
  regions: [Region!]
  wishExpress: WishExpressCountryDetails!
  restrictedProductRegion: RestrictedProductRegion
  isInEurope: Boolean!
  isFinalSaleAllowed: Boolean!
  hasWishReturnFacility: Boolean!
  isMerchantReturnWishAuthAllowed: Boolean!
  isEuVat: Boolean!
}

input CountryActionInput {
  countryCode: ShippableCountryCode!
  action: CountryActionType!
  data: String
}

enum CountryActionType {
  ADD
  DELETE
  UPDATE
}

type CountryAvailableShippingProviders {
  country: Country!
  providers: [ShippingProviderSchema!]!
}

enum CountryCode {
  BD
  WF
  BF
  BG
  BA
  BB
  BE
  BL
  BM
  BN
  BO
  JP
  BI
  BJ
  BT
  JM
  BV
  JO
  WS
  BQ
  BR
  BS
  JE
  BY
  BZ
  RU
  RW
  RS
  RE
  TM
  TJ
  RO
  TK
  GW
  GU
  GT
  GS
  GR
  GQ
  GP
  BH
  GY
  GG
  GF
  GE
  GD
  GB
  GA
  GN
  GM
  GL
  KW
  GI
  GH
  OM
  TN
  BW
  HR
  HT
  HU
  HK
  HN
  HM
  KR
  AD
  PR
  PS
  PW
  PT
  KN
  PY
  AI
  PA
  PF
  PG
  PE
  PK
  PH
  PN
  PL
  PM
  ZM
  EH
  EE
  EG
  ZA
  EC
  AL
  AO
  KZ
  ET
  ZW
  KY
  ZR
  ER
  ME
  MD
  MG
  MF
  MA
  MC
  UZ
  MM
  ML
  MO
  MN
  MH
  MK
  MU
  MT
  MW
  MV
  MQ
  MP
  UK
  MR
  AU
  UG
  MY
  MX
  MZ
  FR
  AW
  FX
  AF
  AX
  FI
  FJ
  FK
  FM
  FO
  NI
  NL
  NO
  NA
  VU
  NC
  NE
  NF
  NG
  NZ
  ES
  NP
  NR
  NU
  CK
  CI
  CH
  CO
  CN
  CM
  CL
  CC
  CA
  CG
  CF
  CD
  CZ
  CY
  CX
  CR
  CW
  CV
  SZ
  SX
  KG
  KE
  SR
  KI
  KH
  SV
  KM
  ST
  SK
  SJ
  SI
  SH
  SO
  SN
  SM
  SL
  SC
  SB
  SA
  SG
  SE
  SD
  DO
  DM
  DJ
  DK
  DE
  YE
  AT
  DZ
  US
  UY
  YU
  YT
  UM
  TZ
  LC
  LA
  MS
  TW
  TT
  TR
  LK
  TP
  LI
  LV
  TO
  LT
  LU
  LR
  LS
  TH
  TF
  TG
  TD
  TC
  LY
  VA
  VC
  AE
  VE
  AG
  VG
  IQ
  VI
  IS
  AM
  IT
  VN
  AN
  AQ
  AS
  AR
  IM
  IL
  IO
  IN
  LB
  AZ
  IE
  ID
  UA
  QA
  TV
}

type CountryEPRSchema {
  country: Country!
  categoriesWithoutEpr: Int!
  categoriesWithEpr: Int!
  categories: [CategoryEprSchema!]!
  tos: String!
  hasAcceptedTos: Boolean!
}

input CountryShippingInput {
  countryCode: CountryCode!
  enabled: Boolean
  price: CurrencyInput
  additionalPrice: CurrencyInput
  timeToDoor: Int
  regionShipping: [RegionShippingInput!]
}

type CountryShippingSchema {
  country: Country!
  enabled: Boolean!
  price: CurrencyValue
  additionalPrice: CurrencyValue
  regionShipping: [RegionShippingSchema!]
  timeToDoor: Int
  wishExpressTtdRequirement: Int
}

input CountryShippingSetting {
  countryCode: ShippableCountryCode!
  enabled: Boolean!
  price: CurrencyInput
}

input CreateAnnouncementContentSchemaInput {
  locale: AnnouncementLocale!
  title: String!
  message: String!
  link: String
  ctaText: String
  ctaDueDate: DatetimeInput
}

type CreateBDBaseAnnouncement {
  ok: Boolean!
  message: String
}

input CreateBrandEnrollmentInput {
  proposedBrandId: ObjectIdType
  brandOwnerName: String!
  proofOfAuthorizations: [FileInput!]!
  brandRepName: String!
  brandRepTitle: String!
  email: String!
  phoneNumber: String!
  isNewBrand: Boolean!
  providedBrandName: String!
  providedBrandWebsite: String
  providedBrandLogoFile: FileInput
  providedBrandAdditionalInfo: String
  trademarkInfos: [BrandPartnerTrademarkInfoInputObject!]!
}

type CreateBrandEnrollmentRequest {
  ok: Boolean!
  message: String
}

type CreateBulkOneoffAdminToolPayments {
  ok: Boolean!
  message: String
}

input CreateBulkOneoffAdminToolPaymentsInput {
  s3FileUrl: String!
}

input CreateChargeTransactionInput {
  amount: CurrencyInput!
  type: ChargeItemType!
  redirectUrl: String
  flowType: ChargeTransactionType!
}

type CreateChargeTransactionMutation {
  ok: Boolean!
  message: String
  chargeId: ObjectIdType
}

type CreateClaim {
  ok: Boolean!
  message: String
}

input CreateClaimInput {
  orderId: ObjectIdType!
  claimReason: ReturnRequestClaimReason!
  message: String!
  otherReasonExplanation: String
  supportingDocument: String
}

type CreateLQDCampaign {
  ok: Boolean!
  message: String
}

type CreateNotice {
  ok: Boolean!
  message: String
}

input CreateNoticeInput {
  productIds: [ObjectIdType!]!
  notifierName: String!
  notifierOrganization: String
  notifierEmail: String!
  description: String!
  supportFiles: [FileInput!]
}

type CreateNotifier {
  ok: Boolean!
  message: String
}

input CreateNotifierInput {
  notifierType: NotifierType!
  email: String!
  organization: String!
  countryCodes: [CountryCode!]!
  name: String
  isTrustedFlagger: Boolean = false
}

type CreateProductTaxonomyCategoryDispute {
  ok: Boolean!
  productDisputeEligibility: ProductTaxonomyCategoryDisputeEligibilityEnum!
}

input CreateProductTaxonomyCategoryDisputeInput {
  productId: ObjectIdType!
  categoryIdProposed: Int!
  categoryTreeVersion: String!
  supportFiles: [FileInput!]
  merchantNote: String
}

input CreateProductsDownloadJobInput {
  promotionType: MFPCampaignPromotionType!
  eventId: ObjectIdType
}

type CreateProductsDownloadJobMutation {
  jobId: ObjectIdType
  ok: Boolean!
  message: String
}

type CreateShippingPlan {
  ok: Boolean!
  message: String
  shippingPlan: ShippingPlanSchema
}

type CreateShippingProvider {
  ok: Boolean!
  message: String
  shippingProvider: ShippingProviderSchema
}

type CreateSystemUpdateBaseAnnouncement {
  ok: Boolean!
  message: String
}

input CreateSystemUpdateBaseAnnouncementInput {
  publishDate: DatetimeInput
  expiryDate: DatetimeInput
  audienceSourceType: AnnouncementAudienceSourceType!
  audienceGroups: [AudienceGroup!]
  merchantIds: [ObjectIdType!]
  csvFields: AnnouncementCSVFieldsSchemaInput
  overrideEmailPreference: Boolean!
  categories: [AnnouncementCategory!]!
  program: AnnouncementProgram
  locales: [AnnouncementLocale!]!
  contentType: AnnouncementContentType
  content: [CreateAnnouncementContentSchemaInput!]!
}

type CreateTakedownRequest {
  ok: Boolean!
  message: String
  takedownRequestId: ObjectIdType
}

input CreateTakedownRequestInput {
  brandPartnerBrandInfoId: ObjectIdType!
  typeOfInfringement: TypeOfInfringement!
  productIds: [ObjectIdType!]!
  notes: String
}

type CreateUin {
  ok: Boolean!
  message: String
}

input CreateUinInput {
  country: CountryCode!
  category: Int!
  responsibleEntityName: String!
  uin: String!
}

input CreateWhitelistProductsInput {
  merchantId: ObjectIdType
  productIds: [ObjectIdType!]!
}

type CreateWhitelistProductsMutation {
  ok: Boolean!
  invalidProductIds: [String!]
  message: String
}

enum CreditPaymentType {
  IMPRESSION_FEE
  OTHER
  ENROLLMENT_FEE
}

type CreditTransactionRecord {
  id: ObjectIdType!
  dateCreated: Datetime!
  updatedReason: CreditUpdateReason!
  paymentType: CreditPaymentType
  campaignId: ObjectIdType
  productId: ObjectIdType
  transactionAmount: CurrencyValue
  expiredDate: Datetime
  updateReasonDescription: String!
  receiptId: ObjectIdType
}

enum CreditUpdateReason {
  REFUND
  PAYMENT_BY_CREDITS
  ISSUING_CREDITS
}

input CsvColumnMappingEntryInput {
  key: String!
  value: Int!
}

type CsvColumnMappingEntrySchema {
  key: String!
  value: Int!
}

type CsvFulfillmentErrorSchema {
  message: String!
  row: String!
  orderId: ObjectIdType!
}

type CsvFulfillmentJobSchema {
  id: ObjectIdType!
  csvUrl: String!
  fulfilledCount: Int!
  errorCount: Int!
  totalRows: Int!
  status: MerchantFeedJobStatus!
  processedCount: Int!
  startTime: Datetime!
  fileName: String
  errors: [CsvFulfillmentErrorSchema!]
}

input CurrencyInput {
  amount: Float!
  currencyCode: PaymentCurrencyCode!
}

type CurrencyValue {
  amount: Float!
  currencyCode: String!
  display: String!
  convertedTo(currency: PaymentCurrencyCode!, rate: ConversionRate!): CurrencyValue!
}

type CurrentCycleListingFeeDetailsSchema {
  currentBasedWssTierLevel: Int!
  currentBasedWssTierName: String!
  currentFreeThreshold: Int!
  currentUnitPrice: CurrencyValue!
  currentItemsOverThreshold: Int!
  currentPeakItems: Int!
  currentPeakTime: Datetime!
  currentCycleStartTime: Datetime!
  currentCycleEndTime: Datetime!
  currentFeeToPay: CurrencyValue!
  currentCyclePayTime: Datetime!
}

type CustomerIdentityInfo {
  number: String!
  numberName: String!
}

type CustomerPaymentSchema {
  id: String
  paymentProvider: TransactionPaymentType!
}

type CustomerPriceSchema {
  unitPrice(localized: Boolean): CurrencyValue!
  unitShipping(localized: Boolean): CurrencyValue!
  credit(localized: Boolean): CurrencyValue
  total(localized: Boolean): CurrencyValue!
}

type CustomerSchema {
  payment: CustomerPaymentSchema!
  pricing: CustomerPriceSchema!
  user: WishUserSchema
}

type CustomerSupportConstants {
  issues: [CustomerSupportIssueType!]!
}

type CustomerSupportIssueType {
  id: Int!
  label: String!
}

type CustomerSupportServiceSchema {
  tickets(offset: Int = 0, limit: Int = 100, query: String, searchType: TicketSearchType = 2, sort: CustomerSupportTicketSort, states: [CustomerSupportTicketState!], issueTypes: [Int!], includeMissingTicketType: Boolean = false, types: [CustomerSupportTicketType!], requestTypes: [CustomerSupportTicketRequestType!]): [CustomerSupportTicket!]!
  ticketCount(query: String, searchType: TicketSearchType = 2, states: [CustomerSupportTicketState!], issueTypes: [Int!], includeMissingTicketType: Boolean = false, types: [CustomerSupportTicketType!], requestTypes: [CustomerSupportTicketRequestType!]): Int!
  ticket(id: ObjectIdType!): CustomerSupportTicket
}

type CustomerSupportTicket {
  id: ObjectIdType!
  orderId: ObjectIdType
  state: CustomerSupportTicketState!
  type: CustomerSupportTicketType
  createdTime: Datetime!
  lastUpdateTime: Datetime
  user: WishUserSchema!
  closeDate: Datetime
  issueType: CustomerSupportIssueType
  requestType: CustomerSupportTicketRequestType
  timeToRespond: Timedelta
  returnInformation: ReturnInformationSchema
  replies: [CustomerSupportTicketReplySchema!]
}

type CustomerSupportTicketCancelReturnReasonSchema {
  reason: ReturnRequestCancelReason!
}

type CustomerSupportTicketIssueRefundReasonSchema {
  reason: ReturnRequestRefundReason!
  reasonText: String!
}

type CustomerSupportTicketMutations {
  contactBuyer(input: ContactBuyerInput!): ContactBuyer
  authorizeReturn(input: AuthorizeReturnInput!): AuthorizeReturn
  cancelReturn(input: CancelReturnInput!): CancelReturn
  rejectReturn(input: RejectReturnInput!): RejectReturn
  issueRefund(input: IssueRefundInput!): IssueRefund
  createClaim(input: CreateClaimInput!): CreateClaim
}

enum CustomerSupportTicketReplyMessageType {
  CANCELLED_REPLACEMENT_REQUEST
  MOVE_TO_FRAUD_QUEUE
  LOGGED_OUT_FORM_CREATION_MESSAGE
  MANUAL_REFUND_CONFIRMATION
  MOVE_TO_ORIGINAL_QUEUE
  GURU_LINK
  MERCHANT_APPEAL_TO_SUPPORT
  ACCEPT_REPLACEMENT_REQUEST
  ADMIN_REQUEST_REFUND_CONFIRMATION
  DECLINE_REPLACEMENT_REQUEST
  COMMENT
  MESSAGE_TO_ADMIN
  AUTO_BOUNCED_TO_ADMIN
  ADMIN_DELEGATE
  TEXT_REPLY
  WISH_APPEAL_TO_SUPPORT
  CLOSE_REPLY
  ADMIN_REQUEST_SUPER
  EXPIRED_REPLACEMENT_REQUEST
  ESCALATE_TO_FRAUD_INTERNAL
  MERGED
  RELABEL_REPLY
  ESCALATE_TO_INTERNAL
  ESCALATE_TO_MERCHANT
  HIDDEN_TO_MERCHANT_ADMIN_REPLY
  REOPENED
  AUTO_BOUNCED_TO_ADMIN_120
  CHANGE_LOCALE_REPLY
  USER_APPEAL_TO_SUPPORT
  REFUND_CONFIRMATION
  ADMIN_REPLY
  REPORT_STORE
  AUTO_BOUNCED_TO_ADMIN_24
  REQUIRE_REVIEW_MERCHANT_REPLY
}

type CustomerSupportTicketReplySchema {
  id: ObjectIdType
  visibleToUser: Boolean!
  senderTitle: String!
  message: String!
  userLocale: String
  date: Datetime
  imageUrls: [String!]
  messageType: CustomerSupportTicketReplyMessageType!
  senderType: CustomerSupportTicketReplySenderType!
  replyAttachments: [MerchantFileSchema!]!
}

enum CustomerSupportTicketReplySenderType {
  MERCHANT
  WISH_ASSISTANT
  SHIP_PROVIDER
  ADMIN
  AUTO
  LIVE_CHAT
  USER
  FAKE_AS_ADMIN
}

enum CustomerSupportTicketRequestType {
  CLAIM
  RETURN_REQUEST
  REFUND_REQUEST
  OTHERS
}

input CustomerSupportTicketSort {
  field: TicketSortFieldType!
  order: SortOrderType!
}

enum CustomerSupportTicketState {
  AWAITING_REFUND_CONFIRMATION
  ADMIN
  MANUAL_REFUND_CONFIRMATION
  PERM_CLOSED
  DELAYED
  ESCALATED_TO_FRAUD_INTERNAL
  REVIEW_MERCHANT_REPLY
  AWAITING_USER
  CLOSED
  AWAITING_FRAUD
  NEW
  SUPER_ADMIN
  AWAITING_SHIP_PROVIDER
  AWAITING_MERCHANT
  RETURN_AUTO_TICKET
  ESCALATED_TO_INTERNAL
}

enum CustomerSupportTicketType {
  PRE_PURCHASE
  POST_CUSTOMER_SUPPORT
  NON_ORDER
  ORDER
}

type DSACannedResponseSchema {
  name: String!
  content: String!
}

type DSAHub {
  notice(noticeId: ObjectIdType!): NoticeSchema
  noticeCount(queryInput: NoticeQueryInput!): Int!
  notices(offset: Int! = 0, limit: Int! = 10, queryInput: NoticeQueryInput!): [NoticeSchema!]!
  notifierCount(queryInput: NotifierQueryInput!): Int!
  notifiers(offset: Int! = 0, limit: Int! = 10, queryInput: NotifierQueryInput!): [NotifierSchema!]!
  notifierOrganizations: [String!]!
  reviewCannedResponses: [DSACannedResponseSchema!]!
}

type DSAMutations {
  createNotifier(input: CreateNotifierInput!): CreateNotifier
  updateNotifier(input: UpdateNotifierInput!): UpdateNotifier
  removeNotifier(input: RemoveNotifierInput!): RemoveNotifier
  claimNotices(input: ClaimNoticesInput!): ClaimNotices
  unclaimNotices(input: UnclaimNoticesInput!): UnclaimNotices
  completeNoticeReview(input: CompleteNoticeReviewInput!): CompleteNoticeReview
  completeDisputeReview(input: CompleteDisputeReviewInput!): CompleteDisputeReview
  upsertNote(input: UpsertNoteInput!): UpsertNote
  public: PublicDSAMutations
}

scalar DateTime

type Datetime {
  unix: Int!
  datetime: String!
  formatted(fmt: String): String!
  iso8061: String!
  timeSince: Timedelta!
  timeUntil: Timedelta!
  hasPassed: Boolean!
  mmddyyyy: String!
  inTimezone(identifier: String!): Datetime!
  timezone: String!
}

input DatetimeInput {
  unix: Int
  iso8061: String
  fmt: String
  formatted: String
}

type DeciderKeySchema {
  decideForName(name: String!): Boolean!
}

type DedupImageLibraryHub {
  imageCount(imageType: DedupImageType!, query: String, inappropriateReasons: [CounterfeitReasonCode!], inappropriateSubcategories: [TaggingViolationSubReasonCode!], lastUpdateTimeStart: DatetimeInput, lastUpdateTimeEnd: DatetimeInput): Int!
  images(offset: Int = 0, limit: Int = 25, imageType: DedupImageType!, query: String, inappropriateReasons: [CounterfeitReasonCode!], inappropriateSubcategories: [TaggingViolationSubReasonCode!], lastUpdateTimeStart: DatetimeInput, lastUpdateTimeEnd: DatetimeInput, sort: DedupImageSort): [DedupImageSchema!]!
}

type DedupImageSchema {
  id: ObjectIdType!
  imageType: DedupImageType!
  imagePhash: String!
  inappropriateReason: TaggingViolationReason
  inappropriateSubcategory: TaggingViolationSubcategory
  counterfeitReason: TaggingViolationReason
  counterfeitSubcategory: TaggingViolationSubcategory
  brand: BrandSchema
  sampleImageUrl: String
  createdTime: Datetime!
  updateTime: Datetime!
  source: DedupSource
}

input DedupImageSort {
  field: DedupImageSortFieldType!
  order: SortOrderType!
}

enum DedupImageSortFieldType {
  CREATED_TIME
  LAST_UPDATE
  BRAND_NAME
}

enum DedupImageType {
  IP_VIOLATION
  INAPPROPRIATE
}

enum DedupSource {
  TAKEDOWN_REQUEST
  MANUAL_TAG
  MANUALLY_ADDED
  AUDIT_FEEDBACK
}

input DefaultShippingInput {
  warehouseId: ObjectIdType!
  price: CurrencyInput!
}

type DefaultShippingSchema {
  warehouseId: ObjectIdType!
  price: CurrencyValue!
  timeToDoor: Int
}

type DeleteAllDevicesMutation {
  deletedDeviceIds: [ObjectIdType!]
  deletedSessionIds: [ObjectIdType!]
  error: String
}

type DeleteBrandEnrollment {
  ok: Boolean!
  message: String
}

input DeleteBrandEnrollmentInput {
  brandInfoId: ObjectIdType!
}

type DeleteDedupImage {
  ok: Boolean!
  message: String
}

input DeleteDedupImageInput {
  imageIds: [ObjectIdType!]!
}

input DeleteDeviceInput {
  deviceId: ObjectIdType!
}

type DeleteDeviceMutation {
  error: String
}

input DeleteMerchantSenderAddressInput {
  merchantSenderAddressId: ObjectIdType!
}

type DeleteMerchantSenderAddressMutation {
  ok: Boolean!
  message: String
}

input DeleteMerchantWarehouseInput {
  id: ObjectIdType!
}

type DeleteMerchantWarehouseMutation {
  ok: Boolean!
  message: String
}

input DeleteProductPostsInput {
  postIds: [ObjectIdType!]
}

type DeleteProductPostsMutation {
  ok: Boolean!
  message: String
  errorCode: ProductPostErrorCode
}

type DeleteUin {
  ok: Boolean!
  message: String
}

input DeleteUinInput {
  id: ObjectIdType!
}

type DeleteWebhookSubscription {
  ok: Boolean!
  message: String
}

input DeleteWebhookSubscriptionInput {
  subscriptionId: ObjectIdType!
}

input DeliveryCarrierUpsertInput {
  carrierId: Int!
  countries: [CountryActionInput!]!
  extraCountryData: ExtraCountryDataInput
  date: String!
  reason: String
}

type DeliveryPerformanceStats {
  startDate: Datetime!
  endDate: Datetime!
  timeToDoor: Timedelta
  shippingTime: Timedelta
  ordersConfirmedDelivered: Int
  ordersConfirmedDeliveredRate: Float
}

input DestinationShippingProfileInput {
  destination: String
  displayName: String
  rate: CurrencyInput
  maxHoursToDoor: Int
  enabled: Boolean
  shippingDetailsPerDestination: [DestinationShippingProfileInput!]
}

type DestinationShippingProfileSchema {
  destination: String!
  displayName: String!
  rate: CurrencyValue!
  maxHoursToDoor: Int!
  enabled: Boolean!
  shippingDetailsPerDestination: [DestinationShippingProfileSchema!]
}

enum DetailedMerchantWarningReason {
  US_TAX_INFO_UNVALIDATED
  WISH_EXPRESS_POLICY_VIOLATION
  VIOLATION_OF_TERMS
  EMPTY_PACKAGES
  VIOLATE_POLICY
  HIGH_CHARGEBACK_RATIO
  LEGAL_TRO_TAKEDOWN
  LATE_CONFIRMED_FULFILLMENT_VIOLATION
  FINE_FOR_COUNTERFEIT_GOODS
  UNCONFIRMED_TRACKING_NUMBERS
  HIGH_IP_INFRINGEMENT
  STORE_VALIDATION_INCOMPLETE
  VIOLATE_TS_POLICY
  SUSPECTED_FRAUD
  INVALID_TRACKING_NUMBERS
  PRODUCT_HIGH_CANCEL_ORDER_RATE
  PRODUCT_HIGH_REFUND_RATIO
  DUPLICATE_PRODUCTS
  EXTREMELY_HIGH_PRICE_SPREAD
  REUPLOADING_COUNTERFEITS
  RESPOND_TO_ADMIN
  HIGH_CHARGEBACK_AND_FRAUD_REFUND_RATIO
  PRODUCT_HIGH_REFUND_RATIO_NO_REMOVE
  DEP_FINE_DISABLE_PROMOTED_PRODUCT_FOR_COUNTRY
  UNFULFILLED_ORDER
  POLICY_TIER_DEMOTION
  BRANDED_PRODUCT_GEOBLOCK
  PROHIBITED_PRODUCT
  DECEPTIVE_FULFILLMENT
  MISLEADING_LISTING
  HIGH_AUTO_REFUND
  WISH_EXPRESS_POLICY_PRODUCT
  BAD_CUSTOMER_SERVICE
  RELATED_ACCOUNT_IS_BANNED
  MISLEADING_VARIATION
  PRODUCT_IS_INAPPROPRIATE
  DEP_FINE_DISABLE_PROMOTED_PRODUCT
  FINE_WISH_EXPRESS_POLICY_VIOLATION
  CONFIRMED_DELIVERY_POLICY
  BAN_EARLY_STAGE_MERCHANT
  TAKE_USER_OUTSIDE_WISH
  WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION
  WISH_STANDARDS_BAN
  CS_LOW_CSAT_SCORE
  PRODUCT_LOW_RATING_NO_REMOVE
  ORDER_NOT_DELIVERED
  REQUEST_USER_EMAIL
  WISH_EXPRESS_POLICY_MERCHANT
  MERCHANT_CANCELLATION_VIOLATION
  FAKE_RATING
  DEP_BAIT_VARIABLE_PRICING
  DUPLICATE_ACCOUNTS
  CN_PROHIBITED_PRODUCTS
  FINE_UPDATE_TO_COUNTERFEIT
  PRODUCT_LIMIT_REACHED
  HIGH_GMV_FROM_GAMING_AUDIT
  REPEAT_IP_INFRINGEMENT_ON_BRAND_OWNER
  PENALTY_FOR_AUTO_REFUND
  FINAL_JUDGEMENT_ORDER
  HIGH_REFUND_RATIO
  REQUEST_MONEY
  COUNTERFEIT_GOODS
  WISHPOST_NEGATIVE_BALANCE
  DISINGENUOUS_CUSTOMER_SERVICE
  INACTIVE_ACCOUNT
  INVALID_EU_RESPONSIBLE_PERSON
  LATE_FULFILLMENT_RATE
  REPEAT_PRODUCT_SWAPPING
  PRODUCT_LOW_RATING
  HIGH_RISK_PROHIBITED_PRODUCT
  HIGH_GMV_FROM_GAMING_FREEZE
  MERCHANT_HARASSMENT
  VIOLATION_OF_POLICY_TIER
  MERCHANT_HIGH_CANCEL_ORDER_RATE
  SUSPENDED_FOR_UNDER_PERFORMING
  MERCHANT_CONTACT_INFO_INVALID
  HIGH_GMV_FROM_GAMING_BAN
  PRODUCT_HIGH_QUALITY_REFUND_RATIO
  FAKE_TRACKING
  WAREHOUSE_FULFILLMENT_POLICY_VIOLATION
  MERCHANT_HIGH_REFUND_EAT_COST
  STRIKE_BASED_HIGH_RISK_PROHIBITED
  MERCHANT_HIGH_QUALITY_REFUND_RATIO
  HIGH_GMV_FROM_MISLEADING_PRODUCTS
  PRODUCT_GEOBLOCK
  FINE_PRODUCT_SWAPPED
  CS_LATE_RESPONSE_RATE
  TAX_SETTING_NOT_UPDATED
  ADDITIONAL_TAX_INFO
}

type DetailedMerchantWarningReasonSchema {
  reason: DetailedMerchantWarningReason!
  text: String!
}

type DetectionFactor {
  factor: MerchantCountryDetectionFactorType!
  detectedCountry: Country
}

type DeviceSchema {
  id: ObjectIdType!
  ip: String
  location: String
  lastUsed: DateTime
  firstUsed: DateTime!
  deviceName: String
  userAgent: String
  status: DeviceStatus!
}

enum DeviceStatus {
  CURRENT
  ACTIVE
  INACTIVE
}

type DisableBrandPartner {
  ok: Boolean!
  message: String
}

input DisableBrandPartnerInput {
  brandPartnerId: ObjectIdType!
}

type DisbursementScheduleInfo {
  merchantFileLink: String
}

input DisputeInfractionInput {
  category: String
  subcategory: String
  productName: String
  description: String
  explanation: String
  photo: [FileInput!]
  variationCount: Int
  variationsSameProduct: Boolean
  variationsSamePrice: Boolean
  cost: CurrencyInput
  retailPrice: CurrencyInput
  vendorAddress: AddressInput
  disputeProof: [FileInput!]
}

type DisputeMessageSchema {
  senderType: DisputeMessageSenderType!
  senderName: String!
  date: Datetime!
  message: String
  type: DisputeMessageType!
  files: [MerchantFileSchema!]!
}

enum DisputeMessageSenderType {
  ADMIN
  MERCHANT
  VIEW_ONLY
}

enum DisputeMessageType {
  ADMIN_COMMENT
  INITIATED
  PAID
  REOPEN
  CLOSED
  CANCELLED
  REPLY
  APPROVED
}

type DisputeNotice {
  ok: Boolean!
  message: String
}

input DisputeNoticeInput {
  noticeId: ObjectIdType!
  productIds: [ObjectIdType!]!
  disputeDescription: String!
  disputeSupportFiles: [FileInput!]
}

enum DisputeReason {
  MISLEADING_PRODUCT_TAG
  PRODUCT_HIGH_REFUND_RATIO
  DELIVERED_TO_WRONG_ADDRESS
  EPC_OVERWEIGHT
  FRAUDULENT_BEHAVIOR
  VALID_TRACKING
  INCOMPLETE_ORDER
  NOT_DELIVERED_ON_TIME
  STORE_UPLOADED_INVENTORY_RETURN
  PRODUCT_LOW_RATING
  RIGHT_OF_WITHDRAWAL
  FBS_ITEM_NOT_PICKUP
  CORRECT_SIZE
  ITEM_IS_DAMAGED
  MERCHANT_REPORT_RETURN
  EPC_OVERVALUE
  MERCHANT_MANAGED_SERVICES
  RETURNED_TO_SENDER
  ITEM_NOT_MATCH_LISTING
  WISHBLUE_EPC_LATE_FULFULLMENT
  OUT_OF_STOCK
  ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE
  FAKE_TRACKING
  MERCHANT_HIGH_REFUND_EAT_COST
  ITEM_IS_DANGEROUS
  BANNED_MERCHANT
  NOT_QUALIFIED_SHIPPING_PROVIDER
  AUTHORIZED_TO_SELL
  EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP
  EPC_OVERSIZE
  COUNTERFEIT_ITEM
  DID_NOT_ACCEPT_TOS_ON_TIME
  LATE_CONFIRMED_FULFILLMENT
  MERCHANT_REPORT_FRAUD
}

type DisputeReasonSchema {
  reason: DisputeReason!
  text: String
  subReason: DisputeSubReason
  subReasonText: String
}

type DisputeSchema {
  refundDispute: RefundDisputeHub
  trackingDispute: TrackingDisputeHub
}

input DisputeSort {
  field: DisputeSortFieldType!
  order: SortOrderType!
}

enum DisputeSortFieldType {
  DisputeID
  LastUpdate
}

enum DisputeState {
  INVALID
  AWAITING_ADMIN
  PAID
  CLOSED
  CANCELLED
  NEW
  AWAITING_MERCHANT
  APPROVED
}

enum DisputeSubReason {
  INCOMPLETE_ITEM
  DID_NOT_RECEIVE_ITEM
  INCORRECT_ITEM
}

input DomesticShippingInput {
  warehouseId: ObjectIdType!
  price: CurrencyInput
  enabled: Boolean
}

type DomesticShippingSchema {
  warehouseId: ObjectIdType!
  price: CurrencyValue!
  enabled: Boolean!
  priceEstimate: CurrencyValue!
}

type DownloadAllProducts {
  ok: Boolean!
  errorMessage: String
}

type DownloadAllProductsCSV {
  ok: Boolean!
  errorMessage: String
}

input DownloadAllProductsCSVInput {
  includeRejected: Boolean = false
  warehouseId: ObjectIdType
  templateType: ProductsCSVTemplateType = 1
  categoryIds: [Int!]
}

input DownloadAllProductsInput {
  fileType: FileType = csv
  includeRejected: Boolean = false
  warehouseId: ObjectIdType
  templateType: ProductsCSVTemplateType = 1
  categoryIds: [Int!]
}

enum DownloadBulkCsvFileType {
  ERROR
  LIVE
}

input DownloadBulkCsvProductsInput {
  bulkCsvJobId: String!
  fileType: DownloadBulkCsvFileType!
}

type DownloadCsvJobRowsDetail {
  downloadUrl: String
  ok: Boolean!
  errorMessage: String
}

type DownloadEUComplianceProductLinks {
  ok: Boolean!
  errorMessage: String
}

type DownloadJobSchema {
  id: ObjectIdType!
  submittedDate: Datetime
  completedDate: Datetime
  jobType: String
  status: String
  downloadLink: String
}

type DownloadUnderPerformingProducts {
  ok: Boolean!
  errorMessage: String
}

input DownloadUnderPerformingProductsInput {
  fileType: FileType = csv
}

type EPRMutations {
  createUin(input: CreateUinInput!): CreateUin
  updateUin(input: UpdateUinInput!): UpdateUin
  deleteUin(input: DeleteUinInput!): DeleteUin
  acceptTos(input: AcceptTosInput!): AcceptTos
}

type EPRNonCompliantSummaryRecordSchema {
  country: Country!
  eprCategoryName: String!
  nonCompliantProductCount: Int!
}

type EPRNonCompliantSummarySchema {
  summaryRecords: [EPRNonCompliantSummaryRecordSchema!]!
  productRecordTotal(countryCode: CountryCode!, eprCategories: [Int!], productId: String): Int!
  productRecords(countryCode: CountryCode!, eprCategories: [Int!], productId: String, offset: Int = 0, limit: Int = 10, sortDesc: Boolean = false): [EPRProductRecordSchema!]!
}

type EPRProductRecordSchema {
  productId: ObjectIdType!
  country: Country!
  taxonomyCategoryNames: [String!]!
  eprCategoryNames: [String!]!
}

enum EPRStatus {
  DELETED
  ADMIN_APPROVED
  COMPLETE
  REJECTED
  IN_REVIEW
}

input EUComplianceAddressInput {
  name: String!
  streetAddress1: String!
  streetAddress2: String
  streetAddress3: String
  city: String!
  county: String
  state: String!
  neighborhood: String
  region: String
  countryCode: EUComplianceResponsiblePersonCountriesAndRegionsCode
  zipcode: String
  phoneNumber: String
}

type EUComplianceMutations {
  downloadProductLinks: DownloadEUComplianceProductLinks
  upsertLink(input: LinkProductComplianceUpsertInput): UpsertLinkProductCompliance
  upsertResponsiblePerson(input: ResponsiblePersonUpsertInput): UpsertResponsiblePerson
}

type EUComplianceResponsiblePersonCountriesAndRegions {
  code: EUComplianceResponsiblePersonCountriesAndRegionsCode!
  name: String!
}

enum EUComplianceResponsiblePersonCountriesAndRegionsCode {
  BE
  FR
  BG
  DK
  HR
  IS
  DE
  IT
  HU
  CZ
  CY
  AT
  FI
  NIE
  IE
  ES
  GR
  SK
  NL
  PT
  NO
  SI
  LI
  LV
  EE
  LT
  LU
  SE
  MT
  RO
  PL
}

enum EUProductComplianceCategory {
  ENVIRONMENT
  FOOD
  CHEMICAL
  OTHER
  COSMETICS
  TOYS
  EEE
}

input EUVATRegistrationFieldsInput {
  vatNumber: String!
  countryCode: CountryCode!
}

type EUVATSchema {
  invoiceAmount(inAuthorityCurrency: Boolean = true): CurrencyValue
  shippingPrice(inAuthorityCurrency: Boolean = true): CurrencyValue
}

type EUVATTaxMutations {
  uploadVatTaxQuestionnaire(input: EUVATTaxQuestionnaireInput!): UploadEUVATTaxQuestionnaire
}

input EUVATTaxQuestionnaireAddressInput {
  address: String!
  zipcode: String!
  city: String!
  state: String!
  countryCode: CountryCode!
}

input EUVATTaxQuestionnaireInput {
  employPersonnelInEu: Boolean
  businessAddressInEu: Boolean
  businessAddress: EUVATTaxQuestionnaireAddressInput
  subjectToTaxInEu: Boolean
  fileUrl: String
  registeredWithTradeRegistryInEu: Boolean
  euVatRegistration: EUVATRegistrationFieldsInput
  businessRegistrationNumber: String
}

type EUVATTaxSchema {
  euVatSelfRemittanceEligible: Boolean
  euVatEntityStatus: CommerceMerchantEUEntityStatus
}

input EditAddressInput {
  orderId: ObjectIdType!
  address: AddressInput!
}

type EditOriginAddresses {
  updatedCount: Int!
  errorMessages: [AddressUpdateError!]
}

type EditShippingAddresses {
  updatedCount: Int!
  errorMessages: [AddressUpdateError!]
}

input EditTrademarkInput {
  id: ObjectIdType!
  location: BrandPartnerCountryAndRegionCode!
  type: BrandPartnerTrademarkType!
  registrationNumber: String!
  registrationUrl: String
  registrationDocs: [FileInput!]
}

type EditTrademarksAndBrandInfo {
  ok: Boolean!
  message: String
}

input EditTrademarksAndBrandInfoInput {
  brandInfoId: ObjectIdType!
  brandOwnerName: String
  proofOfAuthorizations: [FileInput!]
  brandRepName: String
  brandRepTitle: String
  email: String
  phoneNumber: String
  proposedBrandId: ObjectIdType
  providedBrandName: String!
  isNewBrand: Boolean!
  providedBrandWebsite: String
  providedBrandLogoFile: FileInput
  providedBrandAdditionalInfo: String
  trademarks: [EditTrademarkInput!]!
}

type EligibleProductInfo {
  product: ProductSchema!
  variations: [VariationSchema!]!
}

enum EntityTypes {
  COMPANY
  INDIVIDUAL
}

enum ErrorCode {
  ERROR_CODE_UNSPECIFIED
  ERROR_CODE_MERCHANT_LISTING_INSIGHTS_UNAVAILABLE
  ERROR_CODE_MERCHANT_PERFORMANCE_UNAVAILABLE
  ERROR_CODE_INVALID_L1_CATEGORY
  ERROR_CODE_INVALID_MERCHANT_ID
  ERROR_CODE_INVALID_PRODUCT_ID
  ERROR_CODE_RATE_LIMIT
  ERROR_CODE_INTERNAL_SERVER_ERROR
  ERROR_CODE_BOTH_PRODUCT_ID_AND_L1_CATEGORY_ID_SPECIFIED
  ERROR_CODE_NO_PRODUCT_ID_OR_L1_CATEGORY_ID_SPECIFIED
}

type EverCBrandCreateBrand {
  ok: Boolean!
  message: String
}

type EverCBrandDeleteBrand {
  ok: Boolean!
  message: String
}

type EverCBrandMutations {
  createBrand(input: EvercBrandUpsertBrandInput!): EverCBrandCreateBrand
  updateBrand(input: EvercBrandUpsertBrandInput!): EverCBrandUpdateBrand
  deleteBrand(input: EvercBrandDeleteBrandInput!): EverCBrandDeleteBrand
}

type EverCBrandSchema {
  id: ObjectIdType!
  name: String!
  displayName: String!
  rightsHolderNames: [String!]!
}

type EverCBrandUpdateBrand {
  ok: Boolean!
  message: String
}

input EvercBrandDeleteBrandInput {
  evercBrandId: ObjectIdType!
}

input EvercBrandUpsertBrandInput {
  evercBrandId: ObjectIdType
  wishBrandId: ObjectIdType
  displayName: String
  rightsHolders: [String!]
}

enum ExistingSellingLocations {
  NONE
  RETAIL
  ONLINE_AND_RETAIL
  ONLINE
}

type ExpSchema {
  bucket(name: String!): String!
}

input ExpireWhitelistProductsInput {
  merchantId: ObjectIdType!
  productIds: [ObjectIdType!]!
}

type ExpireWhitelistProductsMutation {
  ok: Boolean!
  message: String
}

type ExtendedProducerResponsibilitySchema {
  country(countryCode: CountryCode!): CountryEPRSchema!
  countries: [CountryEPRSchema!]!
  eprNonCompliantSummary: EPRNonCompliantSummarySchema!
}

type ExternalBoostAttributedStats {
  orders: Int!
  gmv: CurrencyValue!
}

enum ExternalBoostChargingMethod {
  CPA
  CPC
}

input ExtraCountryDataInput {
  swedenDeliveredCarrierTypes: [SwedenDeliveredCarrierType!]!
}

input ExtractionResultInput {
  name: String!
  values: [String!]!
}

type FBWInventorySchema {
  warehouse: FBWWarehouseSchema!
  shippingType: WarehouseShippingType!
  activeInventory: Int!
  pendingInventory: Int!
}

enum FBWRegion {
  EU
  CN
  US
  EU_UNBONDED
}

type FBWWarehouseSchema {
  id: ObjectIdType!
  code: String!
  region: FBWRegion!
  address: AddressSchema!
  estimatedFulfillTime: Timedelta!
  maxWeight: Weight!
  name: String!
  feeLink: String!
}

type FPProductStateAttributeSchema {
  name: String!
  value: String!
}

enum FPProductStateCondition {
  NEW
  USED
  REFURBISHED
}

type FPProductStateCountryShippingSchema {
  destination: String!
  isEnabled: Boolean
  maxDeliveryDays: Int
  price: CurrencyValue
  overrides: [FPProductStateRegionShippingSchema!]
}

type FPProductStateDefaultShippingSchema {
  warehouseId: ObjectIdType!
  price: CurrencyValue!
}

type FPProductStateImageSchema {
  id: Int!
  wishUrl: String
  isCleanImage: Boolean
  removed: Boolean
}

type FPProductStateInventorySchema {
  warehouseId: ObjectIdType!
  count: Int!
}

type FPProductStateRegionShippingSchema {
  destination: String!
  isEnabled: Boolean
  maxDeliveryDays: Int
  price: CurrencyValue
  useCountryShippingPrice: Boolean
}

type FPProductStateSchema {
  name: String
  description: String
  mainImage: FPProductStateImageSchema
  extraImages: [FPProductStateImageSchema!]
  variations: [FPProductStateVariationSchema!]
  brandId: ObjectIdType
  condition: FPProductStateCondition
  defaultShipping: [FPProductStateDefaultShippingSchema!]
  maxQuantity: Int
  msrp: CurrencyValue
  parentSku: String
  referenceValue: Int
  tags: [String!]
  referenceUnit: UnitCombined
  warehouseToShippings: [FPProductStateWarehouseToShippingSchema!]
  attributes: [FPProductStateAttributeSchema!]
  warningType: FPProductStateWarningType
  chemicalNames: [String!]
}

type FPProductStateVariationSchema {
  id: ObjectIdType!
  sku: String
  size: String
  color: String
  productId: String!
  weight: Weight
  height: Length
  length: Length
  width: Length
  customsHsCode: String
  gtin: String
  originCountry: Country
  declaredValue: CurrencyValue
  declaredName: String
  declaredLocalName: String
  pieces: Int
  hasPowder: Boolean
  hasLiquid: Boolean
  hasBattery: Boolean
  hasMetal: Boolean
  inventory: [FPProductStateInventorySchema!]
  price: CurrencyValue
  image: FPProductStateImageSchema
  enabled: Boolean
}

type FPProductStateWarehouseToShippingSchema {
  shippingDetails: [FPProductStateCountryShippingSchema!]!
  warehouseId: String!
}

enum FPProductStateWarningType {
  ON_PRODUCT_COMBINED_CANCER_REPRODUCTIVE
  RAW_WOOD
  FOOD
  DEP_PASSENGER_OFF_ROAD_VEHICLE
  CHEMICAL
  DIESEL_ENGINE
  ON_PRODUCT_REPRODUCTIVE
  DEP_RECREATIONAL_VESSEL
  ON_PRODUCT_CANCER
  FURNITURE
}

input FactoryMerchantConversionInput {
  userId: String!
}

type FactoryToMerchantConversionMutation {
  error: String
  ok: Boolean!
}

type FactoryUserMutations {
  convertMerchantToFactory(input: FactoryMerchantConversionInput!): MerchantToFactoryConversionMutation!
  convertFactoryToMerchant(input: FactoryMerchantConversionInput!): FactoryToMerchantConversionMutation!
}

type FeePolicyConfigSchema {
  wssTierLevel: Int!
  wssTierName: String!
  freeThreshold: Int!
  excessItemUnitPrice: CurrencyValue!
}

type FeedProcessingWorkflowSchema {
  id: String!
  reviewStatus: CommerceProductFPReviewStatus!
  createdAt: Datetime!
  blockingReason: String
  isMainImageBlankError: Boolean!
  originalState: FPProductStateSchema
  upsertState: FPProductStateSchema
}

type FileDataSchema {
  merchantFileId: String!
  pictureType: PictureType!
  fileUrl: String!
  fileName: String!
}

input FileInput {
  url: String!
  fileName: String!
}

enum FileType {
  CSV
  XLSX
}

enum FilledCannedResponseSearchType {
  TRACKING_DISPUTE_ID
  DISPUTE_ID
  COMMERCE_TICKET_ID
}

type FilledCannedResponseTextSchema {
  text: String!
  customizations: [String!]!
}

enum FinalSaleCategory {
  HOUSEHOLD_SUPPLIES
  ADULT_TOYS
  PLANT_AND_PLANT_SEEDS
  FOOD_AND_BEVERAGES
  VITAMINS_AND_SUPPLEMENTS
  PET_FOOD
  OTC_MEDICATION
  MAKEUP_AND_BEAUTY
}

type FinalSaleCategorySchema {
  category: FinalSaleCategory!
  name: String!
  description: String!
  totalProducts: Int!
  finalSaleEnabled: Boolean!
}

enum FineReason {
  EARLY_PAYMENT_DEDUCTION
  PROMOTION_FEE
  UNREASONABLE_PRICE_GAUGE
  PRODUCT_LISTING_FEE
  MERCHANT_CANCELLATION
  FAKE_RATING
  LEGAL_SETTLEMENT_RESERVED
  INVALID_EU_RESPONSIBLE_PERSON
  B2B_SALE_FEE
  POLICY_VIOLATION
  STORE_PAYMENT_DEDUCTION
  CN_PROHIBITED_PRODUCTS
  IP_INFRINGEMENT
  LEGAL_SETTLEMENT_PAID
  WITHHOLD_FUND
  ONEOFF_FEE
  UNFULFILLED_ORDER
  MERCHANT_HARASSMENT
  LOGISTIC_FEE
  ONEOFF
  PROHIBITED_PRODUCT_FINE
  WISH_EXPRESS_VIOLATION
  COLLECTIONS_BOOST_CAMPAIGN_FEE
  RETURN_LABEL_FEE
  EXTERNAL_BOOST_FEE
  LEGAL_SETTLEMENT
  WISH_PARCEL_SERVICE_ADJUST_FEE
  WISHPOST_ADJUSTMENT_DEDUCTION
  MERCHANT_INCENTIVE
  FBW_FEE
  PROMOTED_PRODUCT_DISABLE_FINE
  MISLEADING_VARIATION
  FAKE_TRACKING
  UNCONFIRMED_CARRIER
  DEP_INFRACTION
  STORE_PAYMENT_CANCELLATION
  WISH_EXPRESS_WITHHELD_ORDER
  WISHPOST_LOGISTICS_FEE
  SE_CASH_BACK
  EXTERNAL_BOOST_CPA_FEE
  WISHPOST_FULFILLMENT_FEE
  QUALITY_REFUND_FINE
  PAID_PLACEMENT_IMPRESSION_FEE
  CN_ORDER_NOT_SHIP_WITH_WISHPOST
  LCL_FBW_FEE
  CONSOLIDATE_MP_FINE
  REPEAT_IP_INFRINGEMENT
  WISH_PARCEL_SERVICE_FEE
  DECEPTIVE_FULFILLMENT
  MISLEADING_LISTING
  MISLEADING_LISTING_AUTHENTIC_BRAND
  LATE_CONFIRMED_FULFILLMENT
  PAID_PLACEMENT_ENROLLMENT_FEE
  PRODUCT_SWAPPED
}

type FlatRateShippingCountryCandidate {
  country: Country!
  price: CurrencyValue!
}

type FlexibleBudgetSchema {
  enabled: Boolean!
  type: MarketingFlexibleBudgetType!
}

type FloorBidsSchema {
  trueTagId: ObjectIdType!
  bidPrice: CurrencyValue!
  date: Datetime!
  trueTag: TrueTagSchema!
}

type ForceApproveProduct {
  ok: Boolean!
  message: String
}

input ForceApproveProductInput {
  productId: ObjectIdType!
}

type FranceComplianceMutations {
  upsertLink(input: UpsertFranceLinkProductComplianceInput!): UpsertFranceLinkProductCompliance
  upsertUin(input: FranceProductUniqueIdentificationNumberUpsertInput): UpsertFranceProductUniqueIdentificationNumber
}

enum FranceProductUniqueIdentificationNumberAction {
  CREATE
  UPDATE
  DELETE
}

enum FranceProductUniqueIdentificationNumberCategory {
  SECONDARY_PACKAGING
  ELECTRIC_AND_ELECTRONIC_EQUIPMENTS
  PRIMARY_PACKAGING
  TEXTILE
  BATTERIES
  PAPER
  TIRES
  FURNITURE
}

type FranceProductUniqueIdentificationNumberSchema {
  id: ObjectIdType!
  merchant: MerchantSchema!
  uniqueIdentificationNumber: String!
  productResponsibilityOrganization: String!
  status: FranceProductUniqueIdentificationNumberStatus
  category: FranceProductUniqueIdentificationNumberCategory
  linkCount: Int!
}

enum FranceProductUniqueIdentificationNumberStatus {
  DELETED
  ADMIN_APPROVED
  COMPLETE
  REJECTED
  INREVIEW
}

input FranceProductUniqueIdentificationNumberUpsertInput {
  action: FranceProductUniqueIdentificationNumberAction!
  uinId: ObjectIdType
  category: FranceProductUniqueIdentificationNumberCategory
  productResponsibilityOrganization: String
  uniqueIdentificationNumber: String
}

enum FreezeReversalType {
  FINE_REVERSAL_ONLY
  FINE_PAYMENT_ONLY
  FINE_REVERSAL_AND_PAYMENT
}

input FulfillOrderInput {
  orderId: ObjectIdType!
  trackingId: String!
  providerId: Int!
  shipNote: String
  originCountryCode: CountryCode!
}

type FulfillOrders {
  shippedCount: Int!
  reusedTracking: Boolean!
  errorMessages: [FulfillmentError!]
}

type FulfilledByWishMutations {
  createShippingPlan(input: ShippingPlanInput!): CreateShippingPlan
}

type FulfilledByWishSchema {
  lowInventoryCount: Int
  actionRequiredShippingPlans: Int
  totalActionRequired: Int
}

type FulfillmentCSVSchema {
  requiredColumns: [OrderCSVColumnSchema!]!
  optionalColumns: [OrderCSVColumnSchema!]!
}

type FulfillmentError {
  orderId: ObjectIdType!
  message: String!
}

type FulfillmentMutation {
  refundOrders(input: [RefundOrderInput!]!): RefundOrders!
  fulfillOrders(input: [FulfillOrderInput!]!): FulfillOrders!
  modifyTrackingOrders(input: [ModifyTrackingOrderInput!]!): ModifyTrackingOrders!
  editShippingAddresses(input: [EditAddressInput!]!): EditShippingAddresses!
  editOriginAddresses(input: [EditAddressInput!]!): EditOriginAddresses!
  fulfillOrdersFromCsv(input: FulfillmentOrdersFromCsvInput!): FulfillmentOrdersFromCsv!
  updateDeliveryConfirmation(input: UpdateOrderDeliveryConfirmationInput!): UpdateOrderDeliveryConfirmation!
  actionRequiredOrdersCsvDownload(input: ActionRequiredOrdersCsvDownloadInput!): ActionRequiredOrdersCsvDownload!
  ordersCsvDownload(input: OrdersCsvDownloadInput!): OrdersCsvDownload!
  selectWpsShippingOption(input: SelectWPSShippingOptionInput!): SelectWPSShippingOptionMutation!
  modifyWpsTrackingId(input: ModifyWPSTrackingIDInput!): ModifyWPSTrackingIDMutation!
  cancelWpsTrackingId(input: CancelWPSTrackingIDInput!): CancelWPSTrackingIDMutation!
  setWpsPackageType(input: SetWPSPackageTypeInput!): SetWPSPackageTypeMutation!
  generateTestOrders(input: GenerateTestOrdersInput!): GenerateTestOrders
}

type FulfillmentOrdersFromCsv {
  jobUrl: String
  status: MerchantFeedJobStatus
  errorMessage: String
}

input FulfillmentOrdersFromCsvInput {
  fileUrl: String!
  csvDelimiter: String!
  columnIdList: [String!]!
}

type FulfillmentSchema {
  order(id: String!): OrderSchema
  orderBatch(ids: String!): [OrderSchema!]
  orders(query: String, searchType: OrderHistorySearchType, offset: Int = 0, limit: Int = 20, sort: OrderHistorySort, states: [CommerceTransactionState!], wishExpress: Boolean): [OrderSchema!]
  historicalOrders(query: String, searchType: OrderHistorySearchType, offset: Int = 0, limit: Int = 20, sort: OrderHistorySort, wishExpress: Boolean): [OrderSchema!]
  ordersCsvUrl(query: String, searchType: OrderHistorySearchType, offset: Int = 0, limit: Int = 20, sort: OrderHistorySort, wishExpress: Boolean): String
  actionRequiredOrdersCsvUrl(query: String, searchType: ActionRequiredSearchType, offset: Int = 0, limit: Int = 20, sort: ActionRequiredSort, wishExpress: Boolean): String
  csvFulfillmentJobsCount: Int
  ordersCount(query: String, searchType: OrderHistorySearchType, states: [CommerceTransactionState!], wishExpress: Boolean): Int
  actionRequiredOrders(query: String, searchType: ActionRequiredSearchType, offset: Int = 0, limit: Int = 20, sort: ActionRequiredSort, wishExpress: Boolean): [OrderSchema!]
  actionRequiredOrderCount(query: String, searchType: ActionRequiredSearchType, wishExpress: Boolean): Int
  fulfillmentCsv: FulfillmentCSVSchema
  bulkJobs(offset: Int! = 0, limit: Int! = 25): [CsvFulfillmentJobSchema!]
  wpsShippingOptions(orderId: String!): WPSGetShippingOptionsSchema
}

enum GBVatEntityType {
  NOT_APPLICABLE
  NO_OBLIGATION
  HAVE_OBLIGATION
}

type GCPEListingReviewSchema {
  reviewId: ObjectIdType!
  productId: ObjectIdType!
  oldProductName: String
  productName: String!
  oldMainImageUrl: String
  mainImageUrl: String!
  datetimeQueued: Datetime!
  datetimeCompleted: Datetime
}

input GenWechatQrInput {
  scene: String
}

type GenWechatQrMutation {
  ticket: String
}

enum Gender {
  UNKNOWN
  MALE
  FEMALE
  NEUTRAL
}

type GeneralTaggingManagement {
  localToLocalAllowedSubcategories: [TaggingViolationSubcategory!]
  taxonomyCategory(treeVersion: String, categoryId: Int): TaxonomyCategorySchema
}

type GenerateTestOrders {
  ok: Boolean!
  errorMessage: String
}

input GenerateTestOrdersInput {
  productId: ObjectIdType
  variationId: ObjectIdType
  quantity: Int
  logisticsOption: GenerateTestOrdersLogisticsOptions! = random
  country: CountryCode
  state: String
  zipcode: String
}

enum GenerateTestOrdersLogisticsOptions {
  RANDOM
  WISH_EXPRESS
  LESS_THAN_TRUCKLOAD
  ADVANCED_LOGISTICS
  OPTIONAL_ADVANCED_LOGISTICS
  CONFIRMED_DELIVERY_POLICY
  NONE
}

input GenerateVideoInput {
  slides: [VideoSlideSpec!]
}

type GenerateVideoMutation {
  ok: Boolean
  videoUrl: String
}

scalar GenericScalar

type GeoCoordinates {
  latitude: String!
  longitude: String!
}

type GermanyComplianceMutations {
  upsertLink(input: UpsertGermanyLinkProductComplianceInput!): UpsertGermanyLinkProductCompliance
  upsertUin(input: GermanyProductUniqueIdentificationNumberUpsertInput): UpsertGermanyProductUniqueIdentificationNumber
}

enum GermanyProductUniqueIdentificationNumberAction {
  CREATE
  UPDATE
  DELETE
}

enum GermanyProductUniqueIdentificationNumberCategory {
  PACKAGING
  BATTERIES
  ELECTRIC_AND_ELECTRONIC_EQUIPMENTS
}

type GermanyProductUniqueIdentificationNumberSchema {
  merchant: MerchantSchema!
  id: ObjectIdType!
  category: GermanyProductUniqueIdentificationNumberCategory
  status: GermanyProductUniqueIdentificationNumberStatus
  updateTime: Datetime
  eprNumber: String!
  organizationOrRepresentativeName: String
  linkCount: Int!
}

enum GermanyProductUniqueIdentificationNumberStatus {
  DELETED
  ADMIN_APPROVED
  COMPLETE
  REJECTED
  INREVIEW
}

input GermanyProductUniqueIdentificationNumberUpsertInput {
  action: GermanyProductUniqueIdentificationNumberAction!
  uinId: ObjectIdType
  category: GermanyProductUniqueIdentificationNumberCategory
  organizationOrRepresentativeName: String
  eprNumber: String
}

type GetAndClaimProductTaxonomyCategoryDisputeForReview {
  dispute: ProductTaxonomyCategoryDisputeSchema
  ok: Boolean!
  message: String
}

input GetAndClaimProductTaxonomyCategoryDisputeForReviewInput {
  disputeId: ObjectIdType
}

type GoogleLoginDetails {
  authUrl: String!
}

type GtinProductSchema {
  gtins: [String!]!
  gtinFormats: [String!]
  asin: String
  title: String
  categories: [String!]
  brand: String
  wishBrand: BrandSchema
  description: String
  features: String
  imageUrls: [String!]
  variations: [GtinVariationSchema!]
}

type GtinProductServiceSchema {
  product(gtins: [String!]!): GtinProductSchema
}

type GtinVariationSchema {
  gtin: String!
  mpn: String
  model: String
  manufacturer: String
  ageGroup: String
  ingredients: String
  nutritionFacts: String
  energyEfficiencyClass: String
  color: String
  gender: String
  material: String
  pattern: String
  format: String
  multipack: String
  size: String
  length: Length
  width: Length
  height: Length
  weight: Weight
  imageUrls: [String!]
  price: CurrencyValue
}

type IPViolationBrandCategory {
  category: BrandCategoryCode!
  displayName: String!
}

type IPViolationTaggingManagement {
  ipViolationReasons: [TaggingViolationReason!]!
  brandCategories: [IPViolationBrandCategory!]!
  taggableBrands: [BrandSchema!]!
}

type IdDetails {
  id: String!
  redirectType: RedirectType!
}

enum IdDocTypes {
  DRIVER_LICENSE
  GOVERNMENT_ISSUED_STATE_ID
  PASSPORT
}

type IdentityMutations {
  updatePermission(input: UpdatePermissionInput!): UpdatePermissionMutation
  updateRole(input: UpdateRoleInput!): UpdateRoleMutation
  updateUserInfo(input: UpdateUserInfoInput!): UpdateUserInfoMutation
  updateQueue(input: UpdateUserQueuesInput!): UpdateUserQueuesMutation
  factoryMutations: FactoryUserMutations
}

type IdentityServiceSchema {
  user(id: String!): UserSchema
  platformRoles: [RoleSchema!]!
  users(offset: Int = 0, limit: Int = 100, query: String, sortField: UsersSortFieldType = username, sortOrder: SortOrderType = 1, includeDisabledUsers: Boolean = false, roles: [RoleType!] = []): [UserSchema!]
  usersCount(query: String, includeDisabledUsers: Boolean = false, roles: [RoleType!] = []): Int
  visibleRoles: [RoleSchema!]!
  platformBdMerchantCountries: [BDMerchantCountryCodeType!]!
}

type ImageChangeMlTaggerJobSchema {
  productId: ObjectIdType!
  jobId: ObjectIdType!
  state: TaggingJobState!
  datetimeQueued: Datetime!
  predictionProbability: Float
  mlEdition: Int
  taggingUser: UserSchema
  result: TaggingMLResult
  datetimeCompleted: Datetime
  gcpeListingReview: GCPEListingReviewSchema!
}

input ImageInput {
  id: Int
  url: String!
  isCleanImage: Boolean
}

type ImageSchema {
  id: Int!
  wishUrl(size: ImageSize = original): String!
  isCleanImage: Boolean!
}

enum ImageSize {
  LARGE
  MEDIUM
  ORIGINAL
  SMALL
  TINY
}

type InappropriateViolationSchema {
  isConfirmed: Boolean!
  reason: CounterfeitReasonCode
  reasonDisplayName: String
  reasonExplanation: String
  subcategoryMessage: String
}

type InappropriateViolationTaggingManagement {
  violationReasons: [TaggingViolationReason!]!
  violationSubcategories(inappropirateReason: CounterfeitReasonCode): [TaggingViolationSubcategory!]!
}

type InfoCollectedForPaymentProvider {
  email: String
}

type InfractionSchema {
  id: String!
  stateText: String
  reasonText: String
  updatedAt: Datetime!
}

input InitiateUploadInput {
  bucket: ClientWritableBucket!
  filename: String
  contentType: String!
}

type InitiateUploadMutation {
  ok: Boolean!
  message: String
  uploadUrl: String
  uploadHeaders: JSONString
  downloadUrl: String
}

type InjunctionMerchantFreezeBulkCreateFreezes {
  ok: Boolean!
  message: String
}

type InjunctionMerchantFreezeBulkReverseFreezes {
  ok: Boolean!
  message: String
}

input InjunctionMerchantFreezeBulkUploadInput {
  file: FileInput!
}

type InjunctionMerchantFreezeCreateFreeze {
  ok: Boolean!
  message: String
}

input InjunctionMerchantFreezeCreateFreezeInput {
  merchantId: ObjectIdType!
  fine: CurrencyInput
  fineType: FineReason!
  notes: String!
  troNumber: Int!
  freezeType: InjunctionMerchantFreezeType!
  creationTimestamp: DatetimeInput!
  isCascading: Boolean!
  useFullAccountBalance: Boolean!
}

type InjunctionMerchantFreezeExportCSV {
  ok: Boolean!
  message: String
}

input InjunctionMerchantFreezeFilterInput {
  freezeIds: [ObjectIdType!]
  merchantIds: [ObjectIdType!]
  troNumbers: [Int!]
  states: [InjunctionMerchantFreezeState!]
  freezeTypes: [InjunctionMerchantFreezeType!]
  fineIds: [ObjectIdType!]
  legalStartDateUnix: Int
  legalEndDateUnix: Int
  updatedStartDateUnix: Int
  updatedEndDateUnix: Int
}

input InjunctionMerchantFreezeFinePaymentInput {
  amountInUsd: Float!
  fineType: FineReason!
  merchantId: ObjectIdType!
  troNumber: Int!
}

input InjunctionMerchantFreezeFineReversalInput {
  fineId: ObjectIdType!
  reversal: CurrencyInput!
  notes: String!
  shouldCascadeFunds: Boolean!
}

type InjunctionMerchantFreezeMutations {
  resolveFreeze(input: InjunctionMerchantFreezeResolveFreezeInput!): InjunctionMerchantFreezeResolveFreeze
  updateLegalTimestamp(input: InjunctionMerchantFreezeUpdateLegalTimestampInput!): InjunctionMerchantFreezeUpdateLegalTimestamp
  bulkCreateFreezes(input: InjunctionMerchantFreezeBulkUploadInput!): InjunctionMerchantFreezeBulkCreateFreezes
  bulkReverseFreezes(input: InjunctionMerchantFreezeBulkUploadInput!): InjunctionMerchantFreezeBulkReverseFreezes
  createFreeze(input: [InjunctionMerchantFreezeCreateFreezeInput!]!): InjunctionMerchantFreezeCreateFreeze
  reverseFreeze(input: InjunctionMerchantFreezeReverseFreezeInput!): InjunctionMerchantFreezeReverseFreeze
  exportCsv(input: InjunctionMerchantFreezeFilterInput!): InjunctionMerchantFreezeExportCSV
  reverseAllFines(input: InjunctionMerchantFreezeReverseAllFinesInput!): InjunctionMerchantFreezeReverseAllFines
}

type InjunctionMerchantFreezeResolveFreeze {
  ok: Boolean!
  message: String
}

input InjunctionMerchantFreezeResolveFreezeInput {
  freezeId: ObjectIdType!
}

input InjunctionMerchantFreezeReversalRequestInput {
  reversalType: FreezeReversalType!
  reversalInput: InjunctionMerchantFreezeFineReversalInput
  paymentInput: InjunctionMerchantFreezeFinePaymentInput
}

type InjunctionMerchantFreezeReverseAllFines {
  ok: Boolean!
  message: String
}

input InjunctionMerchantFreezeReverseAllFinesInput {
  freezeId: ObjectIdType!
  merchantId: ObjectIdType!
  requests: [InjunctionMerchantFreezeFineReversalInput!]!
}

type InjunctionMerchantFreezeReverseFreeze {
  ok: Boolean!
  message: String
}

input InjunctionMerchantFreezeReverseFreezeInput {
  requests: [InjunctionMerchantFreezeReversalRequestInput!]!
  useBackend: Boolean = false
}

type InjunctionMerchantFreezeSchema {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  freezeType: InjunctionMerchantFreezeType!
  troNumber: Int!
  fineIds: [ObjectIdType!]!
  fines: [MerchantFineSchema!]!
  legalCounselCreationTs: Datetime!
  sumOfFineAmounts: CurrencyValue!
  tentativeFreezeAmount: CurrencyValue
  state: InjunctionMerchantFreezeState!
  lastUpdatedAt: Datetime!
}

enum InjunctionMerchantFreezeState {
  ACTIVE
  RESOLVED
}

enum InjunctionMerchantFreezeType {
  FULL_ASSET_FREEZE
  ONE_TIME_FREEZE
}

type InjunctionMerchantFreezeUpdateLegalTimestamp {
  ok: Boolean!
  message: String
}

input InjunctionMerchantFreezeUpdateLegalTimestampInput {
  freezeId: ObjectIdType!
  newTimestamp: DatetimeInput!
}

input InventoryInput {
  warehouseId: ObjectIdType!
  count: Int!
}

type InventorySchema {
  warehouseId: ObjectIdType!
  shippingType: WarehouseShippingType!
  count: Int!
}

enum IsRequiredEnum {
  NOT_INCLUDED
  OPTIONAL
  REQUIRED
}

type IssueRefund {
  ok: Boolean!
  message: String
}

input IssueRefundInput {
  orderId: ObjectIdType!
  refundReason: ReturnRequestRefundReason!
  message: String!
  refundType: RefundType!
  partialRefundType: PartialRefundType
  refundAmount: CurrencyInput
  refundQuantity: Int
  refundPercentage: Float
}

scalar JSONString

enum KYCMerchantType {
  NOT_SET
  COMPANY
  INDIVIDUAL
}

enum KYCProfilePaymentStatus {
  PAYMENT_ALLOWED
  PAYMENT_HELD
  PAYMENT_HOLD_PROPOSED
}

enum KYCProfileVerificationAdminStatus {
  REJECTED
  INVALID
  NOT_SET
  IN_PROGRESS
  APPROVED
  ON_HOLD
}

enum KYCProfileVerificationRiskScore {
  HIGH
  NOT_SET
  VERY_HIGH
  MEDIUM
  LOW
}

enum KYCProfileVerificationStatus {
  REJECTED
  COMPLETE
  INCOMPLETE
}

type KycVerificationSchema {
  status: KYCProfileVerificationStatus
  paymentStatus: KYCProfilePaymentStatus
  adminStatus: KYCProfileVerificationAdminStatus
  riskScore: KYCProfileVerificationRiskScore
  merchantType: KYCMerchantType
  isMandatory: Boolean
  canStart: Boolean!
  fromV2Flow: Boolean!
}

input LQDCampaignInput {
  productId: ObjectIdType!
  startDate: DatetimeInput!
}

type LQDCampaignSchema {
  id: ObjectIdType!
  productId: ObjectIdType!
  product: ProductSchema!
  startDate: Datetime!
  endDate: Datetime!
  state: LQDCampaignState!
  impressions: Int!
}

enum LQDCampaignState {
  CANCELLED
  ENDED
  STARTED
  SAVED
  NEW
}

type LQDProductStatsByDaySchema {
  productId: ObjectIdType!
  product: ProductSchema!
  date: Datetime!
  clicks: Int!
  impressions: Int!
  lqdOrders: Int!
  orders: Int!
  gmv: CurrencyValue!
}

type LQDPromotionSchema {
  campaigns(startDate: DatetimeInput!, endDate: DatetimeInput!, offset: Int = 0, limit: Int = 15): [LQDCampaignSchema!]!
  campaignsCount(startDate: DatetimeInput!, endDate: DatetimeInput!): Int!
}

type LQDPromotionStats {
  byDay: [LQDProductStatsByDaySchema!]!
}

type LateDeliverySchema {
  rate: Float
  threshhold: Float
}

type LatestListingFeeDetailsSchema {
  latestItems: Int!
}

type LedgerAccountBalance {
  amount: Float!
  currency: PaymentCurrencyCode!
  balanceType: LedgerAccountBalanceType!
}

enum LedgerAccountBalanceType {
  CONFIRMED
  PENDING
}

type LedgerEvent {
  id: String!
  eventType: LedgerEventType!
  documentId: String
  eventTime: Datetime!
  data: String!
}

enum LedgerEventType {
  FINE_ELIGIBILITY_UPDATE
  ARRIVE_AT_EPC_WAREHOUSE
  USER_CONFIRMED_DELIVERED
  FEE_CREATION
  TRACKING_CANCELLED
  CONFIRMED_DELIVERED
  LEDGER_ITEM_FETCH
  TAX_UPDATE
  REBATE_CREATE
  FEE_ELIGIBILITY_UPDATE
  CONFIRMED_SHIPPED
  ONEOFF_PAYMENT_CREATION
  RECEIVE_WP_SHIPPING_ADJUSTMENT
  RECEIVE_INITIAL_WP_SHIPPING
  REMOVED_FROM_A_PLUS
  LEDGER_ITEM_STATE_BATCH_UPDATE
  FINE_REVERSAL
  PAYMENT_AMOUNT_AMENDMENT
  FINE_CREATION
  MARKED_SHIPPED
  ORDER_RELEASED
  ONEOFF_PAYMENT_CANCEL
  DISPUTE_SUCCESS
  ORDER_WITHHOLD_CANCEL
  REBATE_CANCEL
  ORDER_REFUND
  ACCOUNT_BALANCES_FETCH
  FEE_REVERSAL
  ORDER_WITHHOLD
  TAX_ADJUSTMENT
  TRACKING_AMENDMENT
}

type LedgerItem {
  id: String
  merchantPayableId: String!
  payableType: LedgerPayableType!
  merchantId: String!
  documentId: String!
  state: LedgerPayableState!
  paymentType: PaymentType!
  createdTime: Datetime!
  paymentEligibleTime: Datetime
  description: LedgerItemDescriptionDetails!
  creditAmount: CurrencyValue
  debitAmount: CurrencyValue
  type: LedgerLineItemType!
  feeType: LedgerLineItemFeeType
  feeNote: String
}

type LedgerItemDescriptionDetails {
  descriptionText: String!
  idDetailList: [IdDetails!]
}

type LedgerItemInfo {
  itemCount: Int
  itemList: [LedgerItem!]
  nextCutoffTime: Datetime
  nextCutoffId: String
}

enum LedgerLineItemFeeType {
  EARLY_PAYMENT_DEDUCTION
  PROMOTION_FEE
  UNREASONABLE_PRICE_GAUGE
  PRODUCT_LISTING_FEE
  MERCHANT_CANCELLATION
  FAKE_RATING
  LEGAL_SETTLEMENT_RESERVED
  INVALID_EU_RESPONSIBLE_PERSON
  B2B_SALE_FEE
  POLICY_VIOLATION
  STORE_PAYMENT_DEDUCTION
  CN_PROHIBITED_PRODUCTS
  IP_INFRINGEMENT
  LEGAL_SETTLEMENT_PAID
  WITHHOLD_FUND
  ONEOFF_FEE
  UNFULFILLED_ORDER
  MERCHANT_HARASSMENT
  LOGISTIC_FEE
  ONEOFF
  PROHIBITED_PRODUCT_FINE
  WISH_EXPRESS_VIOLATION
  COLLECTIONS_BOOST_CAMPAIGN_FEE
  RETURN_LABEL_FEE
  EXTERNAL_BOOST_FEE
  LEGAL_SETTLEMENT
  WISH_PARCEL_SERVICE_ADJUST_FEE
  WISHPOST_ADJUSTMENT_DEDUCTION
  MERCHANT_INCENTIVE
  FBW_FEE
  PROMOTED_PRODUCT_DISABLE_FINE
  MISLEADING_VARIATION
  FAKE_TRACKING
  UNCONFIRMED_CARRIER
  DEP_INFRACTION
  STORE_PAYMENT_CANCELLATION
  WISH_EXPRESS_WITHHELD_ORDER
  WISHPOST_LOGISTICS_FEE
  SE_CASH_BACK
  EXTERNAL_BOOST_CPA_FEE
  WISHPOST_FULFILLMENT_FEE
  QUALITY_REFUND_FINE
  PAID_PLACEMENT_IMPRESSION_FEE
  CN_ORDER_NOT_SHIP_WITH_WISHPOST
  LCL_FBW_FEE
  CONSOLIDATE_MP_FINE
  REPEAT_IP_INFRINGEMENT
  WISH_PARCEL_SERVICE_FEE
  DECEPTIVE_FULFILLMENT
  MISLEADING_LISTING
  MISLEADING_LISTING_AUTHENTIC_BRAND
  LATE_CONFIRMED_FULFILLMENT
  PAID_PLACEMENT_ENROLLMENT_FEE
  PRODUCT_SWAPPED
}

enum LedgerLineItemType {
  ORDER
  REFUND
  REBATE
  REBATE_CANCEL
  INITIAL_WP_SHIPPING
  INITIAL_WP_SHIPPING_OFFSET
  INITIAL_WP_SHIPPING_REFUND
  ESTIMATED_WP_SHIPPING
  ESTIMATED_WP_SHIPPING_REFUND
  TAX_ADJUSTMENT
  INITIAL_WP_SHIPPING_REFUND_OFFSET
  TAX
  TAX_REFUND
  FINE_DEDUCTION
  FINE_REVERSAL
  FEE_DEDUCTION
  FEE_REVERSAL
  ONEOFF_PAYMENT
  ONEOFF_PAYMENT_CANCELLATION
  PAYMENT
  CONSOLIDATION
}

type LedgerOrderInfo {
  orderReleasedTime: Datetime
  isValueOrder: Boolean
  isFbwFastPayment: Boolean
  isAplusOrder: Boolean
  isEpcOrder: Boolean
  isTopStandingMerchant: Boolean
  isExpeditedPolicy: Boolean
  isUnityOrder: Boolean
  isWishExpress: Boolean
  isWishLocal: Boolean
  trackingId: String
  shippedTime: Datetime
  confirmedShippedTime: Datetime
  carrierTier: OrderCarrierTier
  confirmedDeliveredTime: Datetime
  isFakeTrackingOrder: Boolean
  removedFromAplusTime: Datetime
  warehouseArrivalTime: Datetime
  trackingCancelledTime: Datetime
  userReceivedTime: Datetime
  disputeConfirmedTime: Datetime
  disputeDeliveredTime: Datetime
  disputeCarrierTier: OrderCarrierTier
}

type LedgerPayableInfo {
  ledgerItems: [LedgerItem!]
  ledgerEvents: [LedgerEvent!]
}

enum LedgerPayableState {
  LIMBO
  NEW
  SETTLED
  PAID_IN_CLROOT
}

enum LedgerPayableType {
  PAYOUT
  SETTLEMENT
  FINE
  ONEOFF
  ORDER
}

enum LegacyRefundSource {
  MERCHANT
  USER_CANCEL
  WISH_ADMIN_MERCHANT_EATS_COST
  WISH_ADMIN_BOTH_EAT_COST
  WISH_ADMIN_WISH_EATS_COST
  AUTO_LATE_FULFILL
}

type Length {
  value(targetUnit: LengthUnit): Float!
  unit: LengthUnit!
}

input LengthInput {
  value: Float!
  unit: LengthUnit!
}

enum LengthUnit {
  METER
  CENTIMETER
  INCH
  FEET
  YARD
}

enum LineItemSearchType {
  CTXN_REFUND_ITEM_ID
  MERCHANT_ONEOFF_PAYMENT_ID
  FINE_ID
  ORDER_ID
  DISPUTE_ID
  CAMPAIGN_ID
  LOGISTIC_PROVIDER_ID
  FINE_REVERSAL_ID
  REFUND_DETAIL_ID
  CHARGING_ID
  WARNING_ID
  LOGISTIC_OPTION_ID
  TRANSACTION_REFUND_ID
  ID
  MERCHANT_PAYMENT_ID
  FBW_INVOICE_ID
}

enum LineItemType {
  POLICY_VIOLATION_FINE
  MISLEADING_VARIATION_FINE
  B2B_SALE_FEE
  WISH_PARCEL_SERVICE_ADJUST_PAYMENT
  INITIAL_WISHPOST_SHIPPING_REFUND_OFFSET
  REV_SHARE_ADJUST_PAYMENT
  WISH_EXPRESS_REBATE_REVERSE
  DISPUTE_APPROVED
  WITHHELD_RELEASED
  LOGISTIC_FEE
  EARLY_PAYMENT
  OVERPAY_PAYMENT_AMOUNT
  QUALITY_REFUND_FINE
  MERCHANT_HARASSMENT
  WISHPOST_ADJUSTMENT_PAYMENT
  WITHHOLD_FUND_FINE
  EXTERNAL_BOOST_CPA_FEE
  UNDERPAY_PAYMENT_AMOUNT
  STRATEGIC_ORDER_REBATE
  PAID_PLACEMENT_IMPRESSION_FEE
  LCL_FBW_FEE
  EARLY_PAYMENT_CANCELLATION
  DECEPTIVE_FULFILLMENT_FINE
  STORE_PAYMENT_CANCELLATION
  ESTIMATED_WISHPOST_SHIPPING
  PAYMENT
  MARKETING_REBATE
  UNFULFILLED_ORDER_FINE
  PRODUCT_UNTAGGED_MISLEADING
  FBW_PAYMENT
  CHINA_POST_SUBSIDY_REVERSE
  WISHPOST_LOGISTICS_FEE
  CANCEL_WITHHOLD_PAYMENT
  COUNTERFEIT_REFUND
  COVID19_SUBSIDY_REVERSE
  COLLECTIONS_BOOST_CAMPAIGN_FEE
  RETURN_LABEL_FEE
  ONEOFF_FINE
  WISHPOST_ADJUSTMENT_DEDUCTION
  FINE_REVERSED
  TRANSACTION_FEE_REBATE_REVERSE
  PRODUCT_REBATE
  DOUBLE_DEDUCTION_BOOK_KEEPER
  LATE_CONFIRMED_FULFILLMENT_FINE
  WISHPOST_FULFILLMENT_FEE
  FAKE_TRACKING_FINE
  WITHHOLD_RELEASE
  REFUNDED
  PRODUCT_LISTING_FEE
  CONSOLIDATE_MP_PAYMENT
  OTHER_DEDUCTION
  REGISTRATION_REFUND
  EARLY_PAYMENT_REIMBURSEMENT_FEE
  ONEOFF
  TRANSACTION_FEE_REBATE
  EXTERNAL_BOOST_FEE
  MARKETING_REBATE_REVERSE
  MERCHANT_INCENTIVE
  PROMOTED_PRODUCT_DISABLE_FINE
  INFRACTION_FINE
  MERCHANT_INCENTIVE_REVERSE
  RETROACTIVE_REFUND_FOR_LOW_RATED_PRODUCT
  PRODUCT_BOOST_BALANCE_REFUND
  NEW_REFUNDED
  SE_CASH_BACK
  LEGAL_SETTLEMENT_FINE
  FBW_FEE
  MERCHANT_CANCELLATION_FINE
  EARLY_PAYMENT_DEDUCTION
  PROMOTION_FEE
  LEGAL_SETTLEMENT_RESERVED_PENALTY
  COVID19_SUBSIDY
  STORE_PAYMENT_DEDUCTION
  SE_CASH_BACK_REVERSE
  RETROACTIVE_REFUND_FOR_PROBLEM_PRODUCT
  FAKE_RATING_FINE
  ESTIMATED_WISHPOST_SHIPPING_REFUND
  INITIAL_WISHPOST_SHIPPING_REFUND
  CN_ORDER_NOT_SHIP_WITH_WISHPOST_FINE
  INITIAL_WISHPOST_SHIPPING
  CHINA_POST_SUBSIDY
  STORE_PAYMENT
  WISH_EXPRESS_REBATE
  ONEOFF_ADMIN_TOOL
  SHIPPED
  WITHHOLD_PAYMENT
  INITIAL_WISHPOST_SHIPPING_OFFSET
  LEGAL_SETTLEMENT_PAID_PENALTY
  WISH_PARCEL_SERVICE_ADJUST_FEE
  CONSOLIDATE_MP_FINE
  UNCONFIRMED_CARRIER_FINE
  WISH_PARCEL_SERVICE_FEE
  PAID_PLACEMENT_ENROLLMENT_FEE
  STRATEGIC_ORDER_REBATE_REVERSE
}

enum LinkProductComplianceAction {
  UPDATE_EU_RP
  UPDATE_GERMANY_UIN
  UPDATE_FRANCE_UIN
}

type LinkProductComplianceSchema {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  product: ProductSchema
  productCategories: [MSRCategory!]!
  complianceCategories: [EUProductComplianceCategory!]!
  trueTags: [TrueTagSchema!]
  reviewState: LinkProductComplianceState!
  euResponsiblePerson: ResponsiblePersonSchema
  isLinkedWithFranceUin: Boolean
  isLinkedWithGermanyUin: Boolean
  franceUins: [FranceProductUniqueIdentificationNumberSchema!]
  germanyUins: [GermanyProductUniqueIdentificationNumberSchema!]
}

enum LinkProductComplianceState {
  HAS_UIN
  HAS_RP
  NO_RP
  NO_UIN
}

enum LinkProductComplianceType {
  DE_COMPLIANCE
  FR_COMPLIANCE
  EU_COMPLIANCE
}

input LinkProductComplianceUpsertInput {
  action: LinkProductComplianceAction!
  productIds: [ObjectIdType!]!
  responsiblePersonId: ObjectIdType
  uinIds: [ObjectIdType!]
}

type LinkShippingProfile {
  ok: Boolean!
  message: String
}

type ListingQualityInsightsReportSchema {
  presignedS3Url: String
  reportName: String
  errorCode: ErrorCode
}

type ListingQualityInsightsSchema {
  report: ListingQualityInsightsReportSchema
}

type ListingStateSchema {
  state: CommerceProductListingState!
  reason: CommerceProductListingStateReason
}

enum Locale {
  en
  zh
  de
  fr
  es
  pt
  sv
  tr
  pl
  nl
  ar
  cs
  hu
  da
  fi
  nb
  ko
  ja
  it
  th
  vi
  id
  up
}

type LocaleMutations {
  changeLocale(input: ChangeLocaleInput!): ChangeLocale!
}

type LogToTreasureData {
  ok: Boolean
}

input LogToTreasureDataInput {
  table: LoggableTable!
  data: JSONString!
}

enum LoggableTable {
  PRODUCT_BOOST_EXPOSURE_BOX_VIEW
  PRODUCT_BOOST_EXPOSURE_BOX_CREATE_CLICK
  PRODUCT_BOOST_EXPOSURE_BOX_LEARN_MORE_CLICK
  PRODUCT_BOOST_SPLASH_PAGE
  PRODUCT_BOOST_LIST_CAMPAIGN_BUDGET_DEPLETION_CLICK
  PRODUCT_BOOST_LIST_CAMPAIGN_BUDGET_DEPLETION_VIEW
  PRODUCT_BOOST_NEW_NAV_TAB_CLICK
  PRODUCT_BOOST_PUBLISH_AUTOMATED_CAMPAIGN_MODAL_VIEW
  PRODUCT_BOOST_PUBLISH_AUTOMATED_CAMPAIGN_MODAL_CLICK
  PRODUCT_BOOST_PRODUCT_FEEDBACK_VIEW
  PB_BUDGET_DEPLETION_NOTI
  PB_AUTOMATED_CAMPAIGN_PUBLISHED_NOTI
  PB_CREATE_CAMPAIGN_ACTIVITY_TRACKER
  PB_CREATE_CAMPAIGN_BUDGET_TRACKER
  PB_CREATE_CAMPAIGN_USER_ERRORS
  PB_PRODUCT_FEED_UPLOAD_PORTAL
  PB_V2_CREATE_CAMPAIGN_ACTIVITY_TRACKER
  PRODUCT_BOOST_FREE_PROMOTION_CAMPAIGN_MODAL_VIEW
  PRODUCT_BOOST_FREE_PROMOTION_CAMPAIGN_MODAL_CLICK
  PRODUCT_BOOST_DUPLICATE_CAMPAIGN_REMINDER_VIEW
  PRODUCT_BOOST_DUPLICATE_CAMPAIGN_REMINDER_CLICK
  PRODUCT_BOOST_PROMOTION_MODAL
  PRODUCT_BOOST_ENABLE_PENDING_CAMPAIGN_MODAL
  PRODUCT_BOOST_ENABLE_PENDING_CAMPAIGN_MODAL_CLICK
  CAMPAIGN_DETAILS_PAGE_MERCHANT_ACTION
  FBW_SPLASH_PAGE
  TAX_DECLINE_ENROLLMENT
  HOME_BANNER_IMPRESSION
  HOME_BANNER_CTA_CLICK
  MERCHANT_TODO_ITEMS
  PRODUCT_BOOST_ONE_CLICK_DUPLICATE_AUTOMATED
  PRODUCT_BOOST_NEW_PAGES_BUTTON_CLICK
  MERCHANT_STANDING_CLICK
  FINE_POLICY_PAGE_CLICK
  MERCHANT_NAV_CLICK
  FBW_RECOMMENDATION_DASHBOARD_CLICK
  FBW_INVENTORY_LISTING_PAGE_ACTION
  FBW_SHIPPING_PLAN_CREATION
  FBS_PERFORMANCE_PAGE_ACTION
  ADD_PRODUCT_BUTTON_CLICK
  PRODUCT_BOOST_PRODUCT_LIFETIME_PERFORMANCE_PAGE_VIEW
  BRAND_EDUCATION_CLICK
  RESELLER_AGREEMENT_PAGE
  SIGNUP_V3_ID_CARD_EXAMPLE
  PB_BUDGET_DEPLETION_SOURCE
  PRODUCT_BOOST_FREE_CREDIT_MODAL
  PRODUCT_BOOST_TRENDING_CATEGORIES_MODAL
  MM_INTERNAL_DOWNLOADS
  EARLY_PAYMENT_REQUESTS
  CLICK_CHECK_MY_MAIL
  RECOMMENDATION_EMAIL_METRICS
  EARLY_PAYMENT_PAGE
  CHROME_SEARCH
  MERCHANT_FAILED_PASSWORD_ATTEMPTS
  HOME_PAGE_TUTORIAL_VIDEO_PLAYS
  BLACKLIST_CRITERIA_DASHBOARD_ACTION
  PRODUCT_BOOST_MANAGE_DAILY_BUDGET_CAMPAIGN_PAGE_VIEW
  PRODUCT_BOOST_UPDATE_DAILY_BUDGET_CAMPAIGN_CLICK
  PRODUCT_BOOST_CREATE_DAILY_BUDGET_CAMPAIGN_PAGE_VIEW
  PRODUCT_BOOST_CREATE_DAILY_BUDGET_CAMPAIGN_CLICK
  COLLECTIONS_BOOST_UI
  PLUS_WISH_EXPRESS_UI
  PLUS_SELLER_VERIFICATION_UI
  PLUS_KYC_VERIFICATION_UI
  PRODUCT_SHIPPING_PAGE_VIEW
  PRODUCT_SHIPPING_CLICK_SAVE
  ADD_GTIN_PRODUCT
  MERCHANT_VACATION_MODE_SURVEY
  PLUS_PRODUCT_UPLOAD
  PERFORMANCE_OVERVIEW_DASHBOARD
  MERCHANT_CS_SURVEY_RESULT
  MERCHANT_WISH_PARCEL_SERVICE
  MFP_MERCHANT_ACTIVITY_LOG
}

type LogicalQueueSchema {
  id: ObjectIdType!
  name: String
  state: LogicalQueueStateType
}

enum LogicalQueueStateType {
  ACTIVE
  DISABLED
}

type LoginAsMutations {
  user(input: ByUserIdInput!): ByUserIdMutation
}

enum LoginErrorState {
  TFA_REQUIRED
  CAPTCHA_REQUIRED
  LOGIN_ERROR
}

type LoginMutation {
  error: String
  errorState: LoginErrorState
  loginOk: Boolean!
  sessionKey: String
  obfuscatedPhoneNumber: String
  preferQr: Boolean
  wechatBound: Boolean
}

input LoginMutationInput {
  username: String!
  password: String!
  rememberMe: Boolean
  tfaToken: String
  qrTicket: String
  captchaToken: String
  captchaCode: String
  deviceId: String
  deviceName: String
}

type LogisticsMetadataSchema {
  weight: Weight
  length: Length
  width: Length
  height: Length
  isFbwRecommended: Boolean
  gmvPer1k: CurrencyValue
}

type LogisticsMutations {
  upsertConfirmedDeliveryCarrier(input: DeliveryCarrierUpsertInput!): UpsertConfirmedDeliveryCarrier
  createShippingProvider(input: ShippingProviderInput!): CreateShippingProvider!
  changeShippingProviderStatus(input: ChangeShippingProviderStatusInput!): ChangeShippingProviderStatus!
  updateShippingProviderName(input: UpdateShippingProviderNameInput!): UpdateShippingProviderName!
  updateShippingProvider(input: ShippingProviderInput!): UpdateShippingProvider!
  fulfilledByWish: FulfilledByWishMutations
}

type LogisticsSchema {
  confirmedDeliveryCarrier: ConfirmedDeliveryCarriers
  shippingProviders(query: String, searchType: ShippingProviderSearchType, offset: Int = 0, limit: Int = 20, states: [ShippingProviderState!], isQualified: Boolean = false): [ShippingProviderSchema!]
  shippingProvidersCount(query: String, searchType: ShippingProviderSearchType, states: [ShippingProviderState!]): Int
  nextProviderId: Int
  fbw: FulfilledByWishSchema!
}

type LogoutMutation {
  ok: Boolean!
  error: String
}

type MFPCampaignCancelInfo {
  reason: MFPCampaignCancelReason!
  comment: String
  cancelledTime: Datetime!
}

enum MFPCampaignCancelReason {
  WISH_CANCELLED_FAILED_DEPENDENCIES
  WISH_CANCELLED_UNQUALIFIED_MERCHANT
  MERCHANT_CANCELLED_WRONG_CAMPAIGN_INFO
  WRONG_PRODUCTS
  OTHER
}

type MFPCampaignConstantsSchema {
  maxAllowedQuantity: Int!
  maxCampaignNameLength: Int!
  minCampaignDelayInHour: Int!
  maxCampaignDelayInHour: Int!
  maxCampaignDurationInDays: Int!
  minDiscountPercentage: Float!
  maxDiscountPercentage: Float!
  maxProductVariations: Int!
  maxCampaignsPerRequest: Int!
  pricingGamingIgnoreThreshold: Float!
  pricingGamingCancelThreshold: Float!
  consumerMinDiscountPercentage: Float!
  consumerMaxDiscountPercentage: Float!
}

enum MFPCampaignEventConfig {
  UNSPECIFIED
  EXCLUDE_EVENT
  EVENT_ONLY
}

enum MFPCampaignEventSortBy {
  SUBMISSION_DEADLINE
  START_TIME
  END_TIME
}

enum MFPCampaignPromotionType {
  PRICE_DISCOUNT
  FLASH_SALE
  SPEND_MORE_AND_SAVE_MORE
}

type MFPCampaignSchema {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  isNewVersion: Boolean!
  name: String!
  promotionType: MFPCampaignPromotionType!
  creationTime: Datetime!
  startTime: Datetime!
  endTime: Datetime!
  cancelInfo: MFPCampaignCancelInfo
  state: MFPCampaignState!
  unqualifiedProductVariations: [MFPUnqualifiedVariationData!]
  discountDetails: [MFPVariationDiscountData!]
  discountDetailsProductCount: Int
  flashSaleDetails: [MFPVariationDiscountData!]
  flashSaleDetailsProductCount: Int
  countries: [Country!]
  products: [GenericScalar!]
  skipShipping: Boolean!
  event: CampaignEventInfo
  genericUnqualifiedProductVariations: GenericScalar
  genericDiscountDetails(performanceStartDate: DatetimeInput, performanceEndDate: DatetimeInput, offset: Int, limit: Int): GenericScalar
  genericFlashSaleDetails(performanceStartDate: DatetimeInput, performanceEndDate: DatetimeInput, offset: Int, limit: Int): GenericScalar
}

enum MFPCampaignSearchType {
  CAMPAIGN_NAME
  CAMPAIGN_ID
  PRODUCT_ID
}

enum MFPCampaignState {
  PENDING
  CANCELLED
  APPROVED
  CREATING
}

type MFPConstantsSchema {
  campaign: MFPCampaignConstantsSchema
  discountCampaign: MFPDiscountCampaignConstantsSchema
  flashSaleCampaign: MFPFlashSaleConstantsSchema
}

type MFPDiscountCampaignConstantsSchema {
  minimumProductRatingRequired: Int!
  minimumProductRatingCountRequired: Int!
  minimumProductSaleRequired: Int!
  minimumProductHistoryDays: Int!
  minimumCooldownDays: Int!
  minimumPercentageRequired: Int!
  productAndShippingPriceDays: Int!
  minDiscountPercentage: Float!
  maxDiscountPercentage: Float!
  maxDiscountDifference: Float!
  maxShippingIncreasePercentage: Float!
  minStartTimeForLaunch: Datetime!
  minDaysProductListed: Int!
  minDaysVariationListed: Int!
}

type MFPFlashSaleConstantsSchema {
  minimumProductRatingRequired: Int!
  minimumProductRatingCountRequired: Int!
  minimumProductSaleRequired: Int!
  minimumProductHistoryDays: Int!
  minimumCooldownDays: Int!
  minimumPercentageRequired: Int!
  productAndShippingPriceDays: Int!
  minDiscountPercentage: Float!
  maxDiscountPercentage: Float!
  minDealQuantityPercentage: Float!
  maxDiscountDifference: Float!
  maxShippingIncreasePercentage: Float!
  minStartTimeForLaunch: Datetime!
  minDaysProductListed: Int!
  minDaysVariationListed: Int!
}

enum MFPProductSearchType {
  ID
  NAME
  SKU
}

type MFPPromotionSchema {
  id: ObjectIdType!
  eventId: ObjectIdType
  campaignId: ObjectIdType!
  merchantId: Boolean!
  promotionType: MFPCampaignPromotionType!
  startTime: Datetime!
  endTime: Datetime!
  cancelAt: Datetime
  state: MFPPromotionStateType!
  countries: [Country!]!
  availableQuantity: Int!
  maxQuantity: Int!
  productVariationData: ProductVariationData!
  discountData: PromotionDiscountData!
}

enum MFPPromotionSearchType {
  PROMOTION_ID
  CAMPAIGN_ID
  PRODUCT_ID
}

enum MFPPromotionStateType {
  APPROVED
  CANCELLED
}

type MFPServiceAdminMutations {
  createWhitelistProducts(input: CreateWhitelistProductsInput!): CreateWhitelistProductsMutation!
  expireWhitelistProducts(input: ExpireWhitelistProductsInput!): ExpireWhitelistProductsMutation!
  cancelMfpCampaign(input: CancelMFPCampaignInput!): AdminCancelMFPCampaign!
  refreshCampaignQuantity(input: AdminRefreshCampaignQuantityInput!): AdminRefreshCampaignQuantity!
  removeProducts(input: RemoveProductsInput!): AdminRemoveProductsMutation!
  removeCountries(input: AdminRemoveCountriesInput!): AdminRemoveCountriesMutation!
}

type MFPServiceMutations {
  upsertDiscountCampaign(input: UpsertDiscountCampaignInput!): UpsertDiscountCampaignMutation!
  upsertFlashSaleCampaign(input: UpsertFlashSaleCampaignInput!): UpsertFlashSaleCampaignMutation!
  cancelMfpCampaign(input: CancelMFPCampaignInput!): CancelMFPCampaign!
  createProductsDownloadJob(input: CreateProductsDownloadJobInput!): CreateProductsDownloadJobMutation!
  admin: MFPServiceAdminMutations
}

type MFPServiceSchema {
  countryShippingEnabled: Boolean
  promotions(searchType: MFPPromotionSearchType, searchQuery: String, offset: Int = 0, limit: Int = 25): [MFPPromotionSchema!]
  genericCampaigns(startAtMin: DatetimeInput, startAtMax: DatetimeInput, endAtMin: DatetimeInput, endAtMax: DatetimeInput, searchType: MFPCampaignSearchType, searchQuery: String, states: [MFPCampaignState!], promotionTypes: [MFPCampaignPromotionType!], offset: Int = 0, limit: Int = 25, performanceStartDate: DatetimeInput, performanceEndDate: DatetimeInput): [GenericScalar!]
  campaigns(merchantId: ObjectIdType, startAtMin: DatetimeInput, startAtMax: DatetimeInput, endAtMin: DatetimeInput, endAtMax: DatetimeInput, searchType: MFPCampaignSearchType, searchQuery: String, states: [MFPCampaignState!], promotionTypes: [MFPCampaignPromotionType!], offset: Int = 0, limit: Int = 25, eventIds: [ObjectIdType!], eventConfig: MFPCampaignEventConfig): [MFPCampaignSchema!]
  campaignsCount(merchantId: ObjectIdType, startAtMin: DatetimeInput, startAtMax: DatetimeInput, endAtMin: DatetimeInput, endAtMax: DatetimeInput, searchType: MFPCampaignSearchType, searchQuery: String, states: [MFPCampaignState!], promotionTypes: [MFPCampaignPromotionType!], eventIds: [ObjectIdType!], eventConfig: MFPCampaignEventConfig): Int
  genericEligibleProducts(currency: PaymentCurrencyCode!, promotionType: MFPCampaignPromotionType, searchQuery: String, searchType: MFPProductSearchType, eventId: ObjectIdType, offset: Int = 0, limit: Int = 20, sort: ProductSort, countries: [CountryCode!]): GenericScalar
  eligibleProducts(promotionType: MFPCampaignPromotionType, searchQuery: String, searchType: MFPProductSearchType, eventId: ObjectIdType, offset: Int = 0, limit: Int = 20, sort: ProductSort): [EligibleProductInfo!]
  eligibleProductsCount(promotionType: MFPCampaignPromotionType, searchQuery: String, searchType: MFPProductSearchType, eventId: ObjectIdType): Int
  activeWhitelistProducts(merchantId: ObjectIdType, productIds: [ObjectIdType!], offset: Int = 0, limit: Int = 25, sort: WhitelistProductSort): [WhitelistProductInfo!]
  activeWhitelistProductsCount(merchantId: ObjectIdType, productIds: [ObjectIdType!]): Int
  campaignEvents(startAtMin: DatetimeInput, startAtMax: DatetimeInput, submitAtMin: DatetimeInput, submitAtMax: DatetimeInput, offset: Int = 0, limit: Int = 10, sort: CampaignEventSort, promotionTypes: [MFPCampaignPromotionType!]): [CampaignEventInfo!]
  campaignEventsCount(startAtMin: DatetimeInput, startAtMax: DatetimeInput, submitAtMin: DatetimeInput, submitAtMax: DatetimeInput, promotionTypes: [MFPCampaignPromotionType!]): Int
  checkEligibility(variationIds: [ObjectIdType!], promotionType: MFPCampaignPromotionType, eventId: ObjectIdType): GenericScalar
}

type MFPUnqualifiedVariationData {
  productId: ObjectIdType!
  product: ProductSchema!
  variationId: ObjectIdType!
  variation: VariationSchema!
  reason: MFPVariationUnqualifiedReason!
}

type MFPVariationDiscountData {
  productId: ObjectIdType!
  product: ProductSchema!
  variationId: ObjectIdType!
  variation: VariationSchema!
  maxQuantity: Int
  discountPercentage: Float!
  discountAmount: CurrencyValue
  countryDiscountAmount: GenericScalar
  scheduledStartTime: Datetime
  scheduledEndTime: Datetime
}

enum MFPVariationUnqualifiedReason {
  LOW_RATING
  SALE_HISTORY
  PRODUCT_CATEGORY
  NOT_IN_STOCK
  PRODUCT_PRICE
  PRODUCT_SHIPPING_PRICE
  CAMPAIGN_LIMIT
  FLASH_SALE_MINIMUM_DEAL_QUANTITY
  MININUM_VARIATION_PERCENTAGE
  VARIATIONS_PRICING_GAMING
  PRODUCT_LISTED_DAYS
  MERCHANT_ELIGIBILITY
  NOT_OWNED_BY_MERCHANT
  UNITY_PRODUCT
  INVALID_ID
  FRS_LOW_DISCOUNT
  FRS_HIGH_DISCOUNT
  FRS_DISCOUNT_PRICE
  FRS_NEGATIVE_PRICE
  DISCOUNT_PRICE_HISTORY
  FLASH_SALE_MINIMUM_VARIATION_INVENTORY
  COMPETING_PROMOTION
  PROMOTION_HISTORY
  NEGATIVE_PRODUCT_PRICE
  LOW_RATING_COUNT
  PRODUCT_NOT_ACTIVE
}

enum MFPWhitelistProductSortBy {
  START_TIME
  END_TIME
}

enum MMSLeadProductCategory {
  TOYS_AND_GAMES
  HOUSEHOLD_SUPPLIES
  ELECTRONICS_AND_TECHNOLOGY
  ARTS_CRAFTS_AND_SEWING
  BABY_AND_TODDLER
  TOOLS_AND_DIY
  MUSICAL_INSTRUMENTS_AND_DJ
  OTHER
  JEWELLERY_AND_WATCHES
  HOME_GARDEN_AND_PETS
  COLLECTABLES_AND_MEMORABILIA
  MOVIES_VIDEO_GAMES_AND_MUSIC
  REFURBISHED_ELECTRONICS
  CLOTHING_SHOES_AND_ACCESSORIES
  BOOKS
  SPORTS_AND_OUTDOORS
  HEALTH_AND_BEAUTY
  CARS_AND_AUTOMOTIVE
  FOOD_AND_DRINK
}

input MMSLeadSubmissionInput {
  companyLegalName: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  emailAddress: String!
  productCategory: MMSLeadProductCategory!
  annualRevenue: MMSLeadYearlyRevenue!
  websiteUrl: String!
}

type MMSLeadSubmissionMutation {
  ok: Boolean!
  message: String
}

input MMSLeadYearlyRevenue {
  start: CurrencyInput!
  end: CurrencyInput!
}

enum MSRCategory {
  ELECTRONICS
  PPE
  ELECTRICAL_PRODUCTS
  TOYS
}

input ManualLinkAuthentication {
  merchant: String!
  password: String!
  sendPhoneCall: Boolean
}

type ManualLinkAuthenticationMutation {
  ok: Boolean!
  obfuscatedPhoneNumber: String
  supportVerificationCode: String
  message: String
}

input ManualLinkDeletion {
  merchant: String!
}

type ManualLinkDeletionMutation {
  ok: Boolean!
  message: String
}

input ManualLinkVerification {
  verificationCode: String!
  merchant: String!
}

type ManualLinkVerificationMutation {
  ok: Boolean!
  message: String
}

type MarkProductTaxonomyCategoryDisputeUnchanged {
  ok: Boolean!
  message: String
}

input MarkProductTaxonomyCategoryDisputeUnchangedInput {
  disputeId: ObjectIdType!
  adminUnchangedReason: ProductTaxonomyCategoryDisputeAdminUnchangedReason!
  adminNote: String
}

type MarkProductTaxonomyCategoryDisputeUpdated {
  ok: Boolean!
  message: String
}

input MarkProductTaxonomyCategoryDisputeUpdatedInput {
  disputeId: ObjectIdType!
  categoryIdApproved: Int!
  categoryTreeVersion: String!
  categoryTreeId: Int!
  categoryPath: String!
  l1CategoryIdApproved: Int!
}

enum MarketingBonusBudgetType {
  CNY_BONUS_BUDGET
  DECREASED_PB_SPEND_BONUS_BUDGET
  VIDEO_PRODUCTS_BONUS_BUDGET
  NO_PROMOTION
}

type MarketingCampaignPropertySchema {
  maxCampaignNameLength: Int!
  minStartDate: Datetime!
  maxStartDate: Datetime!
  maxNumWeeks: Int!
  maxProducts: Int!
  minBid: CurrencyValue!
  maxBid: CurrencyValue!
  minKeywords: Int!
  maxKeywords: Int!
  maxKeywordLen: Int!
  maxCsvDownloadRows: Int!
  learningStatusThreshold: Int!
  flexibleBudgetSuggestedBudgetFactor: Float!
  campaignLockDays: Int!
}

enum MarketingCampaignState {
  STARTED
  READY
  PAID
  DRAFTING
  ENDED
  STOPPED
  CANCELLED
  NEW
  SAVED
  PENDING
}

enum MarketingFlexibleBudgetType {
  ALL_TIER
  DISABLED
  SILVER_TIER
}

type MarketingImpressionDailyStats {
  date: Datetime!
  impressions: Int
}

type MarketingMerchantPropertySchema {
  state: MarketingMerchantState!
  allowMaxboost: Boolean!
  hasAutomatedCampaign: Boolean!
  showCredits: Boolean!
  wishSubsidyDiscountFactor: Float!
  defaultFlexibleBudgetType: MarketingFlexibleBudgetType!
  minBudgetToAdd: CurrencyValue!
  maxBudgetToAdd: CurrencyValue!
  minSpendPerProduct: CurrencyValue!
  dailyMinBudget: CurrencyValue!
  allowLocalizedCurrency: Boolean!
  spending: MarketingSpendingBreakdown!
  latestTosVersion: Int!
  canAcceptTos: Boolean!
  isFreeBudgetMerchant: Boolean!
  refundAssuranceConstants: RefundAssuranceConstants!
  offsiteBoost: OffsiteBoost!
}

enum MarketingMerchantState {
  INVITED
  REJECTED
  APPROVED
  PENDING
}

type MarketingPeriodImpressionStats {
  startDate: Datetime!
  endDate: Datetime!
  impressionDailyStats: [MarketingImpressionDailyStats!]!
  totalImpressions: String!
}

type MarketingServiceMutations {
  acceptTos(input: ProductBoostAcceptTOSInput!): ProductBoostAcceptTOS!
  updateOffsiteBoost(input: OffsiteBoostPropertyInput!): UpdateOffsiteBoost!
  createLqdCampaign(input: LQDCampaignInput!): CreateLQDCampaign!
}

type MarketingServiceSchema {
  floorbids: [FloorBidsSchema!]!
  campaign(id: ObjectIdType!, duplicateId: ObjectIdType): CampaignSchema
  merchantProperty(merchantId: ObjectIdType!): MarketingMerchantPropertySchema
  currentMerchant: MarketingMerchantPropertySchema
  campaignProperty: MarketingCampaignPropertySchema
  impressionStats(startTime: DatetimeInput!, endTime: DatetimeInput!): MarketingPeriodImpressionStats!
  productPromotion(productId: ObjectIdType!): ProductPromotionSchema
  productPromotions(query: String, searchType: ProductPromotionSearchType, promotionStatuses: [ProductPromotionStatus!], offset: Int = 0, limit: Int = 20, refundAssuranceType: ProductPromotionRefundAssuranceType): [ProductPromotionSchema!]!
  productPromotionsCount(query: String, refundAssuranceType: ProductPromotionRefundAssuranceType, searchType: ProductPromotionSearchType, promotionStatuses: [ProductPromotionStatus!]): Int!
  promotableProducts(query: String, searchType: ProductPromotionSearchType, offset: Int = 0, limit: Int = 10, wishExpressOnly: Boolean = false): [PromotableProduct!]!
  promotableProductsCount(query: String, searchType: ProductPromotionSearchType, wishExpressOnly: Boolean = false): Int!
  trendingCategories: [TrueTagSchema!]!
  lqdPromotion: LQDPromotionSchema!
  balanceTransactions(offset: Int = 0, limit: Int = 100): [BalanceTransactionRecord!]!
  balanceTransactionsCount: Int!
  creditTransactions(offset: Int = 0, limit: Int = 100): [CreditTransactionRecord!]!
  creditTransactionsCount: Int!
  lowBudgetCampaignCount: Int!
  pendingCampaignCount(createdInPastDays: Int): Int!
  actionRequiredCampaignCount(createdInPastDays: Int): Int!
}

type MarketingSpendingBreakdown {
  accountBalance: CurrencyValue!
  promotionLoan: CurrencyValue!
  budgetAvailable: CurrencyValue!
  promotionLoanDescription: String!
  promotionCredit: CurrencyValue!
  promotionBalance: CurrencyValue!
  pending: CurrencyValue!
}

type MarketingStats {
  offsiteBoost(startDate: DatetimeInput!, endDate: DatetimeInput!): OffsiteBoostStats!
  lqdPromotion(campaignId: ObjectIdType!): LQDPromotionStats!
}

type MerchantActionsRequiredSchema {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  state: MerchantActionsRequiredStateType!
  currentAction: MerchantActionsType!
  actionsRequired: [MerchantActionsType!]!
  actionsCompleted: [MerchantActionsType!]!
}

enum MerchantActionsRequiredStateType {
  COMPLETED
  IN_PROGRESS
  REJECTED
}

enum MerchantActionsType {
  SELLER_PROFILE_VERIFICATION
  BANK_VERIFICATION
}

enum MerchantAnnouncementCategory {
  LOGISTICS
  INTELLECTUAL_PROPERTY
  POLICIES_AND_TERMS
  TAX
  SHIPPING_CARRIERS
  ACCOUNT_SETTINGS
  LOGISTICS_PRICING
  API
  PRODUCTS
  PAYMENTS
  LOCAL_CURRENCY
  ORDERS
  INSIGHTS
}

enum MerchantAnnouncementProgram {
  MERCHANT_FUNDED_PROMOTIONS
  ADVANCED_LOGISTICS_PROGRAM
  WISHPOST
  VIDEOS
  MERCHANT_STANDING
  WISH_EXPRESS
  FBW_FBS
  WISH_STANDARDS
  PARTIAL_REFUNDS
  PRODUCTBOOST
  RETURNS_PROGRAM
  EPC
}

type MerchantAnnouncementSchema {
  id: ObjectIdType!
  type: MerchantAnnouncementType!
  createdAt: Datetime
  expiryDate: Datetime
  title: String
  message: String
  ctaText: String
  ctaLink: String
  ctaDueDate: Datetime
  sender: UserSchema!
  state: MerchantAnnouncementState!
  categories: [AnnouncementCategorySchema!]
  program: AnnouncementProgramSchema
  important: Boolean
}

enum MerchantAnnouncementState {
  NEW
  UPDATE
  COMPLETE
  UPDATING
  CREATING
}

enum MerchantAnnouncementType {
  SYSTEM_UPDATE
  BD_ANNOUNCEMENT
}

type MerchantAnnouncementV2Schema {
  id: ObjectIdType!
  type: AnnouncementType!
  publishDate: Datetime!
  expiryDate: Datetime
  audienceSourceType: AnnouncementAudienceSourceType!
  contentType: AnnouncementContentType
  title: String
  message: String
  link: String
  ctaText: String
  ctaDueDate: Datetime
  sender: UserSchema!
  state: AnnouncementState!
  userAnnouncementCount: Int!
  categories: [AnnouncementCategorySchemaV2!]!
  program: AnnouncementProgramSchemaV2
  locales: [AnnouncementLocale!]!
  important: Boolean
}

type MerchantBrandSchema {
  brand: BrandSchema!
  numProducts: Int!
  lifetimeStatsObject: BrandedMerchantLifeTimeStatsObjectSchema
}

type MerchantConnectionSchema {
  id: ObjectIdType!
  merchants: [MerchantSchema!]!
  merchantIds: [String!]!
  confidence: Float
  reason: String!
  matchedValue: String!
  updatedTime: Datetime
}

type MerchantCountryDetailsSchema {
  detectedDomicileCountry: Country
  detectedShipFromCountry: Country
  domicileDetectionReason: String
  domicileDetectionFactors: [DetectionFactor!]!
}

enum MerchantCountryDetectionFactorType {
  PHONE_COUNTRY
  SHIP_FROM_OVERRIDE
  PAYMENT_PROVIDER
  BD_REP_COUNTRY
  GEOIP_LOGIN
  MERCHANT_GROUP
  STORE_ADDRESS
  ERP_ENROLLMENT
  WISHPOST_LINKED
  BUSINESS_ADDRESS
  DOMICILE_OVERRIDE
  BOUND_WISHPOST
  EMAIL_PROVIDER
  ORDER_SHIPPING_PROVIDER
  ORDER_TRACKING_ORIGIN
  VERIFIED_PROFILE
}

type MerchantEntityManualLinkMutations {
  requestManualLink(input: ManualLinkAuthentication!): ManualLinkAuthenticationMutation
  completeManualLink(input: ManualLinkVerification!): ManualLinkVerificationMutation
  deleteManualLink(input: ManualLinkDeletion!): ManualLinkDeletionMutation
}

type MerchantEntitySchema {
  id: ObjectIdType
  merchants: [MerchantSchema!]
  updatedTime: Datetime
  merchantConnections: [MerchantConnectionSchema!]
}

type MerchantFBWSchema {
  availableWarehouses: [FBWWarehouseSchema!]
  availableWarehousesForShippingPlanSubmission: [FBWWarehouseSchema!]
}

enum MerchantFacingPayoutState {
  GENERATING
  SUCCESS
  RELEASED
  NA
  DELAYED
  WITHHOLD
  REISSUED
  FAILED
  RESUBMITTED
  CANCELLED
  IN_PROGRESS
  PENDING
}

enum MerchantFeedJobStatus {
  EXCEPTION
  NEW_AND_EMAILED
  RUNNING
  FINISHED
  FAILURE
  FINISHED_AND_EMAILED
  CANCELLED
  NEW
  FINISHED_WITH_ERRORS
  PENDING
}

type MerchantFileSchema {
  id: ObjectIdType!
  displayFilename: String!
  fileUrl(console: Boolean): String!
  isImageFile: Boolean!
}

enum MerchantFinalSaleAction {
  ENABLE
  DISABLE
}

type MerchantFinalSaleMutations {
  updateMerchantFinalSale(input: MerchantFinalSaleUpdateInput): UpdateMerchantFinalSale
}

input MerchantFinalSaleUpdateInput {
  action: MerchantFinalSaleAction!
  merchantId: ObjectIdType!
  category: FinalSaleCategory!
}

enum MerchantFineExemptionInfoLinkType {
  CATEGORY
  ARTICLE
  FULL_LINK
}

type MerchantFineSchema {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  merchantPaymentId: ObjectIdType
  merchantPaymentTime: Datetime
  localizedAmount: CurrencyValue
  delayedDeductionDate: Datetime
  status: Status!
  fineType: FineReason!
  isExempt: Boolean!
  exemptInfoLink: String
  exemptLinkType: MerchantFineExemptionInfoLinkType
  policyLink: String
  amount: Float
  timestamp: Datetime
  reversals: [Reversal!]
  phabTicketId: String
  creator: UserSchema
}

input MerchantFulfillmentTimeInfoInput {
  pickupCarrier: PickupCarrier
  carrierPickupTime: String
  merchantHandlingTime: Int
  workdayCalendar: WorkdayCalenderInput
  workdayOverrideCalendar: [WorkDayOverrideInput]
}

enum MerchantGamingReviewFieldTicketType {
  lastSourceUpsertDate
}

type MerchantGamingReviewMutations {
  updateMerchantGamingReviewTicket(input: MerchantGamingReviewUpdateInput): UpdateMerchantGamingReviewTicket
  manualCreateUpload(input: MerchantGamingReviewTicketManualCreationUploadInput!): MerchantGamingReviewTicketManualCreationUpload
  manualCreate(input: MerchantGamingReviewTicketManualCreationUploadInput!): MerchantGamingReviewTicketManualCreation
}

enum MerchantGamingReviewPolicyTierType {
  SUSPICIOUS_TIER
  HOME_TIER
  PROBATION_TIER
}

enum MerchantGamingReviewSourceType {
  POLICY
  GATE_KEEPER
  WISH_ADMIN
}

enum MerchantGamingReviewState {
  AWAITING_ADMIN
  CONFIRMED
  REJECTED
  ESCALATED
  CLOSED
}

enum MerchantGamingReviewTicketAction {
  COMMENT
  CLAIM
  ESCALATE
  UPDATE_POLICY_TIER
  UNCLAIM
  CLOSE
}

type MerchantGamingReviewTicketCommentSchema {
  senderId: ObjectIdType
  senderName: String
  message: String!
  date: Datetime!
}

type MerchantGamingReviewTicketManualCreation {
  ok: Boolean!
  logs: String
}

type MerchantGamingReviewTicketManualCreationSchema {
  merchantId: ObjectIdType!
  reason: String!
}

type MerchantGamingReviewTicketManualCreationUpload {
  ok: Boolean!
  logs: String
  updateList: [MerchantGamingReviewTicketManualCreationSchema!]!
}

input MerchantGamingReviewTicketManualCreationUploadInput {
  fileUrl: String!
}

type MerchantGamingReviewTicketSchema {
  merchant: MerchantSchema
  id: ObjectIdType!
  merchantGamingReviewPolicyTier: MerchantGamingReviewPolicyTierType
  merchantId: ObjectIdType!
  sources: [MerchantGamingReviewTicketSourceSchema!]!
  state: MerchantGamingReviewState!
  lastSourceUpsertDate: Datetime!
  isOpen: Boolean!
  isClosed: Boolean!
  isClaimed: Boolean!
  claimedAdminId: ObjectIdType
  claimedDate: Datetime
  decisionAdminId: ObjectIdType
  decisionDate: Datetime
  infractionIds: [ObjectIdType!]
  comments: [MerchantGamingReviewTicketCommentSchema!]
  claimedAdminUser: UserSchema
}

input MerchantGamingReviewTicketSort {
  field: MerchantGamingReviewFieldTicketType!
  order: SortOrderType!
}

type MerchantGamingReviewTicketSourceSchema {
  triggerDate: Datetime!
  sourceType: MerchantGamingReviewSourceType!
  reason: String
  creator: UserSchema
}

input MerchantGamingReviewUpdateInput {
  action: MerchantGamingReviewTicketAction!
  id: ObjectIdType!
  policyTier: MerchantGamingReviewPolicyTierType
  message: String
  infractionIds: String
}

type MerchantIdentityDocumentSchema {
  id: ObjectIdType!
  state: MerchantIdentityVerificationStatus!
  stateReason: [TaxVerificationStatusReason]
  comment: String
  documentFile: MerchantFileSchema
  documentType: MerchantIdentityDocumentType!
  uploadedAt: Datetime
  reviewedAt: Datetime
  reviewer: UserSchema
}

enum MerchantIdentityDocumentType {
  TAX_FORM_W_9
  OFFICIAL_BANK_STATEMENT
  RECENT_BUSINESS_RETURNS
  SHARE_ALLOCATION_CERTIFICATE
  CERTIFICATE_OF_INCORPORATION
  TAX_FORM
  CREDIT_CARD_STATEMENT
  TAX_FORM_W9
  UTILITY_BILL_STATEMENT
  GOVERNMENT_ISSUED_BUSINESS_LICENSE
  ENTITY_TRADING_NAME
  ARTICLES_OF_INCORPORATION
  TAX_FORM_W_8
  TAX_FORM_W8_BEN_E
  PRODUCT_LICENSING
  TAX_FORM_W8_BEN
}

type MerchantIdentityMutations {
  bankAccountVerification: BankAccountVerificationReviewerMutations
  merchantIdentityVerification: MerchantIdentityVerificationReviewerMutations
}

type MerchantIdentityServiceSchema {
  bankAccountVerificationsCount(merchantId: ObjectIdType, state: BankAccountVerificationStatus): Int
  bankAccountVerifications(offset: Int = 0, limit: Int = 50, merchantId: ObjectIdType, state: BankAccountVerificationStatus): [BankAccountVerificationSchema!]
  merchantIdentityVerificationsCount(merchantId: ObjectIdType, state: MerchantIdentityVerificationStatus, verificationType: MerchantIdentityVerificationType): Int
  merchantIdentityVerifications(offset: Int = 0, limit: Int = 50, merchantId: ObjectIdType, state: MerchantIdentityVerificationStatus, verificationType: MerchantIdentityVerificationType): [MerchantIdentityVerificationSchema!]
}

type MerchantIdentityVerificationMutations {
  uploadDocument(input: UploadMerchantIdentityDocumentInput!): UploadMerchantIdentityDocument!
}

type MerchantIdentityVerificationReviewerMutations {
  reviewIdentityVerificationDocument(input: ReviewMerchantIdentityDocumentInput!): ReviewMerchantIdentityDocument
}

type MerchantIdentityVerificationSchema {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  state: MerchantIdentityVerificationStatus!
  stateReason: [TaxVerificationStatusReason]!
  verificationType: MerchantIdentityVerificationType!
  lastUploadedAt: Datetime
  lastReviewedAt: Datetime
  latestMerchantIdentityDocument: MerchantIdentityDocumentSchema
  bankAccountDocuments: [MerchantIdentityDocumentSchema!]
  merchantIdentityDocuments: [MerchantIdentityDocumentSchema!]
  dueDate: Datetime
}

enum MerchantIdentityVerificationStatus {
  SUBMITTED
  REJECTED
  APPROVED
  PENDING
}

enum MerchantIdentityVerificationType {
  TAX_FORM
  BANK_ACCOUNT
}

type MerchantInviteInfo {
  valid: Boolean!
  email: String
  promotionRevShare: Float
  promotionPeriodInDays: Int
  useMarketingTransactionBonus: Boolean
}

input MerchantLeadNumberOfSKUs {
  start: Int!
  end: Int!
}

enum MerchantLeadProductCategory {
  TOYS_AND_GAMES
  HOUSEHOLD_SUPPLIES
  ELECTRONICS_AND_TECHNOLOGY
  ARTS_CRAFTS_AND_SEWING
  BABY_AND_TODDLER
  TOOLS_AND_DIY
  MUSICAL_INSTRUMENTS_AND_DJ
  OTHER
  JEWELLERY_AND_WATCHES
  HOME_GARDEN_AND_PETS
  COLLECTABLES_AND_MEMORABILIA
  MOVIES_VIDEO_GAMES_AND_MUSIC
  REFURBISHED_ELECTRONICS
  CLOTHING_SHOES_AND_ACCESSORIES
  BOOKS
  SPORTS_AND_OUTDOORS
  HEALTH_AND_BEAUTY
  CARS_AND_AUTOMOTIVE
  FOOD_AND_DRINK
}

input MerchantLeadSellingYearsRange {
  start: Int!
  end: Int!
}

input MerchantLeadSubmissionInput {
  emailAddress: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  websiteUrl: String!
  country: CountryCode!
  merchantType: MerchantType
  brandRegistrationCountry: BrandRegistrationCountry
  registeredBefore: Boolean
  utmSource: String
  companyLegalName: String!
  channelPartners: String
  howLongSelling: MerchantLeadSellingYearsRange!
  annualRevenue: MerchantLeadYearlyRevenue!
  skuQuantity: MerchantLeadNumberOfSKUs!
  productCategory: MerchantLeadProductCategory!
  merchantPartnerName: String
}

type MerchantLeadSubmissionMutation {
  ok: Boolean!
  message: String
}

input MerchantLeadYearlyRevenue {
  start: CurrencyInput!
  end: CurrencyInput!
}

type MerchantListingFeeHub {
  feePolicyConfig: [FeePolicyConfigSchema!]!
  latestListingFeeDetails: LatestListingFeeDetailsSchema!
  currentCycleListingFeeDetails: CurrentCycleListingFeeDetailsSchema!
  predictedListingFeeDetails: PredictedListingFeeDetailSchema!
}

type MerchantMobile {
  minimumAppVersion(platform: MobilePlatformType!, currentVersion: String!): String!
}

type MerchantMutation {
  shippingSetting: ShippingSettingMutations!
  merchantTermsAgreed: MerchantTermsAgreedMutations
  vacationSettings: VacationSettings!
  changeDisplayName(input: ChangeDisplayNameInput!): ChangeDisplayNameMutation!
  merchantSenderAddress: MerchantSenderAddressMutations!
  changePreferredUnits(input: ChangePreferredUnitsInput!): ChangePreferredUnitsMutation!
  euVatTax: EUVATTaxMutations
  taxSettings: TaxSettingsMutations!
  warehouseSettings: MerchantWarehouseMutations
  merchantTaxIdentification: MerchantTaxIdentificationMutations!
  sellerIdentityVerification: SellerIdentityVerificationMutations!
  sellerIdentityCnVerification: SellerIdentityCNVerificationMutations!
  bankAccountVerification: BankAccountVerificationMerchantMutations!
  merchantIdentityVerification: MerchantIdentityVerificationMutations!
  returnSettings: MerchantReturnSettingsMutations!
  returnWarehouseSettings: MerchantReturnWarehouseMutations
  mftOptOut(input: ChangeMFTOptOutInput!): ChangeMFTOptOutMutation
}

enum MerchantOnboardingStep {
  ADD_PRODUCT
  ENABLE_2FA
  SETUP_SHIPPING
  STORE_IDENTIFICATION
  PAYMENT_INFO
  BUSINESS_INFO
  CONTACT_INFO
  BLUE_DOWNLOAD_APP_DEPRECATED
  BLUE_SET_STORE_HOURS_DEPRECATED
  EXTRA_INFO
  STORE_IDENTIFICATION_DEPRECATED
  LEARN_ABOUT_WE
  DEP_STORE_REGISTRATION_FEE
  CONFIRM_TOS
  BLUE_SET_PAYMENT_INFO_DEPRECATED
  STORE_INFO
  SETUP_ACCOUNT
  CONFIRM_PHONE
  BLUE_SET_STORE_PHOTO_DEPRECATED
  RESELLER_AGREEMENT
  CONFIRM_EMAIL
  BLUE_LIST_FIRST_PRODUCT_DEPRECATED
}

type MerchantOneoffPaymentMutations {
  createBulkOneoffAdminToolPayments(input: CreateBulkOneoffAdminToolPaymentsInput!): CreateBulkOneoffAdminToolPayments
}

type MerchantOneoffPaymentSchema {
  id: ObjectIdType!
  creationTime: Datetime!
  merchantId: ObjectIdType!
  amount(localized: Boolean): CurrencyValue!
  localizedAmount: CurrencyValue
  eligibleTime: Datetime!
  paymentId: ObjectIdType
  type: OneoffPaymentType!
  merchantPaymentTime: Datetime
  status: OneoffPaymentStatus!
  orderId: ObjectIdType
  disputeId: ObjectIdType
  ticketId: String
}

enum MerchantPaymentCollectorType {
  INDIVIDUAL
  BUSINESS
}

enum MerchantPaymentCycle {
  WEEKLY
  NORMAL
}

type MerchantPaymentDetail {
  accountBalance(currency: PaymentCurrencyCode!, balanceType: AccountBalanceType!): CurrencyValue
  ledgerAccountBalances: [LedgerAccountBalance!]
  messages: [MerchantPaymentWarningMessage!]
  lineItems(currency: PaymentCurrencyCode!, balanceType: AccountBalanceType!, offset: Int!, limit: Int!, startDate: DatetimeInput, endDate: DatetimeInput, query: String, searchType: LineItemSearchType, lineItemTypes: [LineItemType!]): [MerchantPaymentLineItem!]
  lineItemCount(currency: PaymentCurrencyCode!, balanceType: AccountBalanceType!, startDate: DatetimeInput, endDate: DatetimeInput, query: String, searchType: LineItemSearchType, lineItemTypes: [LineItemType!]): Int
  lineItemTypes: [MerchantPaymentLineItemType!]
  lineItemSearchTypes: [LineItemSearchType!]
  ledgerItemInfo(currency: PaymentCurrencyCode!, balanceType: LedgerAccountBalanceType!, cutoffTime: DatetimeInput, cutoffId: String, limit: Int!, startDate: DatetimeInput, endDate: DatetimeInput, includeTotalCount: Boolean): LedgerItemInfo
  payoutHistory(offset: Int!, limit: Int!, startDate: DatetimeInput, endDate: DatetimeInput, provider: PayoutPaymentProviderType): [MerchantPayoutHistory!]
  payoutHistoryCount(startDate: DatetimeInput, endDate: DatetimeInput, provider: PayoutPaymentProviderType): Int
  chargeTransaction(id: ObjectIdType!): ChargeTransactionInfo
  connectedChargeProviders: [ChargePaymentProviderType!]
  pendingChargeProviders: [ChargePaymentProviderType!]
  canEditPaymentInfo: Boolean!
  currentProvider: PaymentProvider
  allowedProviders: [PaymentProvider!]!
  nextPayoutTime: Datetime
  hasPayoutInProgress: Boolean!
  hasActiveLoan: Boolean!
  hasPaymentInfoNotice: Boolean!
  releasePayoutRequest: ReleasePayoutRequest
  personalInfo: PaymentPersonalInfo
  businessInfo: PaymentBusinessInfo
  infoCollectedForPaymentProvider: InfoCollectedForPaymentProvider
  paymentCycle: MerchantPaymentCycle!
  fullyEnrolledInPaymentCycle: Boolean!
  showLedgerUi: Boolean!
}

type MerchantPaymentLineItem {
  createdTime: Datetime!
  description: String!
  creditAmount: CurrencyValue
  debitAmount: CurrencyValue
  type: LineItemType!
}

enum MerchantPaymentLineItemType {
  POLICY_VIOLATION_FINE
  MISLEADING_VARIATION_FINE
  B2B_SALE_FEE
  WISH_PARCEL_SERVICE_ADJUST_PAYMENT
  INITIAL_WISHPOST_SHIPPING_REFUND_OFFSET
  REV_SHARE_ADJUST_PAYMENT
  WISH_EXPRESS_REBATE_REVERSE
  DISPUTE_APPROVED
  WITHHELD_RELEASED
  LOGISTIC_FEE
  EARLY_PAYMENT
  OVERPAY_PAYMENT_AMOUNT
  QUALITY_REFUND_FINE
  MERCHANT_HARASSMENT
  WISHPOST_ADJUSTMENT_PAYMENT
  WITHHOLD_FUND_FINE
  EXTERNAL_BOOST_CPA_FEE
  UNDERPAY_PAYMENT_AMOUNT
  STRATEGIC_ORDER_REBATE
  PAID_PLACEMENT_IMPRESSION_FEE
  LCL_FBW_FEE
  EARLY_PAYMENT_CANCELLATION
  DECEPTIVE_FULFILLMENT_FINE
  STORE_PAYMENT_CANCELLATION
  ESTIMATED_WISHPOST_SHIPPING
  PAYMENT
  MARKETING_REBATE
  UNFULFILLED_ORDER_FINE
  PRODUCT_UNTAGGED_MISLEADING
  FBW_PAYMENT
  CHINA_POST_SUBSIDY_REVERSE
  WISHPOST_LOGISTICS_FEE
  CANCEL_WITHHOLD_PAYMENT
  COUNTERFEIT_REFUND
  COVID19_SUBSIDY_REVERSE
  COLLECTIONS_BOOST_CAMPAIGN_FEE
  RETURN_LABEL_FEE
  ONEOFF_FINE
  WISHPOST_ADJUSTMENT_DEDUCTION
  FINE_REVERSED
  TRANSACTION_FEE_REBATE_REVERSE
  PRODUCT_REBATE
  DOUBLE_DEDUCTION_BOOK_KEEPER
  LATE_CONFIRMED_FULFILLMENT_FINE
  WISHPOST_FULFILLMENT_FEE
  FAKE_TRACKING_FINE
  WITHHOLD_RELEASE
  REFUNDED
  PRODUCT_LISTING_FEE
  CONSOLIDATE_MP_PAYMENT
  OTHER_DEDUCTION
  REGISTRATION_REFUND
  EARLY_PAYMENT_REIMBURSEMENT_FEE
  ONEOFF
  TRANSACTION_FEE_REBATE
  EXTERNAL_BOOST_FEE
  MARKETING_REBATE_REVERSE
  MERCHANT_INCENTIVE
  PROMOTED_PRODUCT_DISABLE_FINE
  INFRACTION_FINE
  MERCHANT_INCENTIVE_REVERSE
  RETROACTIVE_REFUND_FOR_LOW_RATED_PRODUCT
  PRODUCT_BOOST_BALANCE_REFUND
  NEW_REFUNDED
  SE_CASH_BACK
  LEGAL_SETTLEMENT_FINE
  FBW_FEE
  MERCHANT_CANCELLATION_FINE
  EARLY_PAYMENT_DEDUCTION
  PROMOTION_FEE
  LEGAL_SETTLEMENT_RESERVED_PENALTY
  COVID19_SUBSIDY
  STORE_PAYMENT_DEDUCTION
  SE_CASH_BACK_REVERSE
  RETROACTIVE_REFUND_FOR_PROBLEM_PRODUCT
  FAKE_RATING_FINE
  ESTIMATED_WISHPOST_SHIPPING_REFUND
  INITIAL_WISHPOST_SHIPPING_REFUND
  CN_ORDER_NOT_SHIP_WITH_WISHPOST_FINE
  INITIAL_WISHPOST_SHIPPING
  CHINA_POST_SUBSIDY
  STORE_PAYMENT
  WISH_EXPRESS_REBATE
  ONEOFF_ADMIN_TOOL
  SHIPPED
  WITHHOLD_PAYMENT
  INITIAL_WISHPOST_SHIPPING_OFFSET
  LEGAL_SETTLEMENT_PAID_PENALTY
  WISH_PARCEL_SERVICE_ADJUST_FEE
  CONSOLIDATE_MP_FINE
  UNCONFIRMED_CARRIER_FINE
  WISH_PARCEL_SERVICE_FEE
  PAID_PLACEMENT_ENROLLMENT_FEE
  STRATEGIC_ORDER_REBATE_REVERSE
}

type MerchantPaymentLinkInfo {
  text: String
  url: String
}

enum MerchantPaymentStatus {
  PAID_BT
  REFUNDED
  DEDUCTED_WITHOUT_REFUND
  PAID
  UNPAID
}

type MerchantPaymentWarningMessage {
  title: String
  text: String
  sentiment: SentimentType
  link: MerchantPaymentLinkInfo
}

type MerchantPaymentsMutation {
  updatePaypalSetting(input: UpdatePayPalSettingInput!): UpdatePayPalSettingMutation
  updatePayoneerSetting(input: UpdatePayoneerSettingInput!): UpdatePayoneerSettingMutation
  payoneerSignup: PayoneerSignupMutation
  payableValidation(input: PayableValidationInput!): PayableValidationMutation
  payableCleanup(input: PayableCleanupInput!): PayableCleanupMutation
  resetPayment(input: ResetReleasePaymentRequestInput!): ResetReleasePaymentRequestMutation
  createChargeTransaction(input: CreateChargeTransactionInput!): CreateChargeTransactionMutation
  cancelChargeTransaction(input: CancelChargeTransactionInput!): CancelChargeTransactionMutation
  charge(input: ChargeInput!): ChargeMutation
}

type MerchantPaymentsService {
  paymentInfo(merchantId: ObjectIdType): MerchantPaymentDetail
  currentMerchant: MerchantPaymentDetail
  ledgerOrderInfo(orderId: String!): LedgerOrderInfo
  ledgerPayableInfo(payableId: String!, payableType: String!, includeEvents: Boolean): LedgerPayableInfo
  disbursementScheduleInfo(year: Int!, paymentCycle: Int!): DisbursementScheduleInfo
}

type MerchantPayoutHistory {
  id: String!
  payoutDate: Datetime!
  payoutProvider: PaymentProvider!
  merchantFacingState: MerchantFacingPayoutState!
  currency: PaymentCurrencyCode!
  totalAmount: CurrencyValue!
  description: MerchantPayoutHistoryDescription
  rebateAmount: CurrencyValue
}

type MerchantPayoutHistoryDescription {
  title: String
  text: String
}

enum MerchantPolicyAgreementSource {
  SELLER_PROFILE_VALIDATION_FLOW
  CN_SIGNUP_VALIDATION_FLOW
  BANK_INFORMATION_VALIDATION_FLOW
  EEA_KYC_VALIDATION_FLOW
}

type MerchantPolicyTierFactorSettings {
  factor: PolicyFactor!
  exemptions: [MerchantPriviledge]!
}

type MerchantPolicyTierSchema {
  tier: MerchantTier!
  policyFactorSettings: [MerchantPolicyTierFactorSettings]!
}

type MerchantPreorder {
  isPreorderMerchant: Boolean!
  productsAreSyncing: Boolean!
}

enum MerchantPriviledge {
  WAIVE_BAN_MERCHANT
  WAIVE_ISSUE_FINE
  WAIVE_PRODUCT_TAKEDOWN
  WAIVE_PAYMENT_WITHHOLD
  WAIVE_CREATE_WARNING
  WAIVE_IMPRESSION_SUSPENSION
}

type MerchantProofDocSchema {
  id: ObjectIdType!
  docName: String!
  docType: String!
  idNumber: String
  fileDataList: [FileDataSchema!]
  layoutTag: String
  expDate: Datetime
  wishValidationCode: String
}

type MerchantProvidedAttributeSchema {
  name: String!
  value: [String!]!
}

type MerchantReturnSettingPolicyTypeOptionSchema {
  policyType: PolicyType!
  policyTypeText: String!
}

type MerchantReturnSettingsMutations {
  upsertMerchantReturnSettings(input: UpsertMerchantReturnSettingsMutationInput!): UpsertMerchantReturnSettingsMutation!
}

type MerchantReturnSettingsSchema {
  country: Country!
  isActive: Boolean!
  policyType: PolicyType!
  policyTypeText: String!
  authType: AuthType
  useWishReturnWarehouse: Boolean!
  returnWarehouses: MerchantReturnWarehouseSchema
}

type MerchantReturnWarehouseMutations {
  upsertWarehouse(input: UpsertReturnWarehouseInput!): UpsertMerchantReturnWarehouseMutation
}

type MerchantReturnWarehouseSchema {
  id: ObjectIdType!
  name: String!
  address: AddressSchema
}

type MerchantSafetyMutations {
  reportOrder(input: ReportOrderInput!): ReportOrderMutation
}

type MerchantSafetySchema {
  reportOrderReasons: [OrderReportReasonSchema!]!
}

type MerchantSchema {
  id: ObjectIdType!
  accountManager: UserSchema
  originCountry: Country
  suspectedCountry: Country
  restrictedProductDefaultCountry: Country
  canAccessRestrictedProduct: Boolean!
  canAccessFinalSale: Boolean!
  canAccessHome: Boolean!
  restrictedProductRegions: [RestrictedProductRegion!]
  merchantPolicyTier: MerchantPolicyTierSchema
  displayName: String!
  onVacationMode: Boolean!
  vacationSettings: VacationSettingsSchema
  vacationPause: VacationPauseSchema
  signupTime: Datetime!
  revShare: Float!
  canManageShipping: Boolean!
  shippingSettings(enabled: Boolean): [ShippingSettingsSchema!]
  merchantTermsAgreed: MerchantTermsAgreedSchema
  useShopifyShippingRate: Boolean!
  standardWarehouseId: ObjectIdType!
  primaryCurrency: PaymentCurrencyCode!
  usdConversionRate: Float!
  hasSetupPaymentInfo: Boolean!
  storeStats: MerchantStats!
  wishSellerStandard: MerchantWishSellerStandardDetails!
  shopify: ShopifySchema
  state: CommerceMerchantState!
  canUseVacationMode: Boolean!
  inEuComplianceScope: Boolean!
  hasEuComplianceImpressionBlock: Boolean!
  countryOfDomicile: Country
  businessName: String
  businessAddress: AddressSchema
  countryDetails: MerchantCountryDetailsSchema
  daysToFulfill: Int!
  preorder: MerchantPreorder!
  branding: BrandingSchema!
  marketing: MarketingMerchantPropertySchema!
  shippingOrigins: [ShippingOriginSettings!]!
  tax: MerchantTaxSchema
  isStoreMerchant: Boolean!
  isPayable: Boolean!
  isCnMerchant: Boolean!
  isCnForFulfillment: Boolean!
  maxDeliveryDays: Int!
  isUnityEnabled: Boolean!
  isMerchantInCalculatedShippingBeta: Boolean!
  canAccessAdditionalItemShipping: Boolean!
  signupSource: SignupSource
  proofOfIdentity: [MerchantFileSchema!]
  sellerVerification: SellerVerificationSchema!
  senderAddresses: [MerchantSenderAddressSchema!]!
  warehouses(id: String): [MerchantWarehouseSchema!]
  returnWarehouses(id: String): [MerchantReturnWarehouseSchema!]
  fulfilledByWish: MerchantFBWSchema!
  wps: MerchantWPSSchema
  preferredWeightUnit: WeightUnit
  preferredLengthUnit: LengthUnit
  isWhiteGlove: Boolean!
  canAccessEarlyPayment: Boolean!
  hasReducedRevShare: Boolean!
  lead: UserSchema!
  users(includeLead: Boolean = true): [UserSchema!]!
  exp: ExpSchema!
  euVatTax: EUVATTaxSchema
  isBba: Boolean
  bypassProductRestrictions: [TaggingViolationSubcategory!]
  productListingPlan: ProductListingPlanHub
  merchantListingFee: MerchantListingFeeHub
  isWishBlueSelfInventory: Boolean!
  isFactory: Boolean!
  taxIdentification: MerchantTaxIdentificationSchema
  bankAccountVerification: BankAccountVerificationSchema
  latestActionsRequired: MerchantActionsRequiredSchema
  email: String!
  isIdentifiedUsTax: Boolean
  eligibleForExpeditedPaymentPolicy: Boolean
  eatCostWarningId: ObjectIdType
  displayPictureUrl: String
  showMfp: Boolean!
  allowMfpEligibleProducts: Boolean!
  hasMfpWhitelistProducts: Boolean!
  allowMfp: Boolean!
  returnSettings(isActive: Boolean): [MerchantReturnSettingsSchema!]
  returnSettingPolicyTypeOptions: [MerchantReturnSettingPolicyTypeOptionSchema!]
  canAccessPaidPlacement: Boolean!
  showFeedProcessing: Boolean!
  disableWarningId: ObjectIdType
  disableReasonCategory: String
  isFlatRateShippingOptedIn: Boolean
  canAccessFlatRateShippingOptInOptOut: Boolean
  calculatedShippingAccountConfig: CalculatedShippingAccountConfigType
  canAccessCalculatedShippingAccountConfig: Boolean
  isMerchantFulfillmentTimeOptOut: Boolean
  isConsignmentMode: Boolean
  merchantIdentityVerification(verificationType: MerchantIdentityVerificationType): MerchantIdentityVerificationSchema
}

type MerchantSenderAddressMutations {
  upsertMerchantSenderAddress(input: UpsertMerchantSenderAddressInput!): UpsertMerchantSenderAddressMutation!
  deleteMerchantSenderAddress(input: DeleteMerchantSenderAddressInput!): DeleteMerchantSenderAddressMutation!
}

type MerchantSenderAddressSchema {
  id: ObjectIdType!
  warehouseName: String!
  address: AddressSchema!
  isDefault: Boolean!
}

type MerchantServiceSchema {
  merchant(id: ObjectIdType, userId: ObjectIdType): MerchantSchema
  mainUser(merchantId: ObjectIdType!): UserSchema
  vipoutlet: MerchantSchema
  merchants(offset: Int = 0, limit: Int = 20, sort: MerchantSort, states: [CommerceMerchantState!], name: String, id: ObjectIdType, bdRep: ObjectIdType, query: String): [MerchantSchema!]
}

input MerchantSignupInput {
  emailAddress: String!
  storeName: String!
  password: String!
  source: MerchantSignupSourceType
  bdSignupCode: String
  salesforceLeadId: String
  salesforceCmCat: String
  googleClickId: String
  googleAdsGroupId: String
  landingSource: String
  landingSourceSubpage: String
  invite: String
  referralId: String
  utmSource: String
  utmCampaign: String
  utmTerm: String
  utmContent: String
  deviceId: String
  deviceName: String
  paypalMerchantId: String
  greenChannelCode: String
  merchantInvitationCode: String
  captchaToken: String
  captchaCode: String
  existingStoreUrl: String
}

type MerchantSignupMutation {
  ok: Boolean!
  message: String
  shouldRedirectCnMerchant: Boolean
  userId: ObjectIdType
  session: String
}

input MerchantSignupSendPhoneVerificationInput {
  newPhoneNumber: String!
}

type MerchantSignupSendPhoneVerificationMutation {
  message: String
  ok: Boolean!
}

enum MerchantSignupSourceType {
  SIGNUP_GREEN_CHANNEL
  SIGNUP_V4
  SIGNUP_V5
  SIGNUP_LEGACY
  SIGNUP_V3
  SIGNUP_MOBILE
  SIGNUP_MERCHANT_PLUS
  SIGNUP_EXPRESS
}

input MerchantSort {
  field: MerchantSortFieldType!
  order: SortOrderType!
}

enum MerchantSortFieldType {
  MERCHANT_ID
  NAME
}

type MerchantStats {
  totalSold: Int!
  totalImpressions: Int!
  totalWishes: Int!
  totalGmv: CurrencyValue!
  lastThirtyDayGmv: CurrencyValue!
  updateTime: Datetime
  marketing: MarketingStats!
  totals(days: Int = 7, coreMetricsOnly: Boolean = false): MerchantTotalStats!
  daily(days: Int = 7, offsetDays: Int = 0, coreMetricsOnly: Boolean = false): [MerchantTotalStats!]!
  weekly(weeks: Int = 20): [MerchantWeeklyStats!]!
  storeRatings(offset: Int = 0, limit: Int = 100, filterByStars: Int = 0): [StoreRating!]!
  storeRatingsCount(filterByStars: Int = 0): Int!
  productRatings(offset: Int = 0, limit: Int = 20, listingTab: ProductRatingListingTab = BestRated): [ProductRating!]!
  productRatingsCount: Int!
  tracking: TrackingPerformanceStats
  delivery: DeliveryPerformanceStats
  refunds: RefundPerformanceStats
  rating: RatingPerformanceStats
  cs: CSPerformanceStats
  topMerchantPerformer: SalesPerformanceStats
  topProductPerformer: SalesPerformanceStats
}

type MerchantSupportConfigSchema {
  isEnBd: Boolean!
  isNonEnBd: Boolean!
}

enum MerchantTaxIdentificationBusinessType {
  S_CORP
  TRUST_OR_ESTATE
  PARTNERSHIP
  C_CORP
  LCC
}

enum MerchantTaxIdentificationFormType {
  W_8BEN_E
  W_9
  W_8BEN
}

type MerchantTaxIdentificationMutations {
  upsertMerchantTaxIdentification(input: UpsertMerchantTaxIdentificationInput!): UpsertMerchantTaxIdentificationMutation!
}

enum MerchantTaxIdentificationPaymentReceiverEntity {
  US
  NON_US
}

enum MerchantTaxIdentificationRejectReson {
  WRONG_DOC
  INVALID_TIN
}

enum MerchantTaxIdentificationReviewAction {
  APPROVE
  REJECT
}

type MerchantTaxIdentificationSchema {
  id: ObjectIdType!
  firstName: String
  lastName: String
  address: AddressSchema!
  businessType: MerchantTaxIdentificationBusinessType
  businessName: String
  employeeIdNumber: String
  foreignTaxId: String
  domicileExplanation: String
  formType: MerchantTaxIdentificationFormType!
  paymentReceiverIdentity: MerchantTaxIdentificationPaymentReceiverEntity!
  selfIdentityClassification: MerchantTaxIdentificationSelfIdentityClassification!
  status: MerchantTaxIdentificationStatus!
  lastUpdated: Datetime!
  signDate: Datetime!
  actionDate: Datetime
  rejectedReason: MerchantTaxIdentificationRejectReson
  actionUsername: String
}

enum MerchantTaxIdentificationSearchType {
  MERCHANT_ID
}

enum MerchantTaxIdentificationSelfIdentityClassification {
  INDIVIDUAL
  BUSINESS
}

enum MerchantTaxIdentificationSortFieldType {
  SUBMITTED_DATE
}

enum MerchantTaxIdentificationStatus {
  REJECTED
  NOT_SUBMIT
  APPROVED
  PENDING
}

type MerchantTaxSchema {
  settings: [TaxSetting!]
  hasConfiguredTaxesBefore: Boolean!
  enrollableCountries: [Country!]!
}

enum MerchantTermsActionEnum {
  DISAGREE
  AGREE
  VIEW
}

type MerchantTermsAgreedMutations {
  acceptTermsOfService(input: AcceptTermsOfServiceInput!): AcceptTermsOfService!
  acceptEuComplianceTermsOfService: AcceptEUComplianceTermsOfService!
  acceptFrComplianceTermsOfService: AcceptFRComplianceTermsOfService!
  acceptDeComplianceTermsOfService: AcceptDEComplianceTermsOfService!
  viewTermsOfService: ViewTermsOfService!
  viewTermsOfServiceById(input: ViewTermsOfServiceByIdInput!): ViewTermsOfServiceById!
  actOnWpsTermsOfService(input: MerchantWPSTermsOfServiceInput!): MerchantWPSTermsOfServiceMutation!
  acceptMerchantPolicy(input: AcceptMerchantPolicyInput!): AcceptMerchantPolicy!
}

type MerchantTermsAgreedSchema {
  agreedToTermsOfService: Boolean!
  agreedToRealNameAuth: Boolean
  agreedToEuComplianceTos: Boolean
  agreedToFrComplianceTos: Boolean
  agreedToDeComplianceTos: Boolean
  wpsTermsOfService: MerchantWPSTermsOfServiceSchema
}

type MerchantTermsOfServiceAgreementSchema {
  state: MerchantTosAgreementStateType
}

type MerchantTermsOfServiceSchema {
  latestVersion: Int!
}

enum MerchantTier {
  WISH_STORE_TRUST
  SUSPICIOUS
  NON_CN_ERP_REFERRED
  CN_BRAND_OWNER
  US_SHOPIFY_REFERRED
  LATAM_BD_BRAND_OWNER
  CN_DEFAULT
  EU_DEFAULT
  LATAM_BD_REFERRED
  CN_BD_REFERRED
  NON_CN_DEFAULT
  US_CONTROL
  EU_BD_REFERRED
  PHANTOM
  PROMOTED_WHITELIST_FINE_EXEMPTION
  US_DELIVERR_REFERRED
  US_BD_REFERRED
  NON_CN_BRAND_OWNER
  US_PAYPAL_REFERRED
  CPG
  CN_ERP_REFERRED
  US_BRAND_OWNER
  NOT_ENROLL
  SELF_INVENTORY
  US_DEFAULT
  NON_CN_BD_REFERRED
  EU_BRAND_OWNER
  PROBATION
}

type MerchantToFactoryConversionMutation {
  error: String
  ok: Boolean!
}

enum MerchantTodoItemSentiment {
  INFO
  POSITIVE
  WARNING
  NEGATIVE
}

enum MerchantTodoItemType {
  SETUP_TAX_INFO
  REJECTED_VIDEOS
  REVIEW_CURRENCY
  EU_PRODUCT_COMPLIANCE
  ENABLE_2FA
  VALIDATE_TAX_IDENTITY
  RESELLER_AGREEMENT
  PRICE_DROP_NEW_OFFERS
  REAUTHENTICATION_ATO
  ADD_PAYMENT
  COMPLETE_EU_VAT_TAX_QUESTIONNAIRE
  ADD_WAREHOUSE
  BIND_WECHAT
  WE_REAPPLICATION_ELIGIBLE
  PRICE_DROP_VIEW_ONGOING_CAMPAIGNS
  BANK_ACCOUNT_VERIFICATION
  TAX_VERIFICATION_FAILED
  UPLOAD_NEW_PRODUCTS
  ENROLL_PRODUCTS_IN_RETURNS
  UK_VAT_OBLIGATION_NOTICE
  PRE_ORDER_UNFULFILLED_ORDER
  GERMANY_PRODUCT_COMPLIANCE
  GBP_CURRENCY_CODE_MIGRATION
  APPLY_RESTRICTED_PRODUCT_REQUEST
  REAUTHENTICATION_REGINFO
  EUR_CURRENCY_CODE_MIGRATION
  JOIN_WISH_EXPRESS
  REVIEW_REMOVAL_PRODUCTS
  BRL_CURRENCY_CODE_MIGRATION
  CURRENCY_CODE_MIGRATION
  TAX_FORM_VERIFICATION
  REAUTHENTICATION_SELLER_PROFILE
  NON_CN_UPLOAD_NEW_PRODUCTS
  REAUTHENTICATION_KYC_PROFILE
  FRANCE_PRODUCT_COMPLIANCE
  VERIFY_PRODUCT_BRANDS
  PRICE_DROP_UNCOMPETITIVE_CAMPAIGN
  ACCEPT_TERMS_OF_SERVICE
}

enum MerchantTosAgreementStateType {
  DISAGREED
  AGREED
  IMPLICIT_AGREED
}

type MerchantTotalStats {
  startDate: Datetime!
  endDate: Datetime!
  gmv: CurrencyValue!
  impressions: BigInt!
  pageViews: BigInt!
  addToCarts: Int!
  orders: Int!
  averageFulfillmentTime: Timedelta
  refundRate30d: Float
  averageShippingTime: Timedelta
  averageShippingDelay: Timedelta
  averageRating30d: Float
}

enum MerchantType {
  Brand
  Factory
  Trading_Company
  Others
}

type MerchantUserGateAllowAll {
  ok: Boolean
}

input MerchantUserGateAllowAllInput {
  name: String!
}

type MerchantUserGateAllowMerchants {
  ok: Boolean
}

input MerchantUserGateAllowMerchantsInput {
  name: String!
  merchantIds: [ObjectIdType!]!
}

type MerchantUserGateAllowUsers {
  ok: Boolean
}

input MerchantUserGateAllowUsersInput {
  name: String!
  userIds: [ObjectIdType!]!
}

type MerchantUserGateMutations {
  allowUsers(input: MerchantUserGateAllowUsersInput!): MerchantUserGateAllowUsers
  allowMerchants(input: MerchantUserGateAllowMerchantsInput!): MerchantUserGateAllowMerchants
  allowAll(input: MerchantUserGateAllowAllInput!): MerchantUserGateAllowAll
}

type MerchantWPSSchema {
  enabledDestinationCountries: [Country!]!
  enabledOriginCountries: [Country!]!
}

input MerchantWPSTermsOfServiceInput {
  merchantAction: MerchantTermsActionEnum!
  tos: WPSTermsTypeEnum!
}

type MerchantWPSTermsOfServiceMutation {
  ok: Boolean!
}

type MerchantWPSTermsOfServiceSchema {
  viewedWpsTos: Boolean!
  viewedUpsTos: Boolean!
  agreedWpsTos: Boolean!
  agreedUpsTos: Boolean!
}

type MerchantWarehouseMutations {
  upsertWarehouse(input: UpsertWarehouseInput!): UpsertMerchantWarehouseMutation
  deleteWarehouse(input: DeleteMerchantWarehouseInput!): DeleteMerchantWarehouseMutation
  submitWarehouseVerificationRequest(input: SubmitWarehouseVerificationRequestInput!): SubmitWarehouseVerificationRequestMutation
}

type MerchantWarehouseSchema {
  id: String!
  unitId: String!
  address: AddressSchema
  weekStats(offset: Int = 0, limit: Int = 20, sort: MerchantWarehouseWeekStatsSort, startDate: DatetimeInput, endDate: DatetimeInput): [MerchantWarehouseWeekStatsSchema!]
  weekStatsCount(startDate: DatetimeInput, endDate: DatetimeInput): Int!
  enabledCountries: [Country!]!
  verificationState: WarehouseVerificationState
  verificationRequest: WarehouseVerificationRequestSchema
  pickupCarrier: PickupCarrier
  carrierPickupTime: String
  merchantHandlingTime: Int
  workdayCalendar: WorkdayCalender
  workdayOverrideCalendar: [WorkDayOverride!]
}

type MerchantWarehouseWeekStatsSchema {
  lateDeliveryRate(orderPolicyType: OrderPolicyType = 1): Float
  maxExpectedGmv: CurrencyValue!
  expectedDeliveries: Int!
  lateDeliveries: Int!
  startDate: Datetime!
  endDate: Datetime!
  isLateDeliveryRateHigh(orderPolicyType: OrderPolicyType = 1): Boolean
  isLateDeliveryRateAtRisk(orderPolicyType: OrderPolicyType = 1): Boolean
  merchantId: ObjectIdType!
}

input MerchantWarehouseWeekStatsSort {
  field: MerchantWarehouseWeekStatsSortFieldType!
  order: SortOrderType!
}

enum MerchantWarehouseWeekStatsSortFieldType {
  START_DATE
}

enum MerchantWarningAction {
  CLAIM
  CONFIRM
  UNCLAIM
  LISTING_LEVEL_DISPUTE
  MERCHANT_LEVEL_DISPUTE
  REQUEST_PAYMENT_RELEASE
  REPLY
  CANCEL
  CLOSE
}

enum MerchantWarningAuditAction {
  CLAIM
  REVERT
  BATCH_CLAIM
  CONFIRM
}

enum MerchantWarningAuditRevertReason {
  POLICY_UPDATE
  INCORRECTED_DATA
  AGENT_ERROR
}

enum MerchantWarningAuditStatus {
  REQUIRE_AUDIT
  CONFIRMED
  REVERTED
}

type MerchantWarningBulkProcessSchema {
  id: ObjectIdType!
  type: BulkMerchantWarningAction!
  requestedBy: String!
  requestedWarningIds: [ObjectIdType!]
  results: [MerchantWarningProcessResultSchema!]
  submitted: Datetime!
}

enum MerchantWarningClaimStatus {
  CLAIMED
  NOT_CLAIMED
  CLAIMED_BY_ME
  ALL
}

enum MerchantWarningCorrespondenceStatus {
  NEW
  HOLD
  OPEN
}

enum MerchantWarningFixAction {
  PROVE_AUTHENTICITY
  EDIT_PRODUCT_LISTING
  UPDATE_MAX_DELIVERY_DAYS
  REQUEST_PAYMENT_RELEASE
  PRODUCT_AUTHORIZATION
  ADDRESS_UNDERLYING_INFRACTION
  MESSAGE
  PAY_WISHPOST_BALANCE
  DISPUTE
}

type MerchantWarningImpactSchema {
  type: MerchantWarningImpactType!
  startDate: Datetime
  endDate: Datetime
  countries: [Country!]
}

enum MerchantWarningImpactType {
  PRODUCT_PAYMENT_HOLD
  ORDER_PAYMENT_HOLD
  AUTO_REFUND
  GEOBLOCK
  MERCHANT_BAN
  MERCHANT_IMPRESSION_BLOCK
  MERCHANT_PAYMENT_HOLD
  PRODUCT_TAKEDOWN
  EAT_COST_FOR_PRODUCT
  PRODUCT_IMPRESSION_BLOCK
  VARIATION_TAKEDOWN
}

type MerchantWarningMutations {
  updateAuditQueueWarning(input: UpdateAuditQueueWarningInput): UpdateAuditQueueWarning
  upsertMerchantWarning(input: UpsertMerchantWarningInput): UpsertMerchantWarning
}

type MerchantWarningProcessResultSchema {
  warningId: ObjectIdType!
  success: Boolean!
  error: String
}

enum MerchantWarningProofDisputeStatus {
  DISPUTING
  DISPUTE_FAILED
  NOT_DISPUTED
  DISPUTE_SUCCESS
}

type MerchantWarningProofSchema {
  id: ObjectIdType!
  type: MerchantWarningProofType!
  disputeStatus: MerchantWarningProofDisputeStatus!
  product: ProductSchema
  order: OrderSchema
  message: String
  brandAuthorization: BrandAuthorizationSchema
  warningId: ObjectIdType
  note: String
}

enum MerchantWarningProofType {
  MERCHANT
  PRODUCT
  VARIATION
  PRODUCT_RATING
  TICKET
  ORDER
}

enum MerchantWarningReason {
  US_TAX_INFO_UNVALIDATED
  WISH_EXPRESS_POLICY_VIOLATION
  VIOLATION_OF_TERMS
  EMPTY_PACKAGES
  VIOLATE_POLICY
  HIGH_CHARGEBACK_RATIO
  LEGAL_TRO_TAKEDOWN
  LATE_CONFIRMED_FULFILLMENT_VIOLATION
  FINE_FOR_COUNTERFEIT_GOODS
  UNCONFIRMED_TRACKING_NUMBERS
  HIGH_IP_INFRINGEMENT
  STORE_VALIDATION_INCOMPLETE
  VIOLATE_TS_POLICY
  SUSPECTED_FRAUD
  INVALID_TRACKING_NUMBERS
  PRODUCT_HIGH_CANCEL_ORDER_RATE
  PRODUCT_HIGH_REFUND_RATIO
  DUPLICATE_PRODUCTS
  EXTREMELY_HIGH_PRICE_SPREAD
  REUPLOADING_COUNTERFEITS
  RESPOND_TO_ADMIN
  HIGH_CHARGEBACK_AND_FRAUD_REFUND_RATIO
  PRODUCT_HIGH_REFUND_RATIO_NO_REMOVE
  DEP_FINE_DISABLE_PROMOTED_PRODUCT_FOR_COUNTRY
  UNFULFILLED_ORDER
  POLICY_TIER_DEMOTION
  BRANDED_PRODUCT_GEOBLOCK
  DECEPTIVE_FULFILLMENT
  HIGH_AUTO_REFUND
  WISH_EXPRESS_POLICY_PRODUCT
  BAD_CUSTOMER_SERVICE
  RELATED_ACCOUNT_IS_BANNED
  MISLEADING_VARIATION
  PRODUCT_IS_INAPPROPRIATE
  DEP_FINE_DISABLE_PROMOTED_PRODUCT
  FINE_WISH_EXPRESS_POLICY_VIOLATION
  CONFIRMED_DELIVERY_POLICY
  BAN_EARLY_STAGE_MERCHANT
  TAKE_USER_OUTSIDE_WISH
  WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION
  WISH_STANDARDS_BAN
  CS_LOW_CSAT_SCORE
  PRODUCT_LOW_RATING_NO_REMOVE
  ORDER_NOT_DELIVERED
  REQUEST_USER_EMAIL
  WISH_EXPRESS_POLICY_MERCHANT
  MERCHANT_CANCELLATION_VIOLATION
  FAKE_RATING
  DEP_BAIT_VARIABLE_PRICING
  DUPLICATE_ACCOUNTS
  CN_PROHIBITED_PRODUCTS
  FINE_UPDATE_TO_COUNTERFEIT
  PRODUCT_LIMIT_REACHED
  HIGH_GMV_FROM_GAMING_AUDIT
  REPEAT_IP_INFRINGEMENT_ON_BRAND_OWNER
  PENALTY_FOR_AUTO_REFUND
  FINAL_JUDGEMENT_ORDER
  HIGH_REFUND_RATIO
  REQUEST_MONEY
  COUNTERFEIT_GOODS
  WISHPOST_NEGATIVE_BALANCE
  DISINGENUOUS_CUSTOMER_SERVICE
  INACTIVE_ACCOUNT
  INVALID_EU_RESPONSIBLE_PERSON
  LATE_FULFILLMENT_RATE
  REPEAT_PRODUCT_SWAPPING
  PRODUCT_LOW_RATING
  HIGH_GMV_FROM_GAMING_FREEZE
  MERCHANT_HARASSMENT
  VIOLATION_OF_POLICY_TIER
  MERCHANT_HIGH_CANCEL_ORDER_RATE
  SUSPENDED_FOR_UNDER_PERFORMING
  MERCHANT_CONTACT_INFO_INVALID
  HIGH_GMV_FROM_GAMING_BAN
  PRODUCT_HIGH_QUALITY_REFUND_RATIO
  FAKE_TRACKING
  WAREHOUSE_FULFILLMENT_POLICY_VIOLATION
  MERCHANT_HIGH_REFUND_EAT_COST
  STRIKE_BASED_HIGH_RISK_PROHIBITED
  MERCHANT_HIGH_QUALITY_REFUND_RATIO
  HIGH_GMV_FROM_MISLEADING_PRODUCTS
  PRODUCT_GEOBLOCK
  FINE_PRODUCT_SWAPPED
  CS_LATE_RESPONSE_RATE
  TAX_SETTING_NOT_UPDATED
  ADDITIONAL_TAX_INFO
}

type MerchantWarningReasonSchema {
  reason: MerchantWarningReason!
  text: String!
}

type MerchantWarningReplySchema {
  senderType: MerchantWarningReplySenderType
  senderName: String
  displayName: String
  date: Datetime
  message: String
  translatedMessage: String
  type: MerchantWarningReplyType
  files: [MerchantFileSchema!]
  idFiles: [MerchantFileSchema!]
  images: [String!]
}

enum MerchantWarningReplySenderType {
  ADMIN
  MERCHANT
  ADMIN_BAN
  ADMIN_UNBAN
  ADMIN_UNBAN_PENDING
}

enum MerchantWarningReplyType {
  ADMIN_COMMENT
  REOPEN_REPLY
  APPROVE_PAYMENT_RELEASE
  UNBAN_EXPLANATION
  REGULAR_REPLY
  AUTOBOT_REPLY
  WITHHOLD_FUNDS_EXPLANATION
  SEND_PB_INCENTIVE
  CLOSE_REPLY
  REQUEST_PAYMENT_RELEASE
  BAN_EXPLANATION
  REJECT_PAYMENT_RELEASE
  BD_APPROVE_PAYMENT_RELEASE
  REMOVE_WITHHOLD_FUNDS_EXPLANATION
  CLOSE_EXPLANATION
  RESET_PAYMENT_RELEASE
}

type MerchantWarningSchema {
  id: ObjectIdType!
  state: MerchantWarningState!
  fineAmount(localized: Boolean): CurrencyValue
  reason: MerchantWarningReasonSchema!
  correspondenceStatus: MerchantWarningCorrespondenceStatus
  adminReasonText: String
  merchantReasonText: String
  counterfeitReasonText: String
  banned: Boolean
  lastUpdate: Datetime!
  createdTime: Datetime!
  creatorName: String
  proofs: [MerchantWarningProofSchema!]!
  fine: MerchantFineSchema
  counterfeitBrand: BrandSchema
  merchant: MerchantSchema
  product: ProductSchema
  products(offset: Int, limit: Int): [ProductSchema!]
  productCount: Int
  order: OrderSchema
  productGmvAtAudit: CurrencyValue
  claimedBy: UserSchema
  auditStatus: MerchantWarningAuditStatus
  disputeCutoffDay: Int!
  effectiveDisputeDeadlineDate: Datetime!
  trackingDispute: TrackingDisputeSchema
  wssImpact: WSSImpactState!
  impacts: [MerchantWarningImpactSchema!]
  merchantActions: [MerchantWarningFixAction!]
  outstandingMerchantActions: [MerchantWarningFixAction!]
  productTrueTagInfo: ProductTrueTagInfoSchema
  takedownRequest: TakedownRequestSchema
  replies: [MerchantWarningReplySchema!]
  resolved: Boolean!
  bulkProcessing: Boolean
  urgencyScore: Float
  productEditRequestCount: Int
}

input MerchantWarningSort {
  field: MerchantWarningSortFieldType!
  order: SortOrderType!
}

enum MerchantWarningSortFieldType {
  CREATED_TIME
  PRODUCT_GMV_AT_AUDIT
  LAST_UPDATE
  URGENCY_SCORE
}

enum MerchantWarningState {
  AWAITING_AUTH_TAGGING_HIGH_GMV
  US_BD_REVIEW_PAYMENT
  CN_BD_REVIEW_PAYMENT
  REQUEST_PAYMENT
  AWAITING_ADMIN
  REQUIRES_ADMIN_REVIEW
  AWAITING_ADMIN_BOT
  CLOSED
  CANCELLED
  NEW
  AWAITING_MERCHANT
  AWAITING_AUTH_TAGGING_LOW_GMV
}

type MerchantWeeklyStats {
  startDate: Datetime!
  endDate: Datetime!
  sales: SalesPerformanceStats!
  rating: RatingPerformanceStats!
  product: ProductPerformanceStats!
  refund: RefundPerformanceStats!
  tracking: TrackingPerformanceStats!
  delivery: DeliveryPerformanceStats!
  cs: CSPerformanceStats!
}

type MerchantWishSellerStandardDetails {
  stats: WishSellerStandardStats
  thingsToWatchBoard: WSSThingsToWatchBoard
  monthlyUpdateStats: WishSellerStandardStats
  complianceUpdateStats: WishSellerStandardStats
  level: WSSMerchantLevelType
  prevLevel: WSSMerchantLevelType
  rawLevel: WSSMerchantLevelType
  layer1Level: WSSMerchantLevelType
  lastUpdatedStats: Datetime
  lastTierUpdateDate: Datetime
  nextMonthlyTierUpdateDate: Datetime
  endDateForLastMonthlyUpdateCalcWindow: Datetime
  policyInfractionWindowStartDate: Datetime
  policyInfractionWindowEndDate: Datetime
  fulfillmentInfractionWindowStartDate: Datetime
  fulfillmentInfractionWindowEndDate: Datetime
  deepDive: WSSPerformanceDeepDiveHub
  recentStats(days: Int = 30): [WishSellerStandardStats!]
  isInactiveToBan: Boolean
}

enum MfpCampaignPriceDiscounted {
  PRICE
  SHIPPING
}

type MisleadingViolationTaggingManagement {
  violationReasons: [TaggingViolationReason!]!
}

enum MobilePlatformType {
  ANDROID
  IOS
}

type ModifyTrackingError {
  orderId: ObjectIdType!
  message: String!
}

input ModifyTrackingOrderInput {
  orderId: ObjectIdType!
  trackingId: String!
  providerId: Int!
  shipNote: String
  originCountryCode: CountryCode!
}

type ModifyTrackingOrders {
  modifyTrackingCount: Int!
  errorMessages: [ModifyTrackingError!]
}

input ModifyWPSTrackingIDInput {
  orderId: ObjectIdType!
  shippingOptionId: String!
  additionalServiceOptions: [WPSAvailableServices!]
}

type ModifyWPSTrackingIDMutation {
  ok: Boolean!
  wpsShipmentId: String
  trackingId: String
  providerId: Int
  errorMessage: String
}

type NavigationResultSchema {
  imageUrl: String
  url: String!
  type: NavigationResultType!
  title: String!
  description: String
  nuggets: [String!]
}

enum NavigationResultType {
  MERCHANT
  PRODUCT
  WARNING
  ORDER
}

enum NoticePriority {
  DEFAULT
  HIGH
}

input NoticeProductQueryInput {
  productId: ObjectIdType
  statuses: [NoticeProductStatus!]
}

type NoticeProductSchema {
  product: ProductSchema!
  status: NoticeProductStatus!
}

enum NoticeProductStatus {
  IP_REMOVED
  DISPUTED
  INAPPROPRIATE_REMOVED
  REPORTED
  ALREADY_REMOVED
  GEO_BLOCKED
}

input NoticeQueryInput {
  noticeId: ObjectIdType
  productId: ObjectIdType
  claimedByEmail: String
  notifierEmail: String
  notifierOrganization: String
  statuses: [NoticeStatus!]
  startDate: DatetimeInput
  endDate: DatetimeInput
  sort: [NoticeQuerySortInput!]
}

input NoticeQuerySortInput {
  field: NoticeSortField!
  order: SortOrderType!
}

type NoticeSchema {
  id: ObjectIdType!
  status: NoticeStatus!
  products(offset: Int! = 0, limit: Int, queryInput: NoticeProductQueryInput!): [NoticeProductSchema!]!
  notifierName: String!
  notifierEmail: String!
  notifierOrganization: String
  notifier: NotifierSchema
  description: String!
  priority: NoticePriority!
  supportFiles: [MerchantFileSchema!]!
  datetimeCreated: Datetime!
  disputeEligibility: Boolean!
  lastClaimedUser: UserSchema
  reviewer: UserSchema
  reviewResponse: String
  datetimeReviewed: Datetime
  disputeDescription: String
  disputeSupportFiles: [MerchantFileSchema!]
  datetimeDisputed: Datetime
  disputeReviewer: UserSchema
  disputeReviewResponse: String
  datetimeDisputeReviewed: Datetime
  note: String
}

enum NoticeSortField {
  PRIORITY
  DATETIME_CREATED
  DATETIME_DISPUTED
}

enum NoticeStatus {
  RESOLVED
  REJECTED
  DISPUTE_PENDING_REVIEW
  PARTIALLY_REJECTED
  DISPUTE_UNDER_REVIEW
  UNDER_REVIEW
  PENDING_REVIEW
}

type NotificationsServiceSchema {
  notificationCount(viewed: Boolean): Int!
}

input NotifierQueryInput {
  type: NotifierType!
  name: String
  email: String
  countryCode: CountryCode
  organization: String
  isTrustedFlagger: Boolean
}

type NotifierSchema {
  id: ObjectIdType!
  type: NotifierType!
  organization: String!
  countries: [Country!]!
  name: String
  email: String!
  isTrustedFlagger: Boolean!
}

enum NotifierType {
  EMAIL_ADDRESS
  EMAIL_DOMAIN
}

type NotifyPasswordRecoveryMutation {
  error: String
  ok: Boolean!
}

input NotifyPasswordRecoveryMutationInput {
  email: String!
}

scalar ObjectIdType

type OffsiteBoost {
  enabled: Boolean!
  dailyBudget: CurrencyValue!
  maxDailyBudget: CurrencyValue!
  minDailyBudget: CurrencyValue!
  chargingMethod: ExternalBoostChargingMethod!
  statsAvailableDate: Datetime!
}

type OffsiteBoostDailyStats {
  date: Datetime!
  clicks: Int!
  orders: Int!
  gmv: CurrencyValue!
  attributed: ExternalBoostAttributedStats
  spend: CurrencyValue!
}

input OffsiteBoostPropertyInput {
  enabled: Boolean
  dailyBudget: CurrencyInput
}

type OffsiteBoostStats {
  startDate: Datetime!
  endDate: Datetime!
  daily: [OffsiteBoostDailyStats!]!
}

type OidcCredentialSchema {
  id: ObjectIdType!
  authEmail: String!
  authProvider: OidcProviderEnum!
}

enum OidcProviderEnum {
  WISH_OKTA
  GOOGLE
  WISH_AUTH
}

type OnboardingSchema {
  steps(completed: Boolean, requiredForSubmission: Boolean = false): [OnboardingStep!]
  numStepsLeft(requiredForSubmission: Boolean = false): Int!
  numStepsCompleted(requiredForSubmission: Boolean = false): Int!
  numSteps(requiredForSubmission: Boolean = false): Int!
  completed: Boolean!
}

type OnboardingStep {
  name: MerchantOnboardingStep!
  title: String!
  description: String!
  ctaText: String!
  ctaLink: String
  illustration: String
  completed: Boolean!
}

enum OneoffPaymentStatus {
  CANCELLED
  UNPAID
  PAID
}

enum OneoffPaymentType {
  WISHPOST_ADJUSTMENT_PAYMENT
  WITHHOLD_RELEASE
  MERCHANT_INCENTIVE
  EARLY_PAYMENT_REIMBURSEMENT_FEE
  CONSOLIDATE_MP_PAYMENT
  PRODUCT_REBATE
  FINE_REVERSED
  ONEOFF_ADMIN_TOOL
  DISPUTE_APPROVED
  FBW_PAYMENT
  PRODUCT_BOOST_BALANCE_REFUND
  REV_SHARE_ADJUSTMENT
  REGISTRATION_REFUND
  ONEOFF
  EARLY_PAYMENT
  SE_CASH_BACK
  STORE_PAYMENT
  PRODUCT_UNTAGGED_MISLEADING
  WISH_PARCEL_SERVICE_ADJUSTMENT
}

type OrderAdvancedLogisticsInfoSchema {
  canUncombine: Boolean!
}

enum OrderBadge {
  WPS_ELIGIBLE
  PREMIUM_SHIPPING_CARRIER_UPGRADE
  LESS_THAN_TRUCK_LOAD
  COUNTRY_BADGE_KR
  ADVANCED_LOGISTICS
  TRACKING_CANCELLED
  UNIFICATION_INITIATIVE
  PAY_CUSTOMER_VAT_REQUIRED_LEGACY_DE
  NON_COMPLIANT_WISH_EXPRESS
  OPTIONAL_ADVANCED_LOGISTICS
  EPC_FAST_PAYMENT
  CONFIRMED_DELIVERY_REQUIRED
  COUNTRY_BADGE_BR
  COMBINED
  APLUS_FAST_PAYMENT
  STRATEGIC_COUNTRY_REBATE
  CHINA_POST_SUBSIDY
  PAY_CUSTOMER_VAT_REQUIRED_UK
  SE_CASHBACK
  COUNTRY_BADGE_NO
  PAY_CUSTOMER_VAT_REQUIRED_EU
  MERCHANT_STANDING_BENEFIT
  EU_VAT
  STRATEGIC_ORDER_REBATE
  FBW
  COUNTRY_BADGE_CL
  COUNTRY_BADGE_GB
  WISH_EXPRESS
  TRACKING_CANCELLED_A_PLUS
}

type OrderCSVColumnSchema {
  name: String!
  description: String!
}

enum OrderCarrierTier {
  Tier1
  Tier3
  Tier2
  Tier4
}

type OrderConstants {
  dadaPolicyDaysToConfirmedDelivered: Int
}

type OrderEPCInfoSchema {
  canUncombine: Boolean!
}

type OrderEstimatedShippingTimelineSchema {
  maxShipTime: Datetime!
  maxDeliveryTime: Datetime
}

type OrderFBWDetailsSchema {
  isFbw: Boolean!
  warehouseName: String!
  warehouseId: String!
}

enum OrderHistorySearchType {
  ORDER_ID
  PRODUCT_ID
  TRACKING_NUMBER
  USER_NAME
  DISPUTE_ID
  TRANSACTION_ID
}

input OrderHistorySort {
  field: OrderHistorySortFieldType!
  order: SortOrderType!
}

enum OrderHistorySortFieldType {
  ORDER_TIME
  LAST_UPDATE
}

enum OrderInfractionDisputeAction {
  CLAIM
  ADMIN_COMMENT
  CREATE
  REOPEN
  REJECT
  CANCEL
  CLOSE
  HOLD
  APPROVE
  REPLY
}

type OrderInfractionDisputeMutations {
  upsertOrderInfractionDispute(input: UpsertOrderInfractionDisputeInput): UpsertOrderInfractionDispute
}

enum OrderInfractionDisputeSubreason {
  INCORRECT_CONFIRMED_DELIVERY_DATE_FROM_CARRIER
  AMBIGUOUS_CUSTOMER_ADDRESS
  CAN_PROVIDE_CORRECT_TRACKING_INFO
  NATURAL_DISASTER
  RESHIP_PACKAGE
  NATIONAL_HOLIDAY
  UNVERIFIABLE_ADDRESS
  SHIPMENT_RETURNED
  INCORRECT_CONFIRMED_FULFILLMENT_DATE
  CANNOT_SHIP_TO_REGION
  TECHNICAL_ISSUE
  OTHER
  OPERATIONAL_OR_IT_ISSUE
  ADDRESS_PO_BOX
  WISH_LOGISTICS_CANNOT_FULFILL
  INCORRECT_TRACKING_INFO
  SHIPMENT_STUCK_AT_CUSTOMS
}

enum OrderLimboState {
  LIMBO_AND_ROUTED
  NOT_LIMBO
  LIMBO_AND_CUSTOMER_REFUNDED
  LIMBO_AND_NOT_ROUTED
}

enum OrderLogicalPaymentState {
  TO_BE_PAID
  PENDING_WFP_WITHHOLD
  PENDING_WISHPOST_SHIPPING
  WILL_NOT_BE_PAID
  HAS_BEEN_PAID
  FBW_PAID
  PENDING_CONFIRMED_SHIP
  UNDER_REVIEW
  WITHHELD
}

type OrderMFPCampaignSchema {
  priceDiscountType: MfpCampaignPriceDiscounted!
  campaignName: String!
  campaignId: String!
  campaign: MFPCampaignSchema
}

type OrderNOFulfillSchema {
  isBoundOrder: Boolean!
}

enum OrderOnTimeDeliveryCriteria {
  WISH_EXPRESS
  DADA
}

enum OrderPolicyType {
  WISH_EXPRESS
  WAREHOUSE_FULFILLMENT_POLICY
}

enum OrderRebateCancelType {
  CANCEL_BEFORE_PAYMENT
  CANCEL_AFTER_PAYMENT
  NO_CANCEL
}

type OrderRebateSchema {
  id: ObjectIdType!
  type: OrderRebateType!
  paymentId: ObjectIdType
  refundPaymentId: ObjectIdType
  amount(localized: Boolean): CurrencyValue!
  localizedRebateAmount: CurrencyValue!
  cancelState: OrderRebateCancelType
}

enum OrderRebateType {
  STRATEGIC_ORDER_REBATE
  WISH_EXPRESS_REBATE
  CHINA_POST_SUBSITY
  COVID19_SUBSIDY
  TRANSACTION_FEE_REBATE
  MARKETING_REBATE
}

type OrderRefundBuyerFraudSubreasonSchema {
  reason: BuyerFraudReasonCategory!
  text: String!
}

enum OrderRefundDeductedStatus {
  DEDUCTED_AFTER_PAYMENT
  DEDUCTED_BEFORE_PAYMENT
  UNDEDUCTED
}

type OrderRefundItemDisputeSchema {
  supportingPolicy: String!
  paymentId: ObjectIdType
  isApproved: Boolean!
}

type OrderRefundItemSchema {
  id: ObjectIdType!
  refundTime: Datetime!
  quantity: Int!
  localizedMerchantResponsibleAmount: CurrencyValue
  merchantResponsibleAmount(localized: Boolean, includeWishpostFee: Boolean): CurrencyValue
  merchantResponsibilityRatio: Float!
  reasonInfo: OrderRefundReasonSchema!
  eatCostWarning: MerchantWarningSchema
  dispute: OrderRefundItemDisputeSchema
  disputeId: ObjectIdType
  isDisputable: Boolean!
  canReportFraud: Boolean!
  refundTax(localized: Boolean): CurrencyValue
  payment: OrderRefundPaymentSchema!
  note: String
  source: RefundSource!
}

type OrderRefundItemsSummarySchema {
  isPartialAmountRefunded: Boolean!
  refundedQuantity: Int!
  refundedPercentage: Float
}

type OrderRefundPaymentSchema {
  id: ObjectIdType
  time: Datetime
  status: OrderRefundDeductedStatus!
  merchantAmount(localized: Boolean, includeWishpostFee: Boolean): CurrencyValue
}

type OrderRefundReasonSchema {
  reason: RefundReasonCategory!
  text: String
}

type OrderReportReasonSchema {
  reportOrderReason: ReportOrderReasons!
  reportOrderReasonText: String!
}

type OrderReturnLabelFeeSchema {
  id: ObjectIdType!
  amount(localized: Boolean = true): CurrencyValue!
}

type OrderReturnsSchema {
  canOpenReturnDispute: Boolean!
}

enum OrderRevShareProductCategory {
  APPAREL_ACCESSORY
  HOUSEHOLD
  WATCH
  JEWELRY_AND_ACCESSORY
  OTHER
  ELECTRONICS
  CLOTHING
  SEX_TOY
  SHOES
}

type OrderSalesTaxDetailsSchema {
  netTax(remitType: CommerceTransactionTaxRemitType, inMerchantCurrency: Boolean = true, targetCurrency: TaxTargetCurrency = 1): CurrencyValue!
  salesTax(remitType: CommerceTransactionTaxRemitType, inMerchantCurrency: Boolean = true, eventTypes: [CommerceTransactionTaxEventType!] = [1, 3], targetCurrency: TaxTargetCurrency = 1): CurrencyValue!
  refundedTax(remitType: CommerceTransactionTaxRemitType, inMerchantCurrency: Boolean = true, targetCurrency: TaxTargetCurrency = 1): CurrencyValue!
  items(remitType: CommerceTransactionTaxRemitType): [OrderTaxItemSchema!]!
  remitTypes: [CommerceTransactionTaxRemitType!]!
  itemCount: Int!
  authorityCountry: Country
}

type OrderSchema {
  id: ObjectIdType!
  transactionId: ObjectIdType
  merchantId: ObjectIdType!
  merchantPaymentStatus: MerchantPaymentStatus!
  merchantPaymentId: ObjectIdType
  merchantPaymentTime: Datetime
  paidAmount: CurrencyValue!
  orderTime: Datetime
  releasedTime: Datetime
  state: CommerceTransactionState!
  merchantTotal: CurrencyValue!
  merchantTotalAfterMfpDiscount: CurrencyValue!
  totalCost: CurrencyValue!
  priceCost: CurrencyValue!
  hoursLeftToFulfill: Int
  paymentStatus: OrderLogicalPaymentState!
  shippingDetails: ShippingDetailsSchema
  variation: VariationSchema
  product: ProductSchema
  productName: String!
  warehouse: MerchantWarehouseSchema
  quantity: Int!
  requiresConfirmedDelivery: Boolean!
  isFbwFastPayment: Boolean!
  isTopStandingMerchant: Boolean!
  isExpeditedPolicy: Boolean!
  isWishLocal: Boolean!
  removedFromAplusTime: Datetime
  userReceivedTime: Datetime
  availableShippingProviders(originCountryCode: CountryCode!): [ShippingProviderSchema!]!
  shippingProviderId: Int
  acceptableShippingOrigins: [Country!]!
  shippingOrigin: Country
  shippingOriginAddress: AddressSchema
  tax: OrderTaxSchema
  productId: ObjectIdType!
  skuAtPurchaseTime: String!
  sizeAtPurchaseTime: String
  colorAtPurchaseTime: String
  canRefund: Boolean!
  canEditShippingAddress: Boolean!
  isProcessing: Boolean!
  isWishExpress: Boolean!
  shouldDisplayDeliveryStatus: Boolean!
  isStreamline: Boolean!
  warehouseFulfillmentPolicyInfo: OrderWFPInfoSchema
  specialPrograms: [SpecialOrderProgramSchema!]!
  shopifyDetails: OrderShopifyDetailsSchema
  deliveryDeadline: Datetime
  reReleasedTime: Datetime
  trackingCancelledDate: Datetime
  validRefundReasons: [OrderRefundReasonSchema!]!
  isAdvancedLogistics: Boolean!
  isCombinedOrder: Boolean!
  isRemovedFromAdvancedLogistics: Boolean!
  isUnityOrder: Boolean!
  initialWishpostShipping: CurrencyValue
  estimatedWishpostShipping: CurrencyValue
  unityWishpostShipping: CurrencyValue
  wishpostShippingUpdates: [WishPostShippingUpdatesSchema!]!
  shippedDate: Datetime
  hasShipped: Boolean!
  refundedTime: Datetime
  legacyRefundSource: LegacyRefundSource
  isBlueFusion: Boolean!
  isStoreUploaded: Boolean!
  isPickupNow: Boolean!
  merchantPrice(localized: Boolean): CurrencyValue!
  merchantPriceAfterMfpDiscount: CurrencyValue!
  merchantShipping(localized: Boolean): CurrencyValue!
  merchantShippingAfterMfpDiscount: CurrencyValue!
  adjustedProductPrice: CurrencyValue
  adjustedShippingPrice: CurrencyValue
  shippingCost(localized: Boolean): CurrencyValue!
  warehouseId: String
  limboState: OrderLimboState!
  merchantCurrencyAtPurchaseTime: PaymentCurrencyCode!
  customerPaidCurrency: String!
  combinedOrderId: ObjectIdType
  chargeback: Boolean!
  rebates: [OrderRebateSchema!]
  fbwDetails: OrderFBWDetailsSchema
  returnLabelFee: OrderReturnLabelFeeSchema
  returnDetailsId: ObjectIdType
  trackingDispute: TrackingDisputeSchema
  cartPrice: CartPriceDetailSchema
  requiresDeliveredDutyPaid: Boolean!
  inRefundLimbo: Boolean!
  wishExpressExtensionDays: Int!
  isRouted: Boolean!
  isFreeShippingEligible: Boolean!
  routedTo: OrderSchema
  confirmedDelivered: Boolean!
  canModifyTrackingInfo: Boolean!
  wasDeliveredOnTime(criteria: OrderOnTimeDeliveryCriteria): Boolean
  ttd: Int
  ttdBusinessDays: Int
  expectedTtdBusinessDays: Int
  expectedDeliveryDate: Datetime
  isInIncentiveProgram: Boolean!
  isShippedWithQualifiedDadaCarrier: Boolean!
  isEligibleToShipWithWps: Boolean!
  wpsFulfillment: WPSFulfillmentInfoSchema
  epc: OrderEPCInfoSchema
  advancedLogistics: OrderAdvancedLogisticsInfoSchema
  returns: OrderReturnsSchema
  supportTicket: CustomerSupportTicket
  ukDetails: OrderUKFulfillSchema
  norwayDetails: OrderNOFulfillSchema
  packageOverviewDocumentUrl: String
  shippingEstimate: OrderShippingEstimate
  canRequestAddressVerification: Boolean!
  canUploadDeliveryConfirmation: Boolean!
  routingOriginalOrderId: ObjectIdType
  canShowCarrierTier: Boolean!
  customerIdentifyInfo: CustomerIdentityInfo
  tracking: OrderTrackingInfoSchema
  pastTracking: PastOrderTrackingInfoSchema
  penalties: [PenaltySchema!]!
  infractions: [MerchantWarningSchema!]!
  badges: [OrderBadge!]!
  isNewRefund: Boolean!
  refundItems: [OrderRefundItemSchema!]
  refundItemsSummary: OrderRefundItemsSummarySchema
  client: CommerceTransactionClient
  estimatedShippingTimeline: OrderEstimatedShippingTimelineSchema
  updatedRevShare: Float
  originalRevShare: Float
  merchantCommissionFees: CurrencyValue
  showMerchantCommissionFees: Boolean
  oneoffPayment: MerchantOneoffPaymentSchema
  productCategoryDispute: ProductCategoryDisputeSchema
  revShare: RevShareInfoSchema!
  counterfeitRefundWarningId: ObjectIdType
  withholdWarningId: ObjectIdType
  withholdReasonText: String
  warehouseShippingType: OrderWarehouseShippingType
  customer: CustomerSchema!
  showAplusShippingAddressTooltip: Boolean!
  merchantFundedPromotions: [OrderMFPCampaignSchema!]
  returnRequest: ReturnRequestSchema
}

type OrderShippingEstimate {
  minTime: Timedelta
  maxTime: Timedelta
}

type OrderShopifyDetailsSchema {
  shopifyOrderId: String!
}

type OrderTaxItemSchema {
  id: String!
  createdTime: Datetime!
  transactionId: ObjectIdType!
  variationId: ObjectIdType!
  orderId: ObjectIdType!
  refundItemId: ObjectIdType
  taxType: TaxType!
  eventType: CommerceTransactionTaxEventType!
  remitType: CommerceTransactionTaxRemitType!
  isRefund: Boolean!
  isSale: Boolean!
  quantity: Int!
  grossAmount: CurrencyValue!
  taxableAmount: CurrencyValue!
  taxRate: Float!
  taxAmount: CurrencyValue!
  exemptAmount: CurrencyValue
  authority: TaxAuthoritySchema!
  taxableAddress: AddressSchema!
}

type OrderTaxSchema {
  norwayVatNumber: String
  salesTax: OrderSalesTaxDetailsSchema!
  isVatOrder: Boolean
  euVat: EUVATSchema
  isWishReseller: Boolean!
}

type OrderTrackingInfoSchema {
  confirmedFulfillmentDate: Datetime
  deliveredDate: Datetime
  isTrackingConfirmed: Boolean!
  checkpoints: [TrackingCheckpointSchema!]
  carrierTier: OrderCarrierTier
  wishReceivedShippedTime: Datetime
  confirmedDeliveredTime: Datetime
  isFakeTrackingOrder: Boolean!
  warehouseArrivalTime: Datetime
  disputeConfirmedTime: Datetime
  disputeDeliveredTime: Datetime
  disputeCarrierTier: OrderCarrierTier
}

type OrderUKFulfillSchema {
  isBoundOrder: Boolean!
}

type OrderWFPInfoSchema {
  deliveryState: WFPOrderDeliveryState!
  wishExpress: WishExpressInfoSchema
  wfpWithholdReason: WFPWithholdReasonSchema
}

enum OrderWarehouseShippingType {
  MERCHANT_TTD_13_DAY
  REGULAR
  MERCHANT_TTD_40_DAY
  MERCHANT_TTD_38_DAY
  MERCHANT_TTD_3_DAY
  MERCHANT_TTD_17_DAY
  MERCHANT_TTD_20_DAY
  MERCHANT_TTD_7_DAY
  MERCHANT_TTD_35_DAY
  MERCHANT_TTD_44_DAY
  MERCHANT_TTD_23_DAY
  WISH_EXPRESS_2_DAY
  MERCHANT_TTD_27_DAY
  FBW_V1_WLC
  WISH_EXPRESS
  MERCHANT_TTD_19_DAY
  MERCHANT_TTD_9_DAY
  WISH_BLUE
  MERCHANT_TTD_15_DAY
  MERCHANT_TTD_25_DAY
  MERCHANT_TTD_31_DAY
  FBW_V2_REGULAR
  MERCHANT_TTD_11_DAY
  MERCHANT_TTD_16_DAY
  MERCHANT_TTD_33_DAY
  MERCHANT_TTD_21_DAY
  MERCHANT_TTD_12_DAY
  MERCHANT_TTD_42_DAY
  MERCHANT_TTD_4_DAY
  MERCHANT_TTD_41_DAY
  FBW_V2
  MERCHANT_TTD_45_DAY
  MERCHANT_TTD_37_DAY
  FBW_V1
  MERCHANT_TTD_39_DAY
  MERCHANT_TTD_2_DAY
  MERCHANT_TTD_22_DAY
  MERCHANT_TTD_18_DAY
  MERCHANT_TTD_34_DAY
  WISH_EXPRESS_7_DAY
  FBW_V2_CALCULATED
  MERCHANT_TTD_30_DAY
  MERCHANT_TTD_10_DAY
  FBW_V2_EXPRESS
  MERCHANT_TTD_43_DAY
  MERCHANT_TTD_32_DAY
  MERCHANT_TTD_26_DAY
  MERCHANT_TTD_14_DAY
  WAIT_AND_SAVE
  MERCHANT_TTD_6_DAY
  MERCHANT_TTD_8_DAY
  MERCHANT_TTD_24_DAY
  MERCHANT_TTD_36_DAY
  MERCHANT_TTD_28_DAY
  MERCHANT_TTD_5_DAY
  MERCHANT_TTD_29_DAY
  MERCHANT_TTD_1_DAY
}

type OrdersCsvDownload {
  ok: Boolean!
  errorMessage: String
}

input OrdersCsvDownloadInput {
  query: String
  searchType: OrderHistorySearchType
  offset: Int = 0
  sort: OrderHistorySort
  filter: CSVExportFilterType
  startDate: DatetimeInput!
  endDate: DatetimeInput!
  wishExpressOnly: Boolean = false
}

input OtherCountriesShippingSetting {
  enabled: Boolean!
  price: CurrencyInput!
}

input PackageDimensionsInput {
  weight: WeightInput!
  height: LengthInput
  length: LengthInput
  width: LengthInput
}

enum PartialRefundType {
  PRODUCT_PRICE
  QUANTITY
  PARTIAL_AMOUNT
  PERCENTAGE
}

type PasswordEvaluation {
  valid: Boolean!
  errorMessage: String
}

type PasswordMutations {
  change(input: ChangePasswordInput!): ChangePasswordMutation
}

type PastOrderTrackingInfoSchema {
  tracking: OrderTrackingInfoSchema
  provider: ShippingProviderSchema
  lastUpdatedDate: Datetime
  trackingId: String
}

input PayableCleanupInput {
  payableIds: [String!]!
  payableTypes: [String!]!
  validationId: String
  localCleanUp: Boolean!
}

type PayableCleanupMutation {
  ok: Boolean!
  message: String
}

type PayableInfoSchema {
  orderPayables(payableIds: [String!]): [OrderSchema!]
  finePayables(payableIds: [String!]): [MerchantFineSchema!]
  oneoffPayables(payableIds: [String!]): [MerchantOneoffPaymentSchema!]
  validationResult(validationId: String): [ValidationResultSchema!]
}

input PayableValidationInput {
  payableIds: [String!]!
  payableTypes: [String!]!
}

type PayableValidationMutation {
  ok: Boolean!
  message: String
  validationId: String
}

type PaymentBusinessInfo {
  name: String!
  businessId: String!
}

enum PaymentCurrencyCode {
  JPY
  USD
  AUD
  CHF
  UAH
  TRY
  CNY
  MXN
  CZK
  BRL
  GBP
  CAD
  SEK
  DKK
  EUR
}

type PaymentPersonalInfo {
  name: String!
  id: String
  phoneNumber: String!
}

type PaymentProvider {
  logo: String!
  name: String!
  type: PayoutPaymentProviderType!
  contactInfo: PaymentProviderContactInfo
}

type PaymentProviderContactInfo {
  email: String!
  phone: String
  website: String
  wechatUsername: String
  qqUserId: String
}

enum PaymentType {
  CREDIT
  DEBIT
}

type PayoneerSignupMutation {
  ok: Boolean!
  message: String
  redirectUrl: String
  alreadyRegistered: Boolean
}

enum PayoutPaymentProviderType {
  LIANLIAN
  PAYONEER
  UMPAY_ENTERPRISE
  UMPAY
  BILL
  PAYPAL
  PAYPAL_EEA
  PINGPONG
  PAYPAL_MERCH
  WISHPAY
  UMPAY2
  CARDINFOLINK
  ALLPAY
  PAYECO2
}

type PenaltySchema {
  reason: FineReason!
}

input PerformanceProductSort {
  field: PerformanceProductSortFiled!
  order: SortOrderType!
}

enum PerformanceProductSortFiled {
  ORDER
  GMV
  IMPRESSION
}

type PermissionSchema {
  id: PermissionType!
  name: String!
  description: String
}

enum PermissionStatusType {
  ASSIGNED
  ASSIGNABLE
  DEFAULT
}

enum PermissionType {
  ADD_PRODUCTS
  COUNTERFEIT_TAG
  CAN_ACCESS_ONEOFF_API_GET_APPROVERS
  CAN_CHECK_EXTERNAL_TRACKING
  SHOW_SHIPPING_PROVIDERS
  CAN_VIEW_ALL_INTERNAL_USERS
  CAN_REVIEW_MERCHANT_KYC
  REVIEW_ONEOFF_REQ_DISABLE_DYNAMIC_PRICING
  EDIT_TAGGING_PERMISSIONS
  CAN_ACT_ON_KR_MERCHANT
  CAN_BE_ASSIGNED_MERCHANT_COUNTRY
  CREATE_ADMIN_ACCOUNT
  REVIEW_ONEOFF_REQ_SET_REV_SHARE
  VIEW_PRODUCTS
  IMAGE_CHANGE_AUDIT_TAG
  CAN_MANAGE_US_BDS
  VIEW_GS_MERCHANTS
  BOOST
  MANAGE_BRAND_PARTNERS
  CREATE_B2B_SALE_FEE
  CAN_REVIEW_CN_PAYMENT_REQUEST
  CAN_ACCESS_ONEOFF_VIEW_ALL_REQUESTS
  UPDATE_LOCAL_TO_LOCAL
  CAN_ACCESS_ONEOFF_API_SAVE
  CREATE_LEGAL_SETTLEMENT_FINE
  CAN_PERFORM_CHARGEBACK_REVIEW
  CAN_TOGGLE_ADMIN_EDIT_ON_ALL_USERS
  VIEW_PENDING_SANCTION_SCREENING_HOLD
  COUNTERFEIT_TAG_AUDIT_IN_HOUSE
  CREATE_ATO_HOLD
  SHOW_DETAIL_TAGGER_TEST_SPEC
  CAN_ACCESS_CONFIRM_DELIVERED_CARRIER
  SHOW_ORDER_PENALTIES
  VIEW_LEGAL_INJUNCTION
  VIEW_HIGH_IP_INFRINGEMENT_HOLD
  CAN_MANAGE_MERCHANT_ACCOUNT_BALANCES
  SUPPLY_CHAIN_FINANCE
  CAN_GROUP_MERCHANTS
  PROMO_TAG
  TRIGGER_SELLER_PROFILE_REVERIFICATION
  CAN_UPLOAD_BANK_ACCOUNT_DOCUMENT
  MANAGE_LEGAL_INJUNCTION
  DEP_TRUE_BRAND_RESOLUTION_TAG
  REVIEW_ONEOFF_REQ_ISSUE_PB_CREDITS_TO_SELF_INVENTORY_MERCHANTS
  EDIT_MERCHANT_PERMISSIONS
  CAN_SEND_SMS
  MANAGE_TAX_ENROLLMENT
  CREATE_DECEPTIVE_FULFILLMENT_FINE
  CAN_CREATE_WECHAT_OFFICIAL_ACCOUNT_MENU
  CREATE_ADMIN
  CAN_ACT_ON_US_MERCHANT
  EDIT_ORDERS
  LISTING_REVIEW_TAG
  LOGIN_TO_WISH_LOCAL
  VIEW_PRODUCT_LISTING_FEE
  PRODUCT_RATING_IMAGE_MANUAL_TAG
  CREATE_PUBLIC_MERCHANT_APP
  MANAGE_ERP_PARTNERS
  TAG_AUTHORIZATION
  REVIEW_ONEOFF_REQ_WHITELIST_MERCHANTS
  CAN_HANDLE_FRAUD_INFRACTION
  FAST_QUEUE_TAGGING_JOBS
  SUPPLY_CHAIN_MERCHANDISE
  REVIEW_ONEOFF_REQ_SET_HEDGES
  CAN_ACCESS_ONEOFF_PAGE_LIST
  USER_GENERATED_PRODUCT_IMAGE_TAG
  COMPLETE_AUTHENTIC_BRAND_SELLER_BADGE_APPLICATIONS
  CAN_VIEW_TRANSACTION_DETAIL
  CAN_REQUEST_DATA_SYNTHESIS
  EDIT_ADMIN_PERMISSIONS
  CAN_VIEW_BRAND_LIST
  SHOW_PRODUCT_BOOST
  SHOW_ALL_MERCHANT_PROFILES
  REVIEW_COUNTERFEIT_INFRACTION
  VIEW_OTHER_HOLD
  SHOW_DETAIL_TAGGER_TEST_RESULT
  MANAGE_FBW_ORDERS
  VIEW_FRAUDULENT_ACTIVITES_HOLD
  GET_PAYMENTS
  CREATE_VARIATION
  CAN_REVIEW_DISPUTES
  DEP_IP_VIOLATION_TAG_RESOLUTION
  CREATE_TAKEDOWN_REQUESTS
  CAN_ACCESS_MANUAL_REVIEW_ONLY_TOOL
  CREATE_PENDING_SANCTION_SCREENING_HOLD
  CREATE_TRO_HOLD
  CAN_ACT_ON_EU_MERCHANT
  SHOW_COUNTERFEIT_TAGGER_TEST_RESULT
  TAG_STATUS_CHECK
  CAN_ACCESS_MERCHANT_RISK_REVIEW_OUTCOME_ONEOFF
  VIEW_HOLDS_FOR_LOCAL_MERCHANTS
  CREATE_LISTING_REVIEW_JOB
  MANAGE_SHIPPING_SETTINGS
  CAN_CREATE_USERS
  DETAIL_TAG_MANUAL
  ADD_SIZE_COLOR
  UNDO_INFRACTION_ACTION
  AUDIT_TAGGING_BY_TAGGERS
  REMOVE_WISH_EXPRESS_PRODUCTS
  VIEW_LOGICAL_TICKET_QUEUES
  LISTING_REVIEW_TAG_RESOLUTION
  CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_KR
  YANWEN_LOGISTIC
  SHIP_ORDERS
  REVIEW_ONEOFF_REQ_TEMP_EXEMPT_PROMOTE_PRODUCT_POLICY
  REVIEW_ONEOFF_REQ_MIGRATE_MERCHANT_CURRENCY
  VIEW_SHIP_FRAUD_HOLD
  CAN_VIEW_MERCHANT_IDS
  EDIT_LOGICAL_TICKET_QUEUE_ASSIGNMENT
  CAN_MANAGE_MY_MERCHANT
  SEND_SYSTEM_UPDATE_TO_MERCHANTS
  VIEW_TRUE_BRAND_DIRECTORY
  EDIT_BD_PERMISSIONS
  CAN_CREATE_BULK_ONEOFF_PAYMENTS
  CS_REP_LEAD_STATS
  EDIT_PRODUCTS
  PROMO_MANUAL_TAG
  VIEW_GLOBAL_LEADERBOARD
  REVIEW_ONEOFF_REQ_ENROLL_CURRENCY_MIGRATION_DISPUTE
  REVIEW_ONEOFF_REQ_ENABLE_DISABLE_CSP_FOR_ALL_ELIGIBLE_PRODUCTS
  COUNTERFEIT_TAG_RESOLUTION
  MANAGE_WHITE_GLOVE
  CAN_UPDATE_CSP_CONFIG
  CAN_VIEW_ORDERS
  CAN_VIEW_CN_INFRACTIONS
  CAN_GET_COLLECTIONBOOST
  SYNC_SHOPIFY_PRODUCTS
  SHOW_REFUND_PERFORMANCE
  CAN_REVIEW_US_PAYMENT_REQUEST
  CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_TW
  SHOW_ORDERS
  CAN_USE_TFA_ADMIN_TOOL
  CAN_DOWNLOAD_ENTIRE_ORDER_HISTORY
  DEP_BRAND_REVIEW_RESOLUTION_TAG
  CAN_BE_VIEWED_BY_OUTSOURCE_MERCHANT
  REQUEST_EARLY_PAYMENT
  VIEW_BD_ANNOUNCEMENTS
  SAFELIST_PRODUCTS
  BOXC_LOGISTIC
  REVIEW_ALL_INFRACTION
  CAN_SEND_EMAIL
  ESCALATE_TO_MERCHANT
  ACCEPT_MERCHANT_TERMS
  CREATE_INTERNAL_HOLD
  SUPPLY_CHAIN_ADMIN
  REVIEW_ONEOFF_REQ_ENABLE_DYNAMIC_PRICING
  CAN_REVIEW_TRUE_BRAND_REQUEST
  UPDATE_BLUE_STORE_ADVANCE
  EDIT_MERCHANTS
  CAN_ACT_ON_BR_MERCHANT
  CAN_ACT_ON_ASIAN_MERCHANT
  CAN_REVIEW_MERCHANT_INFO_ONLY
  UPDATE_SANCTION_SCREENING_HITS
  SHOW_STORE_ASSETS
  CAN_HANDLE_ORDER_CHANGE_REQUEST
  CAN_ACCESS_ONEOFF_REQ_TOOL
  ACCESS_EXTERNAL_APIS
  VIEW_TERM_OF_SERVICE_HOLD
  CAN_REVIEW_UNSAFE
  CAN_VIEW_TRACKING_DISPUTES
  CAN_REVIEW_MERCHANTS
  COUNTERFEIT_TAG_AUDIT
  VIEW_FAKE_TRACKING_FINE
  CAN_SEND_ANNOUNCEMENTS_AS_EDUCATION_TEAM
  SHOW_PRODUCT_BRAND_DETECTION
  TRIGGER_CN_VERIFICATION
  CREATE_POLICY_VIOLATION_FINE
  MANAGE_PRODUCT_GEOBLOCK
  SHOW_MERCHANT_PROFILE
  VIEW_DISBURSEMENT_INFO
  CAN_TRIGGER_TAX_FORM_VERIFICATION
  CAN_VIEW_GS_MERCHANT_INFO
  PRODUCT_CATEGORY_DISPUTE_EDIT
  VIEW_JP_MERCHANTS
  CAN_USE_TFA_BD_TOOL
  SUPPLY_CHAIN_AP
  CAN_MANAGE_SG_MERCHANT
  LOGIN_AS_CS
  VIEW_WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION
  VIEW_MERCHANTS
  CAN_ACCESS_IPV_DETECTION_EXTERNAL_V3_API
  SHOW_TAKEDOWN_REQUESTS
  CAN_BE_ASSIGNED_MANAGER
  VALIDATE_PROVIDER_DISBURSEMENT
  COUNTERFEIT_TAG_MANUAL
  CAN_ACCESS_WISH_CORE_TAIL
  REVIEW_BRAND_AUTH
  VIEW_INTERNAL_HOLD
  CAN_MANAGE_JP_MERCHANT
  RETURN_CENTER
  VERIFY_WAREHOUSE_ONEOFF_REQ_APPROVER
  CAN_REVIEW_EPC_APPLICATION
  VIEW_MERCHANT_GAMING_REVIEW_TICKETS
  CUSTOM_CHARTS
  VIEW_KR_MERCHANTS
  CAN_ACCESS_BLANKET_AUTHORIZATION
  WISH_LOCAL_TAG_STATUS_CHECK
  AUDIT_CS_TICKETS
  MANAGE_BRAND_VIOLATION_REPORT
  CAN_VIEW_ACCOUNT_BALANCE
  SHOW_MERCHANT_TODO_ITEMS
  MANAGE_STORE_FULFILLMENT
  CAN_VIEW_DISABLED_INFO
  CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_VIP
  EDIT_FRAUD_TEAM_PERMISSIONS
  VIEW_CUSTOMER_PROFILE_PAGE
  CREATE_TERM_OF_SERVICE_EPC_BILL_HOLD
  CAN_ACCESS_LISTING_WHITE_LIST
  VIEW_WARNING_MANUAL_HOLD
  CAN_UNENROLL_WHITE_GLOVE
  SEND_SYSTEM_UPDATE_TO_BD
  COUNTERFEIT_HELP_TAG
  CAN_LOGIN_AS_FACTORY_MANAGERS
  CAN_ACCESS_TRACKING_NUMBER_PAGE
  CREATE_TRUE_TAG_ASSOCIATION
  CAN_ACCESS_REFRESHING_TRACKING
  CAN_VIEW_PRODUCT_STATUS
  CAN_ACCESS_AUTH_BRAND_AUDIT
  UPLOAD_PRODUCTS_CSV
  CREATE_WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION
  EXPORT_PRODUCT_DATA
  VIEW_TERM_OF_SERVICE_EPC_BILL_HOLD
  CAN_EDIT_CANNED_RESPONSES
  CAN_VIEW_EARLY_PAYMENT_RISK_CONTROL
  CAN_REVIEW_TRACKING_DISPUTES
  CREATE_TERM_OF_SERVICE_HOLD
  RAMP_DOWN_MERCHANT_IMPRESSIONS
  RECYCLE_TRACKING
  CREATE_ONEOFF_FINE
  VIEW_MISSING_CA_TAX_SETTING_HOLD
  VIEW_EU_MERCHANTS
  PRODUCT_RATING_VIDEO_AUDIT_TAG
  CREATE_INVALID_REGISTRATION_INFO_HOLD
  TRUE_BRAND_TAG
  VIEW_WITHHOLD_FUND
  EDIT_MERCHANT_WARNING_AUDIT_STATUS
  CAN_APPROVE_ANY_MERCHANT
  VIEW_LEGAL_SETTLEMENT_FINE
  SUPPLY_CHAIN_SOURCING
  EDIT_QA_PERMISSIONS
  REVIEW_ONEOFF_REQ_BAN_MERCHANTS
  CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_SG
  EDIT_ACCOUNT_NAME
  CAN_GET_EARLY_PAYMENT_AMOUNT_AVAILABLE
  CAN_CREATE_ONEOFF_PAYMENT
  DOWNLOAD_EXPORT
  SEND_SYSTEM_UPDATE_TO_TAGGERS
  MGC_IP_TAG
  CAN_TRIGGER_BANK_ACCOUNT_VERIFICATION
  SUPPLY_CHAIN_READ_ONLY
  EDIT_LOGICAL_TICKET_QUEUE
  PRODUCT_RATING_IMAGE_TAG
  MODIFY_MERCHANT_FINES
  REVIEW_ONEOFF_REQ_ENROLL_MERCHANT_PLUS
  CAN_VIEW_ORDER_SHIPPING_ESTIMATE
  CAN_RESUBMIT_PAYMENT
  WISHPOST
  VIEW_LCL_FBW_FEE
  CAN_ADMIN_CANNED_RESPONSES
  CAN_EDIT_TAGGING_TESTS
  MGC_CONTENT_TAG
  VIEW_PAYMENT_HISTORY
  CREATE_TEAM_MEMBER
  CAN_VIEW_BRANDS
  CAN_AUDIT_REVIEW_RESULT
  VIEW_PAYMENT_SETTINGS
  EXT_CS_CAN_REFUND_ESCALATION
  REVIEW_ONEOFF_REQ_VERIFY_WAREHOUSE
  PRODUCT_RATING_IMAGE_AUDIT_TAG
  SUPPLY_CHAIN_PAYMENT_INITIATED
  UPDATE_PAYMENT_PERSONAL_SETTINGS
  CAN_MANAGE_BLUE_AMBASSADORS
  ENABLE_DISABLE_ALL_PRODUCTS
  SHOW_PRODUCTS
  MGC_CONTENT_MANUAL_TAG
  FBW_TICKETS
  SHOW_MERCHANT_ASSETS
  REVIEW_ONEOFF_REQ_REMOVE_MAX_TTD_ENTENSION
  TRIGGER_KYC_REVERIFICATION
  CAN_REVIEW_BANK_ACCOUNT_DOCUMENT
  EXPORT_ORDERS
  SHOW_MERCHANT_STATS
  VIEW_WARNING_BAN_HOLD
  SUPPLY_CHAIN_MAINTAINER
  VIEW_ATO_HOLD
  VIEW_B2B_SALE_FEE
  CAN_CONVERT_ALL_USERS
  FAST_QUEUE_TAGGING_JOBS_HIGHEST_PRIORITY
  VIEW_CN_MERCHANTS
  CREATE_ONEOFF_REQUEST_EMAIL_REPORT
  CAN_ACCESS_UPDATE_TRACKING
  BRAND_REVIEW_TAG
  CREATE_SHIP_FRAUD_HOLD
  EDIT_CS_REPS
  AUDIT_ALL_CS_TEAMS
  CAN_MANAGE_GS_MERCHANT
  REVIEW_ONEOFF_REQ_OVERRIDE_MERCHANT_COUNTRY
  CAN_MANAGE_BRAND_LIST
  CAN_LOGIN_AS_OTHER_USER
  GENDER_TAG
  CAN_PERFORM_ACTION_ON_WISH_USERS
  PROFILE_PICTURE_TAG
  CREATE_OTHER_HOLD
  CAN_ACCESS_BULK_ORDER_INFRACTION_TOOL
  INAPPROPRIATE_IN_HOUSE_TAG
  CAN_ACCESS_V2_HOMEPAGE
  MANAGE_SIZE_CHART
  VIEW_TRO_TOOLS
  FULFILLED_BY_WISH
  CAN_REVIEW_EU_MERCHANTS
  WISH_BLUE_ADMIN
  IMAGE_CHANGE_RESOLUTION_TAG
  VIEW_TAKEDOWN_REQUESTS
  CAN_VIEW_BAN_INFRACTION
  REVIEW_ONEOFF_REQ_ENABLE_COLLECTIONBOOST
  REVIEW_ONEOFF_REQ_ISSUE_PB_CREDITS
  MODIFY_MERCHANT_PAYMENT_HOLDS
  CREATE_FAKE_TRACKING_FINE
  REMOVE_INFRACTION_FINES
  CAN_ACT_ON_MX_MERCHANT
  CAN_REVIEW_PRODUCT_CATEGORY_DISPUTE
  DETAIL_TAG
  CREATE_HIGH_GAMING_GMV_HOLD
  SUPPLY_CHAIN_PREVALID_TABLE_MAINTAINER
  CAN_LOGIN_WITH_CREDENTIALS
  CREATE_FAILED_IDENTITY_REVERIFICATION_HOLD
  VALIDATE_COLLECTIONBOOST_COLLECTIONS
  EDIT_MERCHANT_SUPPORT_PERMISSIONS
  VIEW_ONEOFF_PAYMENT_DETAIL
  CAN_VIEW_HR_RELATED_USERS
  SUPPLY_CHAIN_DATA
  CAN_VIEW_ALL_MERCHANT_FILES
  CAN_MANAGE_KR_MERCHANT
  CAN_INVITE_CN_MERCHANTS
  HANDLE_ALL_TICKETS
  WISH_BLUE_STORE_SUPPORT_PROFILE
  UPDATE_PAYMENT_SETTINGS
  EDIT_LEGAL_TEAM_PERMISSIONS
  CREATE_RESPOND_TO_ADMIN_HOLD
  DISPUTE_CURRENCY
  VIEW_POLICY_VIOLATION_FINE
  REVIEW_BULK_TRANSACTION_REVERSAL
  LISTING_REVIEW_AUDIT_IN_HOUSE_TAG
  LOGIN_WITH_OAUTH
  RESTRICT_REVIEW_CN_MERCHANTS
  CAN_EDIT_SHIP_TO_STORE_PACKAGE
  CNY_PROMOTED_DISABLE
  CREATE_PRODUCT
  REVIEW_ONEOFF_REQ_MERCHANT_EU_ENTITY
  SUPPLY_CHAIN_WAREHOUSE
  CHANGE_LANGUAGE
  REVIEW_ONEOFF_REQ_CREATE_PB_SHADOW_CAMPAIGNS
  HANDLE_CS_TICKETS
  DETAIL_TAG_AUDIT
  RESTRICTED_PRODUCT_REQUEST_EDITION
  IP_VIOLATION_AUDIT_IN_HOUSE_TAG
  REVIEW_ONEOFF_REQ_ENROLL_PRICE_DROP
  RESTRICT_VACATION_MODE_ACCESS
  REVERSE_ONEOFF_FINES
  CAN_ACCESS_ONEOFF_API_REVIEW
  REVIEW_ONEOFF_REQ_ISSUE_CB_CREDITS
  CAN_USE_BP_DATA_TOOL
  CAN_ACCESS_ONEOFF_INJUNCTION_REQUEST
  SHOW_ACCENTURE_TAGGERS
  CAN_ACCESS_ONEOFF_API_LIST
  CAN_VIEW_BLANKET_AUTHORIZATION_STATUS
  VIEW_DECEPTIVE_FULFILLMENT_FINE
  CAN_PROVIDE_MERCHANT_CHAT_SUPPORT
  CAN_VIEW_WISH_USERS
  CS_REP_STATS
  FBW2
  CHANGE_SELLER_PROFILE
  SHOW_ALL_REFUND_PERFORMANCES
  CAN_EDIT_EXTERNAL_FRAUD_TEAM_ACCESS
  CREATE_WITHHOLD_FUND
  VIEW_WISHPOST_NEGATIVE_BALANCE_HOLD
  DEP_HANDLE_MERCHANT_BENEFITS
  VIEW_TRO_HOLD
  IP_VIOLATION_MANUAL_TAG
  REVIEW_ONEOFF_REQ_REJECT_COLLECTIONBOOST_COLLECTION
  CAN_MANAGE_ROLES_FOR_ALL_USERS
  IMAGE_CHANGE_TAG
  REVIEW_ONEOFF_REQ_GIVE_BD_ACCESS
  CAN_ACCESS_UPDATE_CONFIRMED
  CAN_REVERSE_FINE
  VIEW_RESTRICTED_PRODUCT_REQUEST
  CAN_REVIEW_TAX_FORM
  IP_VIOLATION_AUDIT_TAG
  GENDER_AUDIT_TAG
  CAN_ISSUE_PB_CREDITS
  CAN_ACCESS_ONEOFF_API_GET_FIELDS_INFO
  CAN_VIEW_SHIP_TO_STORE_PACKAGE
  CAN_TRANSFER_ANY_MERCHANTS
  CAN_CHECK_INTERNAL_TRACKING
  CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_MY
  CAN_MANAGE_PERMISSIONS_FOR_ALL_USERS
  CAN_RECEIVE_SMS_ON_QA_ENV
  VIEW_RESPOND_TO_ADMIN_HOLD
  CAN_VIEW_MERCHANT_GROUP
  VIEW_AUTHENTIC_BRAND_SELLER_BADGE_APPLICATIONS
  CAN_ACCESS_SHIPPING_PROVIDER
  CAN_HANDLE_LIVE_CHAT
  CHANGE_EMAIL_SETTINGS
  EDIT_PROMOTED_PRODUCTS
  CAN_MANAGE_CHINESE_BDS
  CAN_TOGGLE_MERCHANT_AUTOBAN
  VIEW_ONEOFF_FINE
  ENABLE_DISABLE_API_PARTNERS
  EUB_LOGISTIC
  MANAGE_DELIVERED_CARRIER
  IP_VIOLATION_TAG
  CAN_VIEW_FRAUD_INFRACTION_QUEUE
  WISH_BLUE_AMBASSADOR_PROFILE
  RESTRICT_REVIEW_US_MERCHANTS
  EDIT_CONTENT_TEAM_PERMISSIONS
  CREATE_LCL_FBW_FEE
  AUDIT_TICKET_REPLIES
  VIEW_PRODUCT_PROFILE_PAGE
  TRUE_BRAND_ESCALATION_TAG
  VIEW_ALL_MERCHANTS
  CAN_ACCESS_IPV_DEDUP_LIB_TOOL
  CAN_APPROVE_PRODUCT_BOOST_MERCHANTS
  HOVERBOARD
  UPDATE_TRACKING
  EARLY_PAYMENT_RISK_CONTROL
  CAN_VIEW_EPC_APPLICATION
  EDIT_BRAND_PROTECTION_PERMISSIONS
  SEND_SYSTEM_UPDATE_TO_FRAUD
  SHOW_TAGGING_TEST_HISTORY
  REVIEW_PRODUCT_EDIT_REQUESTS
  CAN_LOGIN_AS_ADMIN
  VIEW_FAILED_IDENTITY_REVERIFICATION_HOLD
  API_ACCESS
  TRIGGER_EARLY_SELLER_VERIFICATION
  REPORTED_WISH_LOCAL_DETAIL_TAG
  CAN_ACCESS_GATEKEEPER_PAYMENT_HOLD_ONEOFF
  CREATE_BATCH_WARNING
  EDIT_PRODUCT_LOGISTIC_METADATA
  GENDER_TAG_MANUAL
  EDIT_LOGICAL_TICKET_QUEUE_LIMITED
  REVIEW_ONEOFF_REQ_ENABLE_EXTERNALBOOST
  REVIEW_ONEOFF_REQ_ENROLL_PB_KICKSTART
  LISTING_REVIEW_AUDIT_TAG
  SEND_BD_ANNOUNCEMENTS
  CAN_ACCESS_ORDERS_MANAGER
  CAN_CREATE_BLUE_ADMIN
  CAN_VIEW_CS_REPS
  CAN_ALLOW_REPURCHASE
  CAN_VIEW_US_BD_STATS
  SEND_SYSTEM_UPDATE_TO_CS
  SHOW_SEARCH_TOOL
  CAN_VIEW_VMPI_ALERT
  CAN_UPDATE_COLLECTIONBOOST
  WISH_LOCAL_DETAIL_TAG
  CAN_PERFORM_CHARGEBACK_REVIEW_AUDIT
  CAN_USE_WISH_EXPRESS_SUPPORT_FEATURE
  CREATE_HIGH_IP_INFRINGEMENT_HOLD
  CAN_ACCESS_ONEOFF_PAGE_REVIEW
  CAN_VIEW_FRAUD_WORKERS
  VIEW_PAYMENT_DETAIL
  SHOW_PRODUCT_LOGISTIC_METADATA
  MGC_IP_MANUAL_TAG
  LISTING_REVIEW_TAG_IN_HOUSE
  PRODUCT_RATING_TAG
  CAN_ACT_ON_CN_MERCHANT
  CAN_ACCESS_WISHPOST_EXTERNAL_V3_API
  AUTHORIZED_MERCHANT
  CAN_SEND_WECHAT_MESSAGE
  CAN_VIEW_REGULATOR_REPORT_FILES
  CREATE_FRAUDULENT_ACTIVITES_HOLD
  CAN_REVIEW_RESPONSIBLE_PERSON
  ACCESS_PSP_SIGN_UP
  PRODUCT_RATING_VIDEO_TAG
  CAN_MANAGE_BRAND_TO_PRODUCT
  CAN_LOGIN_AS_BD
  CAN_ACCESS_ONEOFF_PAGE_SUBMIT
  INITIATE_PAYMENT_PROVIDER_SIGN_UP
  SHOW_STORE_USERS
  AUDIT_ALL_TEAM
  CAN_UNCOMBINE_APLUS_ORDERS
  CAN_VIEW_BDS
  VIEW_DISBURSEMENT_PAGE
  UPDATE_PRODUCTS
  EXPORT_PRODUCT_STAT
  CAN_TOGGLE_ADMIN_EDIT_ON_STORE_USERS
  VIEW_ACTION_RULES
  CREATE_WISHPOST_NEGATIVE_BALANCE_HOLD
  SHOW_COUNTERFEIT_TAGGER_TEST_SPEC
  REVIEW_ONEOFF_REQ_CREATE_NEW_MAX_TTD_EXTENSION
  REVIEW_ONEOFF_REQ_REFUND_PB_BALANCE
  CAN_VIEW_FACTORY_LIST
  CREATE_TAG_JOB
  EDIT_ALL_LOGICAL_QUEUES
  VIEW_INVALID_REGISTRATION_INFO_HOLD
  FULFILL_ORDERS
  VIEW_MERCHANT_RATING_PAGE
  LOGIN_AS_MERCHANTS
  CAN_ACCESS_ONEOFF_API_REMOVE
  CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_CN
  MANAGE_BLACKLIST_CRITERIA
  MERCHANT_GAMING_REVIEW_ESCALATION
  CHANGE_DISPLAY_SETTINGS
  EDIT_ADMINS
  VIEW_WISH_USERS
  CAN_VIEW_US_INFRACTIONS
  SHOW_ALL_TAGGERS
  CAN_LOGIN_TO_GENERAL_MERCHANT_SUPPORT_HK
  CAN_HANDLE_VIOLATION_REPORT
  CAN_TRANSFER_MERCHANTS
  CAN_VIEW_WISH_USER_INFO
  CAN_ACCESS_INAPPROPRIATE_DEDUP_LIB_TOOL
  CAN_BLOCK_USER_ON_USER_REVIEW
  UPDATE_ACTION_RULE
  USE_CUSTOM_COLORS
  GET_CURRENCY_INFO
  REVIEW_ONEOFF_REQ_REMOVE_PRODUCTS
  SHIPPING_ETA_TICKET_MERCHANT
  SUPPLY_CHAIN_QC
  VIEW_HIGH_GAMING_GMV_HOLD
  CAN_VIEW_DISPUTES
}

enum PickupCarrier {
  YANWEN
  WISE
}

enum PictureType {
  FRONT
  SELFIE
  BACK
  STANDARD
}

type PlatformConstants {
  merchantMobile: MerchantMobile!
  countriesWeShipTo: [Country!]!
  euCountriesWeShipTo: [Country!]!
  wishExpressCountries: [Country!]!
  topLevelTags: [TrueTagSchema!]
  unityCountries: [Country!]!
  countriesAllowWeRegionalPrice: [Country!]!
  interselectablePhoneCountries: [Country!]!
  regions(countryCode: CountryCode!): [Region!]
  availableLocales: [Locale!]
  tax: TaxConstants!
  productCsvImportColumns: ProductCSVImportSchema
  orders: OrderConstants!
  wishCompanyInfo: WishCompanyInfo!
  deciderKey: DeciderKeySchema
  cs: CustomerSupportConstants
  buyerFraudReasons: [OrderRefundBuyerFraudSubreasonSchema!]!
  returnCancelReasons: [CustomerSupportTicketCancelReturnReasonSchema!]!
  issueRefundReasons: [CustomerSupportTicketIssueRefundReasonSchema!]!
  euVatCountries: [Country!]!
  wishEuVatPayerInfo: WishEUVATPayerInfo
  productListing: [ProductListingTierSchema!]!
  staticFines: StaticFines
  googleLogin: GoogleLoginDetails
  oktaOauthUri: String
  brandProtection: BrandProtectionConstants
  mfp: MFPConstantsSchema
  expeditedProcessDaysToPayment: Timedelta!
  product: ProductConstantsSchema!
  sellerProfileRegionConstants: SellerProfileRegionConstants!
}

type PlatformSweepMutations {
  searchProducts(input: PlatformSweepProductSearchInput!): PlatformSweepProductSearch
  flagProducts(input: PlatformSweepProductFlaggingInput!): PlatformSweepProductFlagging
  emailResult(input: PlatformSweepResultEmailInput!): PlatformSweepResultEmail
}

type PlatformSweepProductFlagging {
  ok: Boolean!
  message: String
}

input PlatformSweepProductFlaggingInput {
  sessionId: ObjectIdType!
  query: String!
  productIds: [ObjectIdType!]
}

type PlatformSweepProductSearch {
  ok: Boolean!
  message: String
  sessionId: ObjectIdType
  products: [ProductSchema!]
}

input PlatformSweepProductSearchInput {
  sessionId: ObjectIdType
  query: String!
  offset: Int
  limit: Int
  countryCode: CountryCode
  excludingL2lSubcategories: [TaggingViolationSubReasonCode!]
  isBba: Boolean
  isCompanyOwned: Boolean
  isPbSearch: Boolean!
}

type PlatformSweepResultEmail {
  ok: Boolean!
  message: String
}

input PlatformSweepResultEmailInput {
  sessionId: ObjectIdType!
  recipient: String!
}

type PlusAdminServiceMutations {
  convertToPlus(input: ConvertToPlusInput!): ConvertToPlus
  removeFromPlus(input: RemoveFromPlusInput!): RemoveFromPlus
  removeCountFromMplus(input: RemoveCountFromMplusInput!): RemoveCountFromMplus
}

type PolicyAdminSchema {
  merchantPolicyTiers: [MerchantPolicyTierSchema!]
  merchantGamingReviewTicketsCount(states: [MerchantGamingReviewState!], merchantId: ObjectIdType, claimedAdminName: String, lastSourceUpsertDateStart: DatetimeInput, lastSourceUpsertDateEnd: DatetimeInput, id: ObjectIdType, isClaimed: Boolean): Int
  merchantGamingReviewTicketsOpenStates: [MerchantGamingReviewState!]
  merchantGamingReviewTicketsClosedStates: [MerchantGamingReviewState!]
  merchantGamingReviewTickets(offset: Int = 0, limit: Int = 20, claimedAdminName: String, lastSourceUpsertDateStart: DatetimeInput, lastSourceUpsertDateEnd: DatetimeInput, states: [MerchantGamingReviewState!], sort: MerchantGamingReviewTicketSort, merchantId: ObjectIdType, id: ObjectIdType, isClaimed: Boolean): [MerchantGamingReviewTicketSchema!]
}

type PolicyAnnouncementItemSchema {
  section: String!
  requireLogIn: Boolean!
  announcementId: ObjectIdType
  effectiveDate: Datetime
}

enum PolicyFactor {
  MISLEADING_PRODUCT
  INAPPROPRIATE_SALE
  PRODUCT_SWAP
  MERCHANT_CANCELLATION
  HIGH_IP_INFRINGEMENT
  WSS_BAN_POLICY
  WISH_EXPRESS_LATE
  LATE_CONFIRM_FULFILLMENT
  WISH_EXPRESS_LATE_WITHHOLD
  WISH_EXPRESS_BAN
  HIGH_AUTO_REFUND
  GATE_KEEPER_ATO
  HIGH_GAMING_GMV
  MISLEADING_VARIATION
  FAKE_TRACKING
  HIGH_REFUND_RATE
  LOW_STORE_RATE
  STRIKE_BASED_HIGH_RISK_PROHIBITED
  PRODUCT_HIGH_REFUND_RATE
  VALID_TRACKING_RATE
  RECALL_POLICY
  UNQUALIFIED_CARRIER
  FAKE_TRACKING_BY_WEIGHT
  AUTO_REFUND
  HIGH_AUTO_REFUND_RATE
  REPEAT_IP_INFRINGEMENT
  COUNTERFEIT_GOODS
  CS_LOW_CSAT_SCORE
  CS_LATE_RESPONSE_RATE
  NEGATIVE_BALANCE
  ORDER_NOT_DELIVERED
  HIGH_CANCEL_RATE
}

type PolicyMutations {
  adaptivePolicyAdmin: AdaptivePolicyAdminMutations
  restrictedProduct: RestrictedProductMutations
  productCompliance: ProductComplianceMutations
  merchantFinalSale: MerchantFinalSaleMutations
  merchantGamingReviewTicket: MerchantGamingReviewMutations
  merchantWarning: MerchantWarningMutations
  bulkUpsertMerchantWarning(input: BulkUpsertMerchantWarningInput): BulkUpsertMerchantWarning
  productCategoryDispute: ProductCategoryDisputeMutations
  orderInfractionDispute: OrderInfractionDisputeMutations
  wfp: WFPMutations
  refundDispute: RefundDisputeMutations
}

type PolicyPublicMutations {
  reportAbuse: ReportAbuseMutations!
}

type PolicyPublicSchema {
  announcements: [PolicyAnnouncementItemSchema!]
  reportAbuse: ReportAbuseHub!
}

type PolicySchema {
  admin: PolicyAdminSchema
  finalSaleCategories(merchantId: ObjectIdType!): [FinalSaleCategorySchema!]
  merchantWarningCount(merchantId: ObjectIdType, id: ObjectIdType, ids: [ObjectIdType!], banned: Boolean, fined: Boolean, reasons: [MerchantWarningReason!], states: [MerchantWarningState!], isMisleading: Boolean, disputePendingEditReview: Boolean, disputePendingBrandAuth: Boolean, auditStatuses: [MerchantWarningAuditStatus!], claimStatus: MerchantWarningClaimStatus, searchProofIdTypes: [MerchantWarningProofType!], detailedReasons: [DetailedMerchantWarningReason!], issueDateStart: DatetimeInput, issueDateEnd: DatetimeInput, wssImpact: [WSSImpactState!], category: CounterfeitReasonCode, subcategory: TaggingViolationSubReasonCode, correspondenceStatus: MerchantWarningCorrespondenceStatus): Int
  merchantWarnings(offset: Int = 0, limit: Int, merchantId: ObjectIdType, id: ObjectIdType, ids: [ObjectIdType!], banned: Boolean, fined: Boolean, auditStatuses: [MerchantWarningAuditStatus!], claimStatus: MerchantWarningClaimStatus, sort: MerchantWarningSort, reasons: [MerchantWarningReason!], states: [MerchantWarningState!], disputePendingEditReview: Boolean, disputePendingBrandAuth: Boolean, searchProofIdTypes: [MerchantWarningProofType!], detailedReasons: [DetailedMerchantWarningReason!], issueDateStart: DatetimeInput, issueDateEnd: DatetimeInput, wssImpact: [WSSImpactState!], category: CounterfeitReasonCode, subcategory: TaggingViolationSubReasonCode, correspondenceStatus: MerchantWarningCorrespondenceStatus): [MerchantWarningSchema!]
  merchantWarning(id: ObjectIdType): MerchantWarningSchema
  detailedWarningReasons(reasons: [MerchantWarningReason!], states: [MerchantWarningState!], id: ObjectIdType, searchProofIdTypes: [MerchantWarningProofType!], issueDateStart: DatetimeInput, issueDateEnd: DatetimeInput): [DetailedMerchantWarningReasonSchema!]
  merchantWarningReasons: [MerchantWarningReasonSchema!]
  restrictedProduct: RestrictedProductSchema
  productCompliance: ProductComplianceSchema
  productCategoryDispute: ProductCategoryDisputeHub
  dispute: DisputeSchema
  cannedResponse: CannedResponseHub
  merchantWarningBulkProcesses(offset: Int = 0, limit: Int = 20, search: String, types: [BulkMerchantWarningAction!]): [MerchantWarningBulkProcessSchema!]
  merchantWarningBulkProcessCount(search: String, types: [BulkMerchantWarningAction!]): Int
}

enum PolicyType {
  NO_RETURN_ACCEPTED
  PREPAID_RETURN_ACCEPTED
  WISH_AUTO_REVIEW
  FREE_RETURN_ACCEPTED
}

type PredictedListingFeeDetailSchema {
  latestWssTierLevel: Int!
  latestWssTierName: String!
  nextUpdateDate: Datetime!
  predictedFreeThreshold: Int!
}

enum ProductAnalyticsDimension {
  COUNTRY
  GENDER
}

enum ProductAnalyticsInterval {
  INTERVAL_UNSPECIFIED
  INTERVAL_DAY
  INTERVAL_MINUTE
  INTERVAL_HOUR
  INTERVAL_WEEK
  INTERVAL_MONTH
}

type ProductAnalyticsSchema {
  productId: String!
  enabled: Boolean!
  stats(startTime: DatetimeInput!, endTime: DatetimeInput!, interval: ProductAnalyticsInterval, limit: Int, offset: Int): ProductAnalyticsStats
}

type ProductAnalyticsStats {
  startTime: Datetime!
  endTime: Datetime!
  interval: ProductAnalyticsInterval!
  interactionStats(dimensions: [ProductAnalyticsDimension!]): [ProductInteractionStats!]!
  orderStats(dimensions: [ProductAnalyticsDimension!]): [ProductOrderStats!]!
}

type ProductBoostAcceptTOS {
  ok: Boolean!
  message: String
}

input ProductBoostAcceptTOSInput {
  tosVersion: Int!
}

enum ProductCSVColumnName {
  PRODUCT_ID
  NAME
  DESCRIPTION
  NUM_OF_WISHES
  NUM_OF_SALES
  PARENT_SKU
  GTIN
  LANDING_PAGE_URL
  VARIATION_ID
  SKU
  SIZE
  COLOR
  REFERENCE_PRICE
  COST
  PRICE
  DEFAULT_SHIPPING_PRICE
  INVENTORY
  SHIPPING_TIME
  STATUS
  IS_PROMOTED
  REVIEW_STATE
  MAIN_IMAGE
  EXTRA_IMAGES
  VARIATION_IMAGE
  TAGS
  LAST_UPDATED
  DATE_UPLOADED
  WARNING_ID
  WISH_EXPRESS_ENABLED_COUNTRIES
  WISH_EXPRESS_DISABLED_COUNTRIES
  WISH_EXPRESS_COUNTRIES
  CURRENCY_CODE
  WAREHOUSE
  BRAND_ID
  BRAND
  BRAND_STATUS
  CONDITION
  CUSTOMS_HS_CODE
  PACKAGE_LENGTH
  PACKAGE_HEIGHT
  PACKAGE_WIDTH
  PACKAGE_WEIGHT
  CUSTOMS_DECLARED_VALUE
  COUNTRY_OF_ORIGIN
  DECLARED_LOCAL_NAME
  CONTAINS_LIQUID
  CONTAINS_METAL
  CONTAINS_POWDER
  CONTAINS_BATTERY
  PIECES_INCLUDED
  CLEAN_IMAGE
  DECLARED_NAME
  MAX_QUANTITY
  REFERENCE_VALUE
  UNIT
  QUANTITY_VALUE
  IS_LTL
  FIRST_MILE_SHIPPING_PRICE_D_DISABLED
  EFFECTIVE_DATE
  CALCULATED_SHIPPING
  CALIFORNIA_PROPOSITION_65_WARNING_TYPE
  CALIFORNIA_PROPOSITION_65_CHEMICAL_NAMES
  VARIATION_OPTIONS
  CATEGORY_EXPERIENCE_ELIGIBILITY
  SUBCATEGORY_ID
  AD
  AL
  AR
  AT
  AU
  BA
  BE
  BG
  BR
  CA
  CH
  CL
  CO
  CR
  CZ
  DE
  DK
  EE
  ES
  FI
  FR
  GB
  GI
  GR
  HR
  HU
  IE
  IL
  IS
  IT
  JP
  KR
  LI
  LT
  LU
  LV
  MC
  MD
  ME
  MK
  MT
  MX
  NL
  NO
  NZ
  PE
  PL
  PR
  PT
  RO
  RS
  SE
  SG
  SI
  SK
  SM
  UA
  US
  VI
  ZA
  AD_TTD
  AL_TTD
  AR_TTD
  AT_TTD
  AU_TTD
  BA_TTD
  BE_TTD
  BG_TTD
  BR_TTD
  CA_TTD
  CH_TTD
  CL_TTD
  CO_TTD
  CR_TTD
  CZ_TTD
  DE_TTD
  DK_TTD
  EE_TTD
  ES_TTD
  FI_TTD
  FR_TTD
  GB_TTD
  GI_TTD
  GR_TTD
  HR_TTD
  HU_TTD
  IE_TTD
  IL_TTD
  IS_TTD
  IT_TTD
  JP_TTD
  KR_TTD
  LI_TTD
  LT_TTD
  LU_TTD
  LV_TTD
  MC_TTD
  MD_TTD
  ME_TTD
  MK_TTD
  MT_TTD
  MX_TTD
  NL_TTD
  NO_TTD
  NZ_TTD
  PE_TTD
  PL_TTD
  PR_TTD
  PT_TTD
  RO_TTD
  RS_TTD
  SE_TTD
  SG_TTD
  SI_TTD
  SK_TTD
  SM_TTD
  UA_TTD
  US_TTD
  VI_TTD
  ZA_TTD
}

type ProductCSVImportColumnSchema {
  columnId: String!
  name: String!
  isRequired(feedType: ProductCSVJobType = 7): IsRequiredEnum!
  category: ColumnCategorySchema
}

type ProductCSVImportSchema {
  columns(restrictCountryShipping: Boolean, columnIds: [String!]): [ProductCSVImportColumnSchema!]!
  requiredColumns(columnIds: [String!]): [ProductCSVImportColumnSchema!]!
  optionalColumns(restrictCountryShipping: Boolean, columnIds: [String!]): [ProductCSVImportColumnSchema!]!
}

enum ProductCSVJobType {
  NEW_ADD_PRODUCTS
  ADD_PRODUCTS
  CREATE_PRESALE_PRODUCT
  NEW_UPDATE_PRODUCTS
  EDIT_WISH_EXPRESS_COUNTRIES
  SHOPIFY_CREATE_PRODUCTS
  UPSERT_PRODUCTS
  NEW_ADD_VARIATION
  EDIT_FBW_SHIPPING
  EDIT_SHIPPING
  ADD_SIZE_COLOR
  UPDATE_PRODUCTS
}

type ProductCatalogMutations {
  upsertProduct(input: ProductUpsertInput): UpsertProduct
  upsertProducts(input: [ProductUpsertInput!]!): UpsertProducts
  removeProduct(input: RemoveProductInput!): RemoveProduct
  upsertProductCsvFile(input: UpsertProductsFromCSVFileInput!): UpsertProductsFromCSVFile
  downloadAllProducts(input: DownloadAllProductsInput!): DownloadAllProducts
  downloadAllProductsCsv(input: DownloadAllProductsCSVInput!): DownloadAllProductsCSV
  downloadUnderPerformingProducts(input: DownloadUnderPerformingProductsInput!): DownloadUnderPerformingProducts
  updateProductLogisticsMetadata(input: UpdateProductLogisticsMetadataInput!): UpdateProductLogisticsMetadata
  upsertVideo(input: VideoUpsertInput): UpsertVideo
  removeVideo(input: RemoveVideoInput!): RemoveVideo
  forceApproveProduct(input: ForceApproveProductInput!): ForceApproveProduct
  uploadProductComplianceDocument(input: [ProductComplianceDocumentInput!]!): UploadProductComplianceDocuments
  downloadBulkCsvProducts(input: DownloadBulkCsvProductsInput!): DownloadCsvJobRowsDetail
}

type ProductCatalogSchema {
  product(id: String, sku: String): ProductSchema
  products(query: String, searchType: ProductSearchType, shippingProfileIds: [ObjectIdType!], videoId: ObjectIdType, merchantId: ObjectIdType, offset: Int = 0, limit: Int = 20, sort: ProductSort, productStatuses: [CommerceProductStatus!] = [0, 1], shippingTypes: [WarehouseShippingType!] = [1, 2], videoStates: [ProductVideoState!], videoLinkEnabled: Boolean = true): [ProductSchema!]!
  productCount(query: String, productStatuses: [CommerceProductStatus!] = [0, 1], merchantId: ObjectIdType, shippingTypes: [WarehouseShippingType!] = [1, 2], searchType: ProductSearchType, shippingProfileIds: [ObjectIdType!], videoStates: [ProductVideoState!], videoLinkEnabled: Boolean = true): Int!
  productsV2(query: String, searchType: ProductSearchType, merchantId: ObjectIdType, offset: Int = 0, limit: Int = 20, sort: ProductSort, isEnabled: Boolean, state: ProductListingState, fpReviewStatus: ProductFPReviewStatus, isWishExpress: Boolean = false, hasBrand: Boolean = false, isPromoted: Boolean = false, isCleanImage: Boolean = false, isReturnEnrolled: Boolean = false): [ProductSchema!]!
  productsV3(merchantId: ObjectIdType, offset: Int = 0, limit: Int = 20, sort: PerformanceProductSort, days: Int = 7, withPerformance: Boolean = false, query: String, searchType: ProductSearchType): [ProductSchema!]!
  productCountV2(query: String, merchantId: ObjectIdType, searchType: ProductSearchType, isEnabled: Boolean, state: ProductListingState, fpReviewStatus: ProductFPReviewStatus, isWishExpress: Boolean = false, hasBrand: Boolean = false, isPromoted: Boolean = false, isCleanImage: Boolean = false, isReturnEnrolled: Boolean = false): Int!
  productCountV3(merchantId: ObjectIdType, withPerformance: Boolean = false, query: String, searchType: ProductSearchType): Int!
  downloadJobsCount(merchantId: ObjectIdType, query: String): Int
  downloadJobs(merchantId: ObjectIdType, query: String, offset: Int = 0, limit: Int = 10): [DownloadJobSchema!]
  variation(id: String = "Id of the variation", sku: String = "Variation SKU of the variation"): VariationSchema
  variations(query: String, searchType: VariationSearchType, offset: Int = 0, sort: VariationSort, limit: Int = 20): [VariationSchema!]!
  variationCount(query: String, searchType: VariationSearchType): Int
  upcProductService: UPCProductServiceSchema!
  bulkCsvProductImportJobs(offset: Int! = 0, limit: Int! = 25, feedType: ProductCSVJobType): [CSVProductImportJobSchema!]!
  newBulkCsvJobs(offset: Int! = 0, limit: Int! = 25, feedType: ProductCSVJobType): [CSVProductImportJobSchemaV2!]!
  newBulkCsvJobsCount(feedType: ProductCSVJobType): Int!
  newBulkCsvJobDetail(bulkCsvJobId: String!): CSVProductImportJobDetailSchema
  csvProductImportJobsCount(feedType: ProductCSVJobType): Int!
  csvProductColumnNames: [String!]!
  csvProductColumnEnums: [ProductCSVColumnName!]!
  csvAllHeaderNames(subcategoryIds: [Int!] = []): [String!]!
  csvEditVariationsHeaderNames(subcategoryIds: [Int!] = []): [String!]!
  csvShippingHeaderNames: [String!]!
  csvPriceInventoryHeaderNames: [String!]!
  csvTitleImagesDescriptionHeaderNames: [String!]!
  productCategoryTaxonomyTreeJson: JSONString!
  gtinProductService: GtinProductServiceSchema!
  csvEnableDisableHeaderNames: [String!]!
  csvConsignmentHeaderNames: [String!]!
  videoService: ProductVideoServiceSchema!
  csvProductTemplateWithTaxonomyColumnNames(categoryId: Int!, treeVersion: String!): [String!]
}

type ProductCategorization {
  productId: ObjectIdType!
  categorizationSource: CategorizationSource!
  categoryTreeId: Int!
  categoryTreeVersion: String!
  category: TaxonomyCategorySchema!
  categorizationUser: UserSchema
  timestamp: Datetime!
}

enum ProductCategoryDisputeAction {
  CREATE
  MARK_UPDATE
  MARK_UNCHANGE
}

enum ProductCategoryDisputeAdminUnchangedReason {
  IMAGE_MISMATCH
  PROPOSED_TAG_IS_INAPPROPRIATE
  OTHER
  CORRECT_TAGGED
}

enum ProductCategoryDisputeEligibility {
  OUT_OF_QUOTA
  INELIGIBLE
  ELIGIBLE
}

type ProductCategoryDisputeHub {
  disputeCount(searchType: ProductCategoryDisputeSearchType, query: String, states: [ProductCategoryDisputeStatus!]!, merchantId: ObjectIdType): Int
  disputes(offset: Int = 0, limit: Int = 50, searchType: ProductCategoryDisputeSearchType, query: String, states: [ProductCategoryDisputeStatus!]!, merchantId: ObjectIdType): [ProductCategoryDisputeSchema!]
  dispute(id: ObjectIdType!): ProductCategoryDisputeSchema
  reasons(source: ProductCategoryDisputeSource!): [ProductCategoryDisputeReasonSchema!]
}

type ProductCategoryDisputeMutations {
  upsertProductCategoryDispute(input: UpsertProductCategoryDisputeInput): UpsertProductCategoryDispute
}

enum ProductCategoryDisputeReason {
  INCORRECT_TAG
  OTHERS
}

type ProductCategoryDisputeReasonSchema {
  reason: ProductCategoryDisputeReason!
  text: String!
}

type ProductCategoryDisputeSchema {
  id: ObjectIdType!
  merchant: MerchantSchema!
  product: ProductSchema!
  status: ProductCategoryDisputeStatus!
  lastUpdate: Datetime
  adminActionId: ObjectIdType
  adminUnchangedReason: ProductCategoryDisputeAdminUnchangedReason
  reason: ProductCategoryDisputeReasonSchema
  source: ProductCategoryDisputeSource!
  adminUnchangedOtherReasonDetails: String
  merchantNote: String
  supportedFiles: [MerchantFileSchema!]
  trueTags(state: ProductCategoryDisputeTrueTagState): [TrueTagSchema!]
}

enum ProductCategoryDisputeSearchType {
  MERCHANT_ID
  PRODUCT_ID
  DISPUTE_ID
}

enum ProductCategoryDisputeSource {
  EU_COMPLIANCE
  PRODUCT_CATELOG
}

enum ProductCategoryDisputeStatus {
  RESOLVED_UNCHANGED
  RESOLVED_UPDATE
  PENDING_REVIEW
}

enum ProductCategoryDisputeTrueTagState {
  DISPUTED
  APPROVED
  PROPOSED
}

input ProductComplianceDocumentInput {
  productId: ObjectIdType!
  sourceUrl: String!
  documentLabel: String!
  fileName: String!
  fileExtension: String!
  delete: Boolean!
}

type ProductComplianceDocumentSchema {
  fileUrl: String!
  documentLabel: String!
  fileName: String!
}

type ProductComplianceMutations {
  euCompliance: EUComplianceMutations
  frCompliance: FranceComplianceMutations
  deCompliance: GermanyComplianceMutations
  extendedProducerResponsibility: EPRMutations
}

type ProductComplianceSchema {
  responsiblePersonCount(complianceType: LinkProductComplianceType!, states: [ResponsiblePersonStatus!]): Int
  responsiblePersons(offset: Int = 0, limit: Int = 50, complianceType: LinkProductComplianceType!, sort: ResponsiblePersonSort, states: [ResponsiblePersonStatus!]): [ResponsiblePersonSchema!]
  rpValidCountries: [EUComplianceResponsiblePersonCountriesAndRegions!]!
  linkCount(complianceTypes: [LinkProductComplianceType!], states: [LinkProductComplianceState!], categories: [MSRCategory!], euComplianceCategories: [EUProductComplianceCategory!], query: String, searchType: ProductComplianceSearchType, responsiblePersonIds: [ObjectIdType!], franceUinCategories: [FranceProductUniqueIdentificationNumberCategory!], isLinkedWithFranceUin: Boolean, isLinkedWithFranceUinCategories: Boolean, germanyUinCategories: [GermanyProductUniqueIdentificationNumberCategory!], isLinkedWithGermanyUin: Boolean, isLinkedWithGermanyUinCategories: Boolean): Int
  links(offset: Int = 0, limit: Int = 50, complianceTypes: [LinkProductComplianceType!], states: [LinkProductComplianceState!], categories: [MSRCategory!], euComplianceCategories: [EUProductComplianceCategory!], query: String, searchType: ProductComplianceSearchType, responsiblePersonIds: [ObjectIdType!], franceUinCategories: [FranceProductUniqueIdentificationNumberCategory!], isLinkedWithFranceUin: Boolean, isLinkedWithFranceUinCategories: Boolean, germanyUinCategories: [GermanyProductUniqueIdentificationNumberCategory!], isLinkedWithGermanyUin: Boolean, isLinkedWithGermanyUinCategories: Boolean): [LinkProductComplianceSchema!]
  allMsrCategories: [MSRCategory!]
  allEuComplianceCategories: [EUProductComplianceCategory!]
  productDestinationCountries: [Country!]!
  responsiblePersonRejectReasons: [ResponsiblePersonRejectReasonSchema!]!
  franceProductUniqueIdentificationNumberCount(category: [FranceProductUniqueIdentificationNumberCategory!], states: [FranceProductUniqueIdentificationNumberStatus!]): Int
  franceProductUniqueIdentificationNumbers(category: [FranceProductUniqueIdentificationNumberCategory!], states: [FranceProductUniqueIdentificationNumberStatus!]): [FranceProductUniqueIdentificationNumberSchema!]
  germanyProductUniqueIdentificationNumberCount(categories: [GermanyProductUniqueIdentificationNumberCategory!], states: [GermanyProductUniqueIdentificationNumberStatus!]): Int
  germanyProductUniqueIdentificationNumbers(categories: [GermanyProductUniqueIdentificationNumberCategory!], states: [GermanyProductUniqueIdentificationNumberStatus!]): [GermanyProductUniqueIdentificationNumberSchema!]
  extendedProducerResponsibility: ExtendedProducerResponsibilitySchema!
  euComplianceInScope: Boolean!
}

enum ProductComplianceSearchType {
  PRODUCT_ID
}

type ProductConstantsSchema {
  prop65Chemicals: [String!]!
}

type ProductCountryBlockSchema {
  productId: ObjectIdType!
  countriesBlocked: [Country!]
}

type ProductDailyPerformanceSchema {
  date: Datetime!
  productDetailPageView: Int
  addToCart: Int
  orders: Int
  gmv: CurrencyValue
  conversionRate: Float
  averageCostOfSaleCalculated: Float
}

enum ProductFPReviewStatus {
  UNDER_REVIEW
  APPROVED
  BLOCKED
}

type ProductInteractionStats {
  eventTime: Datetime!
  impressions: Int!
  clicks: Int!
  gender: Gender
  country: Country
}

type ProductListingFeeDetailsSchema {
  currentProductMax: Int
  snapshotDate: Datetime!
  priceBreakdownPerTier: [ProductTierPriceSchema!]
  productMetrics: ProductListingPlanMonthlyProductMetrics
  productMetricsBenchmark: ProductListingPlanMonthlyProductMetricsBenchmark
}

type ProductListingPlanHub {
  bill(date: DatetimeInput!): ProductListingFeeDetailsSchema!
  productTotal(startDate: DatetimeInput!, endDate: DatetimeInput!): [ProductListingPlanProductMetrics!]!
}

type ProductListingPlanMonthlyProductMetrics {
  date: Datetime!
  totalProductWithSale: Int!
  totalProductWithImpression: Int!
  totalProduct: Int!
  merchantId: ObjectIdType!
}

type ProductListingPlanMonthlyProductMetricsBenchmark {
  date: Datetime!
  avgSaleRatio: Float!
  avgImpressionRatio: Float!
}

type ProductListingPlanProductMetrics {
  date: Datetime!
  count: Int
}

enum ProductListingPlanTier {
  TIER_ONE
  TIER_TWO
  TIER_THREE
}

enum ProductListingState {
  ACTIVE
  MERCHANT_INACTIVE
  REMOVED_BY_MERCHANT
  REMOVED_BY_WISH
  WISH_INACTIVE
}

type ProductListingTierSchema {
  tier: ProductListingPlanTier!
  lowerBound: Int!
  higherBound: Int!
  price: CurrencyValue!
}

type ProductOrderStats {
  eventTime: Datetime!
  orders: Int!
  gmv: CurrencyValue!
  merchantGmv: CurrencyValue
  gender: Gender
  country: Country
}

type ProductPerformanceSchema {
  startDate: Datetime!
  endDate: Datetime!
  daily(startDate: DatetimeInput!, endDate: DatetimeInput!): [ProductDailyPerformanceSchema!]!
  totalProductDetailPageView: Int!
  totalAddToCart: Int!
  totalOrders: Int!
  totalGmv: CurrencyValue!
  totalConversionRate: Float!
  totalAverageCostOfSaleCalculated: Float
}

type ProductPerformanceStats {
  startDate: Datetime!
  endDate: Datetime!
  activeProducts: Int
  activeSkus: Int
  skusPerProduct: Float
  averagePrice: CurrencyValue
  averageShippingPrice: CurrencyValue
  priceToShippingRatio: Float
  averageAdditonalImagesPerProduct: Float
  productImpressions: BigInt
  gmv: CurrencyValue!
}

enum ProductPostErrorCode {
  NO_ERROR
  REQUEST_TOO_LARGE
  INVALID_PRODUCT_ID
  INVALID_MERCHANT_ID
  LIMIT_IS_ZERO
  INVALID_PRODUCT_VIDEO_ID
  VIDEO_NOT_FOUND
  INVALID_VIDEO
  MISSING_PARAMETER
  IDENTIFIER_ALREADY_IN_USE
  INVALID_RULES
  ILLEGAL_CHARACTER
  CONFLICTING_PARAMETERS
  INVALID_VIDEO_ID
  INVALID_PARAMETER
  RECORD_NOT_FOUND
  INVALID_VIDEO_STATE
}

type ProductPostsMutations {
  add(input: AddProductPostInput!): AddProductPostMutation!
  delete(input: DeleteProductPostsInput!): DeleteProductPostsMutation!
}

type ProductPredictedCategory {
  productId: ObjectIdType!
  categoryTreeId: Int!
  categoryTreeVersion: String!
  categorizationSource: CategorizationSource!
  category: TaxonomyCategorySchema!
  lastUpdated: Datetime!
}

type ProductPromotionDailyStats {
  date: Datetime!
  impressions: Int
  sales: Int
  gmv: CurrencyValue
  promotionBudget: CurrencyValue
  promotionSpending: CurrencyValue
  promotionStatus: ProductPromotionStatus!
}

type ProductPromotionLifetimeStats {
  sales: Int!
  gmv: CurrencyValue!
  spend: CurrencyValue!
}

type ProductPromotionPeriodStats {
  startDate: Datetime!
  endDate: Datetime!
  dailyStats: [ProductPromotionDailyStats!]!
  totalImpressions: Int!
  totalSales: Int!
  totalGmv: CurrencyValue!
  totalPromotionSpending: CurrencyValue!
}

type ProductPromotionRefundAssurance {
  topLevelStats: ProductPromotionRefundAssuranceStats!
  monthlyStats: [ProductPromotionRefundAssuranceStats!]!
}

enum ProductPromotionRefundAssuranceCreditReceivedStatus {
  DONE
  PENDING
}

type ProductPromotionRefundAssuranceStats {
  spend: CurrencyValue
  month: Datetime
  advancedLogisticsGmv: CurrencyValue
  refundAdvancedLogisticsGmv: CurrencyValue
  creditIssued: CurrencyValue
  creditIssuedStatus: ProductPromotionRefundAssuranceCreditReceivedStatus
  refundRate: Float
  advancedLogisticsOrdersCount: Int
  refundedAdvancedLogisticsOrdersCount: Int
}

enum ProductPromotionRefundAssuranceType {
  ELIGIBLE
  OTHER
}

type ProductPromotionSchema {
  productId: ObjectIdType!
  product: ProductSchema!
  promotionStatus: ProductPromotionStatus!
  dailyPromotionBudget: CurrencyValue!
  lastUpdateDate: Datetime
  periodStats(startTime: DatetimeInput!, endTime: DatetimeInput!): ProductPromotionPeriodStats!
  lifetimeStats: ProductPromotionLifetimeStats!
  refundAssurance: ProductPromotionRefundAssurance!
  intenseBoost: Boolean
}

enum ProductPromotionSearchType {
  ID
  NAME
  SKU
}

enum ProductPromotionStatus {
  ACTIVE
  OUT_OF_BALANCE
  INACTIVE
}

type ProductRating {
  productId: String
  average30dRating: Float
  ratings: Int
  sales: Int
}

enum ProductRatingListingTab {
  BestRated
  WorstRated
  MostReviewed
}

type ProductSchema {
  id: ObjectIdType!
  sku: String
  name: String!
  smallPictureUrl: String!
  categories: [TrueTagSchema!]
  description: String!
  enabled: Boolean!
  variations(offset: Int = 0, limit: Int = 0): [VariationSchema!]!
  mainImage: ImageSchema!
  extraImages: [ImageSchema!]
  shipping(warehouseId: String): ShippingSchema!
  createTime: Datetime!
  lastUpdateTime: Datetime!
  sales: Int!
  totalInventory: Int!
  variationCount: Int!
  merchantId: ObjectIdType!
  tags: [String!]!
  reviewStatus: CommerceProductReviewStatus!
  fpWorkflow: FeedProcessingWorkflowSchema
  invalidCategoryNote: String
  infractions: [InfractionSchema!]!
  productTrueTagInfo: ProductTrueTagInfoSchema
  fpReviewStatus: CommerceProductFPReviewStatus!
  listingState: ListingStateSchema!
  wishes: Int!
  isUnityBlacklisted: Boolean!
  isUnityPendingStandardWarehouse: Boolean!
  unityEffectiveDateStandardWarehouse: Datetime
  isPromoted: Boolean!
  requestedBrandId: ObjectIdType
  requestedBrand: BrandSchema
  msrp: CurrencyValue
  upc: String
  shippingProfile: ShippingProfileSchema
  totalGmv: CurrencyValue!
  demoVideo(useGroupings: Boolean = false): ProductVideo
  isRemovedByWish: Boolean!
  isRemovedByMerchant: Boolean!
  isRemoved: Boolean!
  isEuCompliant: Boolean!
  stats: ProductStats!
  analyticsService: ProductAnalyticsSchema!
  condition: CommerceProductCondition
  trueTags: [TrueTagSchema!]
  eligibleForCategoryDispute: ProductCategoryDisputeEligibility
  referenceWeight: Weight
  referenceLength: Length
  referenceVolume: Volume
  referenceArea: Area
  referenceUnit: Count
  countryBlocks: [ProductCountryBlockSchema!]
  maxQuantity: Int
  attributes: [MerchantProvidedAttributeSchema!]
  warningType: ContestWarningType
  isConsignmentEligible: Boolean
  consignmentOriginalPid: ObjectIdType
  consignmentReferenceLink: String
  chemicalNames: [String!]
  performance(startDate: DatetimeInput!, endDate: DatetimeInput!): ProductPerformanceSchema
  taxonomyCategory: TaxonomyCategorySchema
  l1Category: TaxonomyCategorySchema
  categoryExperienceEligibility: Boolean
  subcategoryId: Int
  subcategory: TaxonomyCategorySchema
  variationOptions: [String!]
  isReturnsEnabled: Boolean
  isLtl: Boolean
  hasBrand: Boolean
  isWishExpress: Boolean!
  flatRateShippingCountryCandidates: [FlatRateShippingCountryCandidate!]
  productComplianceDocuments: [ProductComplianceDocumentSchema!]
}

enum ProductSearchType {
  ID
  NAME
  SKU
  PARENTSKU
}

input ProductSort {
  field: ProductSortField!
  order: SortOrderType!
}

enum ProductSortField {
  ID
  SALES
  SKU
  LAST_UPDATE
}

type ProductStats {
  totals(days: Int!, coreMetricsOnly: Boolean = false): ProductTotalStats!
  daily(days: Int!, coreMetricsOnly: Boolean = false): [ProductTotalStats!]!
  weekly(weeksFromTheLatest: Int = 0): ProductWeeklyStats
}

type ProductTaggingStatusSchema {
  productPredictedCategory: ProductPredictedCategory
  imageChangeMlTaggerJobs: [ImageChangeMlTaggerJobSchema!]
  productCategorizationHistory: [ProductCategorization!]!
}

enum ProductTaxonomyCategoryDisputeAdminUnchangedReason {
  IMAGE_MISMATCH
  OTHER
  CORRECTLY_TAGGED
}

enum ProductTaxonomyCategoryDisputeEligibilityEnum {
  PRODUCT_LIFETIME_DISPUTE_QUOTA_EXCEEDED
  MERCHANT_MONTHLY_DISPUTE_QUOTA_EXCEEDED
  PRODUCT_NOT_CATEGORIZED
  PRODUCT_NOT_ACTIVE
  ELIGIBLE
}

type ProductTaxonomyCategoryDisputeHub {
  disputeCount(states: [ProductTaxonomyCategoryDisputeState!], merchantId: ObjectIdType): Int!
  disputes(offset: Int = 0, limit: Int = 100, states: [ProductTaxonomyCategoryDisputeState!], merchantId: ObjectIdType): [ProductTaxonomyCategoryDisputeSchema!]!
  dispute(disputeId: ObjectIdType, productId: ObjectIdType): ProductTaxonomyCategoryDisputeSchema
  productDisputeEligibility(productId: ObjectIdType!): ProductTaxonomyCategoryDisputeEligibilityEnum
}

type ProductTaxonomyCategoryDisputeSchema {
  id: ObjectIdType!
  product: ProductSchema!
  merchant: MerchantSchema!
  state: ProductTaxonomyCategoryDisputeState!
  datetimeCreated: Datetime!
  datetimeResolved: Datetime
  adminUnchangedReason: ProductTaxonomyCategoryDisputeAdminUnchangedReason
  adminNote: String
  adminReviewerId: String
  merchantNote: String
  supportFiles: [MerchantFileSchema!]
  categoryDisputed: TaxonomyCategorySchema!
  categoryProposed: TaxonomyCategorySchema!
  categoryApproved: TaxonomyCategorySchema
}

enum ProductTaxonomyCategoryDisputeState {
  RESOLVED_UNCHANGED
  RESOLVED_UPDATED
  PENDING_REVIEW
}

type ProductTierPriceSchema {
  tier: ProductListingPlanTier!
  productCount: Int!
  price: CurrencyValue!
}

type ProductTotalStats {
  gmv: CurrencyValue!
  orders: Int!
  impressions: BigInt!
  startDate: Datetime!
  endDate: Datetime!
}

type ProductTrueTagInfoSchema {
  counterfeitViolation: CounterfeitViolationSchema!
  counterfeitLastTagged: Datetime
  inappropriateViolation: InappropriateViolationSchema!
  inappropriateLastTagged: Datetime
  subreason: TaggingViolationSubcategory
}

input ProductUpsertInput {
  id: ObjectIdType
  enabled: Boolean
  name: String
  description: String
  variations: [VariationInput!]
  images: [ImageInput!]
  defaultShipping: [DefaultShippingInput!]
  domesticShipping: [DomesticShippingInput!]
  sku: String
  upc: String
  requestedBrandId: ObjectIdType
  tags: [String!]
  warehouseId: ObjectIdType
  countryShipping: [WarehouseCountryShippingInput!]
  msrp: CurrencyInput
  shippingProfileId: ObjectIdType
  shippingProfile: ShippingProfileUpsertInput
  demoVideoSourceUrl: String
  condition: CommerceProductCondition
  referenceWeight: WeightInput
  referenceLength: LengthInput
  referenceVolume: VolumeInput
  referenceArea: AreaInput
  referenceUnit: CountInput
  maxQuantity: Int
  attributes: [AttributeInput!]
  warningType: ContestWarningType
  isConsignmentEligible: Boolean
  consignmentOriginalPid: ObjectIdType
  consignmentReferenceLink: String
  chemicalNames: [String!]
  subcategoryId: Int
}

type ProductVariationData {
  productId: ObjectIdType!
  variationId: ObjectIdType!
}

type ProductVideo {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  productId: ObjectIdType!
  lowQuality: RaccVideoAsset
  mediumQuality: RaccVideoAsset
  highQuality: RaccVideoAsset
  preview: RaccVideoAsset
  uploadTime: Datetime!
  source: RaccVideoAsset!
  state: ProductVideoState!
  rejectionReason: String
  viewCount: Int
  likeCount: Int
  title: String
  description: String
  averageWatchTime: Float
  totalWatchTime: Float
  audio: ProductVideoAudio
  audioStartTime: Float
  videoSource: ProductVideoSource
  lastUpdated: Datetime
  viewCountV2: Int
  addToCartV2: Int
  ordersV2: Int
}

type ProductVideoAudio {
  id: ObjectIdType!
  trackTitle: String!
  moodEmotion: [AudioMoodEmotion!]!
  productCategory: [AudioProductCategory!]!
  duration: Float!
  url: String!
  genres: [AudioGenre!]!
}

input ProductVideoContentReviewTraits {
  rotationIsIncorrect: Boolean
  isBlank: Boolean
  isImageSlideshow: Boolean
  isBlurry: Boolean
  isScreenRecording: Boolean
  hasEngravedText: Boolean
  hasHatefulSymbol: Boolean
  hasPartialNudity: Boolean
  hasEngravedNonEnglishText: Boolean
  hasObsceneGraphicContent: Boolean
  hasNudity: Boolean
  hasPersonTalking: Boolean
  hasMerchantBranding: Boolean
  hasMale: Boolean
  hasFemale: Boolean
  hasMinor: Boolean
  hasSexualWellness: Boolean
  hasWeapon: Boolean
  hasUnverifiedOrMisleadingClaim: Boolean
  refersConsumerOffPlatform: Boolean
  containsMoreThanOneProduct: Boolean
  isFactoryVideo: Boolean
  isSensitiveVideo: Boolean
}

type ProductVideoContentTagMutations {
  submitProductVideoContentReview(input: SubmitProductVideoContentReviewInput!): SubmitProductVideoContentReview
  submitProductVideoContentManualReview(input: SubmitProductVideoContentManualReviewInput!): SubmitProductVideoContentManualReview
}

type ProductVideoDailyStats {
  date: Datetime!
  views: Int
  viewsV2: Int
  likes: Int
  watchTime: Float
  gmv: Float
  avgWatchTime: Float!
  engagedViews: Int!
  buyerIntent: Float!
  addToCart: Int!
  addToCartV2: Int
  conversions: Float!
  ordersV2: Int
}

type ProductVideoIPTagMutations {
  submitProductVideoIpReview(input: SubmitProductVideoIPReviewInput!): SubmitProductVideoIPReview
  submitProductVideoIpManualReview(input: SubmitProductVideoIPManualReviewInput!): SubmitProductVideoIPManualReview
}

enum ProductVideoIPViolationReason {
  UNLICENSED_MEDIA
  BLURRED_INFORMATION
  COPYRIGHT_IMAGES
  UNKNOWN
  COMMERCIAL
  EMBEDDED_LOGO
  PICTURED_WITH_MAJOR_BRAND
  COUNTERFEIT_OR_IP_VIOLATION
}

type ProductVideoServiceSchema {
  videoCount(query: String, videoStates: [ProductVideoState!], merchantId: ObjectIdType, searchType: VideoSearchType): Int!
  videos(query: String, searchType: VideoSearchType, merchantId: ObjectIdType, offset: Int = 0, limit: Int = 20, sort: VideoSort, videoStates: [ProductVideoState!], startDate: DatetimeInput, endDate: DatetimeInput): [ProductVideo!]!
  leaderboard(category: VideoCategory = all, offset: Int = 0, limit: Int = 20): VideoLeaderboard
  performance(startDate: DatetimeInput, endDate: DatetimeInput, videoId: ObjectIdType): VideoPerformance
  audioCount(trackTitle: String, moodEmotion: AudioMoodEmotion, productCategory: AudioProductCategory, genre: AudioGenre): Int!
  audios(offset: Int = 0, limit: Int = 20, trackTitle: String, moodEmotion: AudioMoodEmotion, productCategory: AudioProductCategory, genre: AudioGenre): [ProductVideoAudio!]!
  recommendedAudios(productCategory: AudioProductCategory): [ProductVideoAudio!]!
}

enum ProductVideoSource {
  MERCHANT
  INFLUENCER
  THIRD_PARTY
}

enum ProductVideoState {
  UNKNOWN_STATE
  PENDING_TRANSCODE
  PENDING_REVIEW
  APPROVED
  REJECTED
  FAILED_TRANSCODE
  PENDING_AUTO_REVIEW
  FAILED_AUTO_REVIEW
  FAILED_OBJECT_DETECTION
  PENDING_REKOGNITION
  FAILED_REKOGNITION
  SUSPENDED_REVIEW
}

type ProductVideoTaggerJobSchema {
  id: ObjectIdType!
  source: ProductVideoTaggerJobSource!
  product: ProductSchema
}

enum ProductVideoTaggerJobSource {
  NOT_CAPTURED
  USER_REPORT
  MERCHANT_UPLOAD
  MANUAL_REVIEW
}

type ProductWeeklyStats {
  startDate: Datetime!
  endDate: Datetime!
  refund: RefundPerformanceStats!
  cs: CSPerformanceStats!
  sales: SalesPerformanceStats!
}

enum ProductsCSVTemplateType {
  CATEGORY
  DEFAULT
  ENABLED
  SHIPPING
  CONTENT
  CONSIGNMENT
  UNDER_PERFORMING
  ALL_COLUMNS
  PRICE_AND_INVENTORY
}

type PromotableProduct {
  product: ProductSchema!
  isInTrendingCategory: Boolean!
}

type PromotionDiscountData {
  discountAmount: CurrencyValue
  localizedDiscountAmount: CurrencyValue
  discountPercentage: Float
}

type PublicDSAMutations {
  createNotice(input: CreateNoticeInput!): CreateNotice
  disputeNotice(input: DisputeNoticeInput!): DisputeNotice
}

type PublicShippingProviderDocs {
  shippingProviderPolicies(destCountryCode: CountryCode): [ShippingProviderPolicySchema!]
}

type PublishAnnouncement {
  ok: Boolean!
  message: String
}

input PublishAnnouncementInput {
  id: ObjectIdType!
  publishDate: DatetimeInput
}

type RaccVideoAsset {
  url: String!
  contentType: String!
}

type RatingBreakdown {
  oneStarRatings: Int
  twoStarRatings: Int
  threeStarRatings: Int
  fourStarRatings: Int
  fiveStarRatings: Int
}

type RatingPerformanceStats {
  startDate: Datetime!
  endDate: Datetime!
  averageProductRating: Float
  storeRatings: Int
  storeRatingsBreakdown: RatingBreakdown
  averageStoreRating: Float
  lowStoreRatingPercentage: Float
  productRatings: Int
  productRatingsBreakdown: RatingBreakdown
  lowProductRatingPercentage: Float
  average30dStoreRating: Float
}

enum Reason {
  MISSING
  REDUNDANT
  INCORRECT
  UNEXPECTED
  UNMATCHED
  LEDGER_ITEMS_NOT_FOUND
  INVALID_CURRENCY
  INCORRECT_TOTAL_AMOUNT
  INCONSISTENT_PET
}

enum RedirectType {
  NEW_PAGE
  POPUP_MODAL
}

enum RefundAmountType {
  PRICE
  SHIPPING
  GENERAL
}

type RefundAssuranceConstants {
  enabled: Boolean!
  spendDiscountFactor: Float!
  guaranteedRefundRate: Float!
}

type RefundDisputeHub {
  disputeCount(states: [DisputeState!]!, reasons: [DisputeReason!], searchType: RefundDisputeSearchType, query: String): Int
  disputes(offset: Int = 0, limit: Int = 50, states: [DisputeState!]!, reasons: [DisputeReason!], searchType: RefundDisputeSearchType, query: String, sort: DisputeSort): [RefundDisputeSchema!]
  dispute(id: ObjectIdType!): RefundDisputeSchema
}

type RefundDisputeMutations {
  reply(input: RefundDisputeReplyMutationInput!): RefundDisputeReplyMutation
}

type RefundDisputeReplyMutation {
  ok: Boolean!
  message: String
}

input RefundDisputeReplyMutationInput {
  disputeId: ObjectIdType!
  message: String!
  files: [FileInput!]
}

type RefundDisputeSchema {
  id: ObjectIdType!
  orderId: ObjectIdType!
  order: OrderSchema!
  consumerId: ObjectIdType!
  disputeAmount: CurrencyValue!
  isReturnDispute: Boolean!
  reason: DisputeReasonSchema!
  merchant: MerchantSchema
  state: DisputeState!
  lastUpdate: Datetime!
  product: ProductSchema!
  productId: ObjectIdType!
  messages: [DisputeMessageSchema!]!
}

enum RefundDisputeSearchType {
  ORDER_ID
}

type RefundError {
  orderId: ObjectIdType!
  message: String!
}

input RefundOrderInput {
  orderId: ObjectIdType!
  reasonCategory: RefundReasonCategory!
  buyerFraudReasonCategory: BuyerFraudReasonCategory
  reasonNote: String
  source: RefundSource
  ticketId: ObjectIdType
  brandName: String
  partialQuantity: Int
  expectedRefunds: Int
  shouldRefundToCash: Boolean = false
  partialRefundAmount: Float
  partialAmountRefundType: RefundAmountType
  partialAmountNote: String
}

type RefundOrders {
  refundedCount: Int!
  errorMessages: [RefundError!]
}

type RefundPerformanceStats {
  startDate: Datetime!
  endDate: Datetime!
  refundRate: Float
  refunds: Int
  itemNotMatchingListingPercentage: Float
  itemNotFitPercentage: Float
  shippingTakeTooLongPercentage: Float
  itemDamagedPercentage: Float
  receivedWrongItemPercentage: Float
  itemReturnedPercentage: Float
  itemNotWorkPercentage: Float
  failToFulfillPercentage: Float
  deliverWrongAddressPercentage: Float
  incompleteOrderPercentage: Float
  refundRatePercentile: Int
}

enum RefundReasonCategory {
  FBW_FAILED_TO_FULFILL_DUE_TO_CARRIER_RETURN
  ITEM_DAMAGED
  EPC_OVERWEIGHT
  COMMERCEHUB_SUPPLIER_DETECTED_FRAUD
  DOES_NOT_FIT_USERS_FAULT
  CS_REFUND_FOR_USER_CANCEL
  DECLINED_GIFT
  INVALID_ADDRESS
  ORDER_ROUTING
  BLUE_PROGRAM_DEPRECATION
  BLUE_FUSION_STORE_NOT_SCAN_IN
  ITEM_NEVER_ARRIVED
  INSUFFICIENT_INVENTORY
  ITEM_IS_DANGEROUS
  POOR_QUALITY
  MERCHANT_SENT_TO_WRONG_ADDRESS
  CONTENT_POLICY_VIOLATION_CANCELLATION
  ITEM_DOES_NOT_MATCH_LISTING
  NOT_QUALIFIED_SHIPPING_PROVIDER
  BLUE_FUSION_IN_TRANSIT_LOST
  UNABLE_TO_SHIP
  COMMERCEHUB_BAD_ADDRESS
  PRODUCT_MALFUNCTION
  COMMERCEHUB_BAD_SKU
  DOES_FIT_WRONG_SIZE
  WISHBLUE_EPC_LATE_FULFILLMENT
  ONEOFF_WISH_ERROR
  FBS_STORE_QUIT
  SUSPECTED_FRAUD
  REPLACEMENT_NEVER_RECEIVED
  CB_USER_CANCELLED_ORDER
  STORE_SENT_THE_WRONG_SIZE
  RECEIVED_NOTE_FROM_MERCHANT
  BLUE_FUSION_SENT_TO_WRONG_STORE
  INCOMPLETE_ORDER
  ITEM_HELD_AT_CUSTOMS
  USER_ENTERED_INVALID_ADDRESS
  CONSUMER_FRAUD
  ITEM_IS_DAMAGED
  LATE_OR_MISSING
  MERCHANT_REPORTED_BUYER_FRAUD
  MISLEADING_LISTING
  BLUE_STORE_QUIT
  ITEM_DID_NOT_MEET_EXPECTATIONS
  ITEM_DOES_NOT_WORK_AS_DESCRIBED
  PRODUCT_LISTING_MISSING_INFO
  IN_GRACE_PERIOD_DELAY_CANCEL
  USER_NO_LONGER_WANTS_ITEM
  SHOPIFY_MERCHANT_CANCELLED
  EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP
  EPC_OVERSIZE
  INCORRECT_QUANTITY_OF_ITEMS
  ITEM_DOES_NOT_FIT
  EXPIRED_GIFT
  SHIPPING_TAKING_TOO_LONG
  MERCHANT_OUT_OF_STOCK
  FBW_WAREHOUSE_FAILED_TO_FULFILL
  CUSTOMER_REQUEST
  FAKE_OR_COUNTERFEIT
  DOES_NOT_FIT
  PRICE_MATCH
  EPC_OVERVALUE
  WRONG_ITEM
  PREFER_NOT_TO_SAY
  BLUE_STORE_OUT_OF_STOCK
  COMMERCEHUB_OTHER
  ORDER_PLACED_BY_TECHNICAL_ERROR
  DOES_NOT_FIT_INCORRECT_SIZE
  BLUE_FUSION_STORE_LOST
  MERCHANT_FAILED_TO_FULFILL
  ITEM_RETURNED_TO_SENDER
  COMMERCEHUB_CANCELLED_AT_MERCHANTS_REQUEST
  WRONG_COLOR
  USER_CANCEL_CHANGE_PAYMENT
  CONFIRMED_FUSION_ITEM_NOT_PICKED_UP
  CIRCULAR_ROUTED_UNFULFILLED
  CUSTOMER_MANUFACTURER_COMPLAINT
  USER_CANCELLED_ORDER
  STORE_UPLOADED_INVENTORY_RETURN
  RIGHT_OF_WITHDRAWAL
  DOES_NOT_FIT_WRONG_SIZE
  EMPTY_PACKAGE
  MISSING_ITEM_OR_PARTS
  PRESALE_TIMELINE_CLOSED
  COMMERCEHUB_OUT_OF_STOCK
  FRAUDULENT_ACTIVITY
  RECEIVED_WRONG_ITEM
  BLUE_ADMIN_REFUND
  ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE
  ITEM_IS_COUNTERFEIT
  USER_PLACED_ORDER_BY_MISTAKE
  PREORDER_NOT_FULFILLED
  OTHER
  ITEM_IS_POOR_QUALITY
  LIMBO_ORDER_UNFULFILLED
  CLEARING_LIMBO
  BLUE_DELIVERY_NOT_DELIVERED
  EXPIRED_GROUP_BUY
  USER_ENTERED_WRONG_ADDRESS
  ITEM_MARKED_DELIVERED_NOT_ALL_ITEMS_ARRIVED
  MERCHANT_REPORTED_ORDER
  PICKUP_NOW_ITEM_NOT_PICKED_UP
}

enum RefundSource {
  MERCHANT
  WISH
  USER
  PAYMENT_PROVIDER
}

enum RefundType {
  FULL
  PARTIAL
}

type Region {
  code: String!
  name: String!
  country: Country!
}

input RegionShippingInput {
  regionCode: String!
  enabled: Boolean
  price: CurrencyInput
  additionalPrice: CurrencyInput
  timeToDoor: Int
}

type RegionShippingSchema {
  region: Region!
  enabled: Boolean
  price: CurrencyValue
  additionalPrice: CurrencyValue
  timeToDoor: Int
}

enum RegulatorAction {
  UPSERT
}

enum RegulatorReportAction {
  CREATE
}

enum RegulatorReportReason {
  DANGEROUS_OR_UNSAFE
  OTHER_NON_COMPLIANCE
  HAZARDOUS
  POLICY_VIOLATION
}

type RegulatorSchema {
  id: ObjectIdType!
  country: Country!
  organization: String!
  website: String!
  name: String!
  emailAddress: String!
  phoneNumber: String
  title: String
}

type RejectReturn {
  ok: Boolean!
  message: String
}

input RejectReturnInput {
  orderId: ObjectIdType!
  rejectReason: ReturnRequestRejectReason!
  message: String!
  otherReasonExplanation: String
  supportingDocument: String
}

input RejectTrademarkInput {
  id: ObjectIdType!
  rejectionReason: String
}

type RejectTrademarksAndBrandInfo {
  ok: Boolean!
  message: String
}

input RejectTrademarksAndBrandInfoInput {
  brandInfoId: ObjectIdType!
  trademarks: [RejectTrademarkInput!]!
  brandInfoRejectionReason: String
}

type ReleasePayoutRequest {
  releasePaymentRequestId: String
  canResetPayout: Boolean
}

type RemoveCountFromMplus {
  ok: Boolean
  removedIds: [ObjectIdType!]!
}

input RemoveCountFromMplusInput {
  count: Int = 500
}

type RemoveFromPlus {
  ok: Boolean
}

input RemoveFromPlusInput {
  merchantIds: [ObjectIdType!]!
}

type RemoveNotifier {
  ok: Boolean!
  message: String
}

input RemoveNotifierInput {
  notifierId: ObjectIdType!
}

type RemoveProduct {
  ok: Boolean!
  message: String
}

input RemoveProductInput {
  productId: ObjectIdType!
}

input RemoveProductsInput {
  campaignId: ObjectIdType!
  productIds: [ObjectIdType!]!
  comment: String!
}

type RemoveShippingProfile {
  ok: Boolean!
  message: String
}

type RemoveVideo {
  ok: Boolean!
  message: String
}

input RemoveVideoInput {
  videoId: ObjectIdType!
  productId: ObjectIdType!
}

input ReplyInfractionInput {
  message: String!
  uploadFiles: [FileInput!]
}

type ReportAbuseHub {
  regulator(emailAddress: String!): RegulatorSchema
  regulatorReportReasons: [RegulatorReportReason!]
}

type ReportAbuseMutations {
  upsertRegulatorReport(input: UpsertRegulatorReportInput): UpsertRegulatorReport
  upsertRegulator(input: UpsertRegulatorInput): UpsertRegulator
}

input ReportOrderInput {
  mTransactionId: ObjectIdType!
  reportReasons: [ReportOrderReasons!]!
  reportExplanation: String!
}

type ReportOrderMutation {
  ok: Boolean!
  errMessage: String
}

enum ReportOrderReasons {
  POTENTIAL_SAFETY_THREAT
  OTHER
  SUSPICIOUS_ORDER
  SUSPECTED_ILLEGAL_ACTIVITY
}

input RequestPaymentInput {
  idFiles: [FileInput!]
  agreementFiles: [FileInput!]
}

type ResetPasswordMutation {
  error: String
  ok: Boolean!
}

input ResetPasswordMutationInput {
  rawPassword: String!
  comparePassword: String!
  username: String!
  token: String!
}

input ResetReleasePaymentRequestInput {
  requestId: ObjectIdType!
}

type ResetReleasePaymentRequestMutation {
  ok: Boolean!
  message: String
}

enum ResponsiblePersonAction {
  CREATE
  REJECT
  APPROVE
  UPDATE
  DELETE
}

type ResponsiblePersonAddressSchema {
  name: String!
  streetAddress1: String!
  streetAddress2: String
  city: String!
  zipcode: String
  countryCode: EUComplianceResponsiblePersonCountriesAndRegionsCode!
  state: String
  county: String
  country: EUComplianceResponsiblePersonCountriesAndRegions!
  phoneNumber: String
}

enum ResponsiblePersonFieldType {
  RISK_SCORE
}

type ResponsiblePersonRejectReasonSchema {
  reason: ResponsiblePersonRejectionReason!
  text: String!
}

enum ResponsiblePersonRejectionReason {
  INVALID_NAME
  INVALID_ADDRESS
  INVALID_PHONE_AND_EMAIL
}

type ResponsiblePersonSchema {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  merchant: MerchantSchema!
  address: ResponsiblePersonAddressSchema
  email: String!
  status: ResponsiblePersonStatus
  rejectReason: ResponsiblePersonRejectionReason
  compliance: LinkProductComplianceType
}

input ResponsiblePersonSort {
  field: ResponsiblePersonFieldType!
  order: SortOrderType!
}

enum ResponsiblePersonStatus {
  DELETED
  ADMIN_APPROVED
  COMPLETE
  REJECTED
  INREVIEW
}

input ResponsiblePersonUpsertInput {
  action: ResponsiblePersonAction!
  responsiblePersonId: ObjectIdType
  address: EUComplianceAddressInput
  email: String
  rejectReason: ResponsiblePersonRejectionReason
  compliance: LinkProductComplianceType!
}

enum RestrictedProductCategory {
  UNVERIFIED_WARRANTIES
  VITAMINS_AND_SUPPLEMENTS
  FOOD
  PLANT_AND_PLANT_SEEDS
  CHILD_HARNESS
  BEVERAGES
  PET_FOOD
  OTC_MEDICATION
  CHILD_CARSEAT
  SEATBELTS
}

enum RestrictedProductCountryCode {
  BE
  FR
  BG
  CO
  DK
  HR
  TR
  CA
  DE
  JP
  IT
  HU
  CZ
  AR
  AU
  GB
  BR
  FI
  KR
  IE
  ES
  GR
  SK
  NL
  PT
  MT
  CH
  SI
  US
  LV
  EE
  LT
  LU
  SE
  RO
  UA
  MX
  PL
  AT
}

type RestrictedProductMutations {
  upsertRestrictedProductRequest(input: RestrictedProductRequestUpsertInput): UpsertRestrictedProductRequest
}

type RestrictedProductRegion {
  regionName: String!
  regionCode: RestrictedProductRegionCode!
  isACountry: Boolean!
}

enum RestrictedProductRegionCode {
  LA
  NA
  TR
  JP
  KR
  AU
  EU
}

type RestrictedProductRegionToCategory {
  regionCode: RestrictedProductRegionCode!
  categories: [RestrictedProductCategory!]!
}

enum RestrictedProductRequestAction {
  CREATE
  BATCH_APPROVE
  APPROVE
  BATCH_REJECT
  REJECT
}

enum RestrictedProductRequestFieldType {
  merchantId
  formattedCreateTime
}

type RestrictedProductRequestSchema {
  merchant: MerchantSchema
  id: ObjectIdType!
  merchantId: ObjectIdType!
  state: RestrictedProductRequestState!
  region: RestrictedProductRegion!
  productCategory: RestrictedProductCategory!
  rejectedReason: String
  ipAddress: String
  ipAddressCountry: Country
  decisionDate: Datetime
  decisionAdminId: ObjectIdType
  requestDate: Datetime
  evidenceIds: [ObjectIdType!]
  businessEntityName: String
  legalRepName: String
  legalRepTitle: String
  merchantWarrantyDoc: MerchantFileSchema
  licenseExpiryDate: Datetime
}

input RestrictedProductRequestSort {
  field: RestrictedProductRequestFieldType!
  order: SortOrderType!
}

enum RestrictedProductRequestState {
  AWAITING_ADMIN
  AWAITING_MERCHANT
  APPROVED
  REJECTED
}

input RestrictedProductRequestUpsertInput {
  action: RestrictedProductRequestAction!
  categories: [RestrictedProductCategory!]
  region: RestrictedProductRegionCode
  legalRepName: String
  legalRepTitle: String
  businessEntityName: String
  warrantyFile: FileInput
  warrantyFileUrl: String
  warrantyFilename: String
  id: ObjectIdType
  ids: [ObjectIdType!]
  rejectedReason: String
}

type RestrictedProductSchema {
  restrictedProductRequestsCount(states: [RestrictedProductRequestState!], categories: [RestrictedProductCategory!], regions: [RestrictedProductRegionCode!], merchantId: ObjectIdType): Int
  restrictedProductRequests(offset: Int = 0, limit: Int = 20, states: [RestrictedProductRequestState!], categories: [RestrictedProductCategory!], regions: [RestrictedProductRegionCode!], sort: RestrictedProductRequestSort, merchantId: ObjectIdType): [RestrictedProductRequestSchema!]
  restrictedProductCategories(region: RestrictedProductRegionCode!): [RestrictedProductCategory!]
  restrictedProductCountryCodes: [RestrictedProductCountryCode!]
  restrictedProductEuropeCountries: [Country!]
  allRegionRestrictedProductCategories: [RestrictedProductRegionToCategory!]
  restrictedProductRegions: [RestrictedProductRegion!]
  allRestrictedProductCategories: [RestrictedProductCategory!]
}

type ReturnDetailsSchema {
  id: ObjectIdType
  shippingLabelFilename: String
  returnSlipFilename: String
  returnSlipId: Int
  trackingId: ObjectIdType
  trackingUrl: String
  shippingProvider: ShippingProviderSchema
  actualDeliverDays: Timedelta
  shippingLabelUrl: String
  returnSlipUrl: String
  warehouseConfirmedTime: Datetime
}

type ReturnInformationSchema {
  returnDetails: ReturnDetailsSchema
  returnRequest: ReturnRequestSchema
  policyType: String
}

enum ReturnRequestAction {
  AUTHORIZE
  CLAIM
  CREATE
  VERIFY_RETURN
  REQUIRE_DELIVERY_VERIFICATION
  CONTACT
  REFUND
  REJECT
  CANCEL
  CLOSE
}

type ReturnRequestActionSchema {
  action: ReturnRequestAction!
}

enum ReturnRequestCancelReason {
  BUYER_NO_LONGER_HAS_AN_ISSUE
  BUYER_INACTIVITY
  OTHER
  BUYER_ACCEPT_EXCHANGE
  BUYER_ACCEPT_RESHIP
}

enum ReturnRequestClaimReason {
  BUYER_FRAUDULENT
  OTHER
  BUYER_UNFAIR
}

enum ReturnRequestContactBuyerReason {
  OFFER_EXCHANGE
  OTHER
  OFFER_RESHIP
  PROVIDE_PRODUCT_INSTRUCTION
  UNDERSTAND_FURTHER
}

enum ReturnRequestRefundReason {
  FBW_FAILED_TO_FULFILL_DUE_TO_CARRIER_RETURN
  ITEM_DAMAGED
  EPC_OVERWEIGHT
  COMMERCEHUB_SUPPLIER_DETECTED_FRAUD
  DOES_NOT_FIT_USERS_FAULT
  CS_REFUND_FOR_USER_CANCEL
  DECLINED_GIFT
  INVALID_ADDRESS
  ORDER_ROUTING
  BLUE_PROGRAM_DEPRECATION
  BLUE_FUSION_STORE_NOT_SCAN_IN
  ITEM_NEVER_ARRIVED
  INSUFFICIENT_INVENTORY
  ITEM_IS_DANGEROUS
  POOR_QUALITY
  MERCHANT_SENT_TO_WRONG_ADDRESS
  CONTENT_POLICY_VIOLATION_CANCELLATION
  ITEM_DOES_NOT_MATCH_LISTING
  NOT_QUALIFIED_SHIPPING_PROVIDER
  BLUE_FUSION_IN_TRANSIT_LOST
  UNABLE_TO_SHIP
  COMMERCEHUB_BAD_ADDRESS
  PRODUCT_MALFUNCTION
  COMMERCEHUB_BAD_SKU
  DOES_FIT_WRONG_SIZE
  WISHBLUE_EPC_LATE_FULFILLMENT
  ONEOFF_WISH_ERROR
  FBS_STORE_QUIT
  SUSPECTED_FRAUD
  REPLACEMENT_NEVER_RECEIVED
  CB_USER_CANCELLED_ORDER
  STORE_SENT_THE_WRONG_SIZE
  RECEIVED_NOTE_FROM_MERCHANT
  BLUE_FUSION_SENT_TO_WRONG_STORE
  INCOMPLETE_ORDER
  ITEM_HELD_AT_CUSTOMS
  USER_ENTERED_INVALID_ADDRESS
  CONSUMER_FRAUD
  ITEM_IS_DAMAGED
  LATE_OR_MISSING
  MERCHANT_REPORTED_BUYER_FRAUD
  MISLEADING_LISTING
  BLUE_STORE_QUIT
  ITEM_DID_NOT_MEET_EXPECTATIONS
  ITEM_DOES_NOT_WORK_AS_DESCRIBED
  PRODUCT_LISTING_MISSING_INFO
  IN_GRACE_PERIOD_DELAY_CANCEL
  USER_NO_LONGER_WANTS_ITEM
  SHOPIFY_MERCHANT_CANCELLED
  EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP
  EPC_OVERSIZE
  INCORRECT_QUANTITY_OF_ITEMS
  ITEM_DOES_NOT_FIT
  EXPIRED_GIFT
  SHIPPING_TAKING_TOO_LONG
  MERCHANT_OUT_OF_STOCK
  FBW_WAREHOUSE_FAILED_TO_FULFILL
  CUSTOMER_REQUEST
  FAKE_OR_COUNTERFEIT
  DOES_NOT_FIT
  PRICE_MATCH
  EPC_OVERVALUE
  WRONG_ITEM
  PREFER_NOT_TO_SAY
  BLUE_STORE_OUT_OF_STOCK
  COMMERCEHUB_OTHER
  ORDER_PLACED_BY_TECHNICAL_ERROR
  DOES_NOT_FIT_INCORRECT_SIZE
  BLUE_FUSION_STORE_LOST
  MERCHANT_FAILED_TO_FULFILL
  ITEM_RETURNED_TO_SENDER
  COMMERCEHUB_CANCELLED_AT_MERCHANTS_REQUEST
  WRONG_COLOR
  USER_CANCEL_CHANGE_PAYMENT
  CONFIRMED_FUSION_ITEM_NOT_PICKED_UP
  CIRCULAR_ROUTED_UNFULFILLED
  CUSTOMER_MANUFACTURER_COMPLAINT
  USER_CANCELLED_ORDER
  STORE_UPLOADED_INVENTORY_RETURN
  RIGHT_OF_WITHDRAWAL
  DOES_NOT_FIT_WRONG_SIZE
  EMPTY_PACKAGE
  MISSING_ITEM_OR_PARTS
  PRESALE_TIMELINE_CLOSED
  COMMERCEHUB_OUT_OF_STOCK
  FRAUDULENT_ACTIVITY
  RECEIVED_WRONG_ITEM
  BLUE_ADMIN_REFUND
  ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE
  ITEM_IS_COUNTERFEIT
  USER_PLACED_ORDER_BY_MISTAKE
  PREORDER_NOT_FULFILLED
  OTHER
  ITEM_IS_POOR_QUALITY
  LIMBO_ORDER_UNFULFILLED
  CLEARING_LIMBO
  BLUE_DELIVERY_NOT_DELIVERED
  EXPIRED_GROUP_BUY
  USER_ENTERED_WRONG_ADDRESS
  ITEM_MARKED_DELIVERED_NOT_ALL_ITEMS_ARRIVED
  MERCHANT_REPORTED_ORDER
  PICKUP_NOW_ITEM_NOT_PICKED_UP
}

enum ReturnRequestRejectReason {
  LATE_RETURN
  OTHER
  PRODUCT_DAMAGED
  WRONG_PRODUCT
}

type ReturnRequestSchema {
  id: ObjectIdType
  state: ReturnRequestState!
  statusToDisplay: String!
  authType: String!
  returnWarehouseAddress: AddressSchema
  availableReturnCarriers: [ShippingProviderSchema!]!
  actions: [ReturnRequestActionSchema!]
  shippingLabelSentDate: Datetime
  merchantAuthorizedTime: Datetime
  lastAction: ReturnRequestActionSchema!
  isToMerchantWarehouse: Boolean!
  cancellationReason: ReturnRequestCancelReason
}

enum ReturnRequestState {
  CONTACT_IN_PROGRESS
  REFUNDED
  APPEAL_CS
  LABEL_SENT
  REJECTED
  CANCELLED
  AWAITING_MERCHANT
}

type RevShareInfoSchema {
  sourceRegion: RevShareRegion
  destRegion: RevShareRegion
  entityRegion: RevShareRegion
  productCategory: OrderRevShareProductCategory
  wssTier: WssTier
  qualifiers: [RevShareQualifier!]!
  isRevShareFromMerchant: Boolean
}

enum RevShareQualifier {
  CATEGORY_ELECTRONICS
  TIER_SILVER
  CATEGORY_WATCH
  ENTITY_EU
  CATEGORY_SEX_TOY
  TIER_BRONZE
  CATEGORY_APPAREL_ACCESSORY
  TIER_PLATINUM
  CATEGORY_CLOTHING
  CATEGORY_SHOES
  SOURCE_NA
  CATEGORY_JEWELRY_AND_ACCESSORY
  DEST_EU
  TIER_GOLD
  IS_WISH_EXPRESS
  TIER_UNASSESSED
  ENTITY_NA
  DEST_NA
  CATEGORY_HOUSEHOLD
  SOURCE_EU
  TIER_BAN
}

enum RevShareRegion {
  EU
  NA
  OTHER
}

type Reversal {
  id: ObjectIdType!
  amount: CurrencyValue!
}

type ReviewBankAccountDocument {
  ok: Boolean!
  message: String
}

input ReviewBankAccountDocumentInput {
  merchantId: ObjectIdType!
  documentId: ObjectIdType!
  documentType: BankAccountDocumentType!
  state: BankAccountVerificationStatus!
  stateReason: BankAccountVerificationStatusReason!
  comment: String
}

type ReviewMerchantIdentityDocument {
  ok: Boolean!
  message: String
}

input ReviewMerchantIdentityDocumentInput {
  merchantId: ObjectIdType!
  documentId: ObjectIdType!
  documentType: BusinessDocTypes!
  verificationType: MerchantIdentityVerificationType!
  state: MerchantIdentityVerificationStatus!
  stateReason: [TaxVerificationStatusReason!]!
  comment: String
}

input ReviewMerchantTaxIdentificationInput {
  merchantTaxIdentificationId: ObjectIdType!
  reviewAction: MerchantTaxIdentificationReviewAction!
  rejectedReason: MerchantTaxIdentificationRejectReson
}

type ReviewMerchantTaxIdentificationMutation {
  ok: Boolean!
  errorMessage: String
}

type RoleSchema {
  id: RoleType!
  name: String!
  description: String
}

enum RoleType {
  BD
  WISH_BLUE_OPERATOR
  TEST_USER
  SALES_REP
  TELEPERFORMANCE_BOGOTA_LEAD
  CS_ADMIN
  ACCENTURE_INFRACTION_WORKER
  LOGISTICS_TRACKING_ADMIN
  CN_ORG_MLE_MPS
  MERCHANT_SUPPORT_LEAD
  INSURANCE_PROVIDER
  COURIER
  SHIP_PROVIDER
  IN_HOUSE_TAGGER
  TASKUS_TAGGER_WORKER
  TELEPERFORMANCE_EGYPT_LEAD
  WISH_EXPRESS_SUPPORT
  FRAUD_TEAM_LEAD
  OUTSOURCED_MERCHANT_SUPPORT
  TAGGER
  WISH_BLUE_AMBASSADOR
  TELEPERFORMANCE_INDIA_WORKER
  TASKUS_MC_LEAD
  MERCHANT_SUPPORT
  EPC_SUPPORT
  TASKUS_CS_WORKER
  WISHPOST_EXTERNAL_API_MANAGER
  MERCHANT_LEAD
  FACTORY_ACCOUNT_MANAGER
  WISHCHAIN
  USER
  TRUSTED_TAGGER
  BRAND_PROTECTION_LEAD
  TELEPERFORMANCE_BOGOTA_WORKER
  ALORICA_LEAD
  CONTRACTOR
  STORE_USER
  CS_REP_EXTERNAL
  SYSTEM_ACCOUNT
  TASKUS_DETAIL_LEAD
  WAREHOUSE_OPERATOR
  BD_LEAD
  META_USER
  EVERC_IPV_DETECTION_EXTERNAL_API
  WAREHOUSE
  BRAND_PROTECTION_CONTRACTOR
  ACCENTURE_DETAIL_WORKER
  ACCENTURE_WORKER
  DEP_PRODUCT_API_USER
  TRUST_SAFETY
  PARTNER
  BRAND_PARTNER
  TELEPERFORMANCE_EGYPT_WORKER
  LEGAL_TEAM
  MERCHANT_REVIEW
  BOOST_DASHBOARD
  TELEPERFORMANCE_LEAD
  ACCENTURE_TAGGER_WORKER
  BRAND_PROTECTION_WORKER
  CS_REP_INTERNAL
  FINANCE
  SUPPLY_CHAIN
  SHIP_TO_STORE_PARTNER
  ADMIN
  DEP_IT_ADMIN
  FACTORY
  LOAN_PROVIDER
  LEGAL_TEAM_LEAD
  TELEPERFORMANCE_INDIA_LEAD
  WISH_HR
  TRANSCOSMOS_WORKER
  ACCENTURE_FRAUD_WORKER
  CS_REP_INTERNAL_LEAD
  PENDING_USER
  TASKUS_CS_LEAD
  ALORICA_WORKER
  ACCENTURE_DETAIL_LEAD
  STAGE_ADMIN
  REQUEST_INFO_USER
  TASKUS_MC_WORKER
  TRANSCOSMOS_LEAD
  TAGGER_LEAD
  LANGUAGE_SPECIALIST
  FRAUD_TEAM
  TASKUS_TAGGER_LEAD
  ACCENTURE_FRAUD_LEAD
  SUB_USER
  TASKUS_DETAIL_WORKER
  TELEPERFORMANCE_WORKER
  ACCENTURE_TAGGER_LEAD
  PAYMENT_PROVIDER
  ZENDESK_SUPPORT
  QA
  ACCESS_CONTROL_MANAGER
  WISHPOST
}

type RootMutation {
  currentUser: UserMutation
  currentMerchant: MerchantMutation
  payments: MerchantPaymentsMutation
  oneoffPayments: MerchantOneoffPaymentMutations
  fulfillment: FulfillmentMutation!
  productCatalog: ProductCatalogMutations!
  shippingProfileCollection: ShippingProfileMutations!
  logistics: LogisticsMutations
  plus: PlusAdminServiceMutations
  analytics: AnalyticsServiceMutations
  marketing: MarketingServiceMutations
  policy: PolicyMutations
  policyPublic: PolicyPublicMutations!
  authentication: AuthenticationMutations
  uploads: UploadMutations
  webhook: WebhookMutations
  brand: BrandMutations
  brandPartner: BrandPartnerMutations
  identity: IdentityMutations
  tagging: TaggingMutations
  video: VideoMutations
  gating: MerchantUserGateMutations
  mfp: MFPServiceMutations
  taxDashboard: TaxDashboardReviewMutations
  announcements: AnnouncementMutations
  merchantSafety: MerchantSafetyMutations
  customerSupportTickets: CustomerSupportTicketMutations
  locale: LocaleMutations
  sanctionScreening: SanctionScreeningMutations
  merchantIdentity: MerchantIdentityMutations
  dsa: DSAMutations
}

type RootQuery {
  currentUser: UserSchema
  currentMerchant: MerchantSchema
  su: UserSchema
  productCatalog: ProductCatalogSchema
  shippingProfileCollection: ShippingProfileCollectionSchema
  fulfillment: FulfillmentSchema
  brand: BrandServiceSchema
  platformConstants: PlatformConstants
  merchantTermsOfService: MerchantTermsOfServiceSchema!
  tos: TosServiceSchema!
  merchants: MerchantServiceSchema
  authentication: AuthenticationServiceSchema!
  announcements: AnnouncementsService!
  marketing: MarketingServiceSchema
  logistics: LogisticsSchema
  policyPublic: PolicyPublicSchema
  payments: MerchantPaymentsService
  policy: PolicySchema
  tagging: TaggingServiceSchema
  webhook: WebhookSchema
  currentBrandPartner: BrandPartnerInfoSchema
  currentCountry: Country
  currentLocale: Locale!
  currentProperLocale: String!
  identity: IdentityServiceSchema
  cs: CustomerSupportServiceSchema
  notifications: NotificationsServiceSchema
  storefront: StorefrontServiceSchema
  payableInfo: PayableInfoSchema
  recentUsers: [UserSchema!]
  mfp: MFPServiceSchema
  taxDashboardInfo: TaxDashboardSchema
  publicShippingProviderDocs: PublicShippingProviderDocs
  chrome: ChromeSchema
  merchantSafetyInfo: MerchantSafetySchema
  merchantEntity(merchantId: String, entityId: String): MerchantEntitySchema
  taxonomy: TaxonomySchema
  listingQualityInsights: ListingQualityInsightsSchema
  merchantIdentity: MerchantIdentityServiceSchema
  dsa: DSAHub
}

type SalesPerformanceStats {
  startDate: Datetime!
  endDate: Datetime!
  productImpressions: BigInt
  addToCart: Int
  addToCartConversion: Float
  checkoutConversion: Float
  orders: Int
  gmv: CurrencyValue!
}

type SalesforceLeadInfo {
  valid: Boolean!
  firstName: String
  lastName: String
  email: String
  company: String
  leadSource: SalesforceLeadSource!
  country: Country!
}

enum SalesforceLeadSource {
  NOT_IMPLEMENTED
  Lead_Questionnaire
  MMS_Lead_Questionnaire
}

enum SanctionScreeningHitStateType {
  NEWLY_IDENTITY_VERIFIED
  ESCALATE
  FALSE_HIT
  TRUE_HIT
  NEWLY_IDENTITY_VERIFIED_EEA
  UNSET
}

type SanctionScreeningMutations {
  bulkReview(input: BulkReviewInput!): BulkReviewMutation
}

type ScheduledAddBudgetSchema {
  enabled: Boolean!
  amount: CurrencyValue!
  days: [Int!]!
}

input ScreenCoordinates {
  x: Float!
  y: Float!
}

input SelectWPSShippingOptionInput {
  orderId: ObjectIdType!
  shippingOptionId: String!
  additionalServiceOptions: [WPSAvailableServices!]
}

type SelectWPSShippingOptionMutation {
  ok: Boolean!
  errorMessage: String
  wpsShipmentId: String
  trackingId: String
  providerId: Int
}

input SellerIdentityBusinessInfo {
  regBusinessName: String!
  regBusinessNum: String!
}

input SellerIdentityBusinessInfoIndividual {
  firstName: String!
  middleName: String
  lastName: String!
  birthDate: DatetimeInput!
}

input SellerIdentityBusinessLocation {
  countryCodeDomicile: CountryCode!
  baStreetAddress1: String!
  baStreetAddress2: String
  baCity: String!
  baState: String!
  baCountry: CountryCode!
  baZipcode: String!
}

input SellerIdentityBusinessProof {
  proofOfBizDocType: BusinessDocTypes!
  proofId: String
  proofOfBizExpirationDate: DatetimeInput
  imageListStr: JSONString!
  layoutTag: String
}

input SellerIdentityBusinessTaxInfo {
  businessTaxNumber: String
}

input SellerIdentityBusinessTaxInfoIndividual {
  businessTaxNumber: String
}

input SellerIdentityCNBusinessInfo {
  regBusinessName: String!
  regBusinessNum: String!
}

input SellerIdentityCNBusinessLocation {
  baCountry: CountryCode!
  baState: String!
  baCity: String!
  baStreetAddress1: String!
  baZipcode: String!
}

input SellerIdentityCNBusinessProof {
  proofOfBizDocType: BusinessDocTypes!
  proofOfBizExpirationDate: DatetimeInput
  imageListStr: JSONString!
}

input SellerIdentityCNIdProof {
  proofOfIdDocType: IdDocTypes!
  idNumber: String!
  proofOfIdExpirationDate: DatetimeInput
  frontOfImageListStr: JSONString!
  backOfImageListStr: JSONString!
  selfieImageListStr: JSONString!
  wishValidationCode: String!
}

input SellerIdentityCNSetContactInfoInput {
  firstName: String!
  lastName: String!
  businessLocation: SellerIdentityCNBusinessLocation!
  extraInfo: SellerIdentityCnExtraInfo
}

type SellerIdentityCNSetContactInfoMutation {
  ok: Boolean!
  message: String
}

input SellerIdentityCNSetProofOfBizIdentityInput {
  entityType: EntityTypes!
  businessInfo: SellerIdentityCNBusinessInfo!
  businessProof: SellerIdentityCNBusinessProof!
  legalBizRepName: String!
  idProof: SellerIdentityCNIdProof!
}

type SellerIdentityCNSetProofOfBizIdentityMutation {
  ok: Boolean!
  message: String
}

input SellerIdentityCNSetProofOfIndividualIdentityInput {
  entityType: EntityTypes!
  idProof: SellerIdentityCNIdProof!
}

type SellerIdentityCNSetProofOfIndividualIdentityMutation {
  ok: Boolean!
  message: String
}

type SellerIdentityCNVerificationMutations {
  setContactInfo(input: SellerIdentityCNSetContactInfoInput!): SellerIdentityCNSetContactInfoMutation
  setProofOfIdentityBiz(input: SellerIdentityCNSetProofOfBizIdentityInput!): SellerIdentityCNSetProofOfBizIdentityMutation
  setProofOfIdentityIndividual(input: SellerIdentityCNSetProofOfIndividualIdentityInput!): SellerIdentityCNSetProofOfIndividualIdentityMutation
}

input SellerIdentityCnExtraInfo {
  isReseller: Boolean
}

input SellerIdentityExtraInfo {
  isReseller: Boolean
}

type SellerIdentityGetStartedMutation {
  ok: Boolean!
  message: String
}

input SellerIdentityIdProof {
  proofOfIdDocType: IdDocTypes!
  idNumber: String!
  proofOfIdExpirationDate: DatetimeInput
  frontOfImageListStr: JSONString!
  backOfImageListStr: JSONString!
  selfieImageListStr: JSONString!
  layoutTag: String
}

input SellerIdentityLegalBizRep {
  firstName: String!
  middleName: String
  lastName: String!
  birthDate: DatetimeInput
  isLegalRepAndConsentToElectronicSig: Boolean!
}

input SellerIdentitySetContactInfoInput {
  businessLocation: SellerIdentityBusinessLocation!
  extraInfo: SellerIdentityExtraInfo
}

type SellerIdentitySetContactInfoMutation {
  ok: Boolean!
  message: String
}

input SellerIdentitySetProofOfBizIdentityInput {
  entityType: EntityTypes!
  businessInfo: SellerIdentityBusinessInfo!
  businessTax: SellerIdentityBusinessTaxInfo
  businessProof: [SellerIdentityBusinessProof!]!
  legalBizRep: SellerIdentityLegalBizRep!
  idProof: [SellerIdentityIdProof!]!
}

type SellerIdentitySetProofOfBizIdentityMutation {
  ok: Boolean!
  message: String
}

input SellerIdentitySetProofOfIndividualIdentityInput {
  entityType: EntityTypes!
  businessInfo: SellerIdentityBusinessInfoIndividual!
  businessTax: SellerIdentityBusinessTaxInfoIndividual
  businessProof: [SellerIdentityBusinessProof!]!
  idProof: [SellerIdentityIdProof!]!
}

type SellerIdentitySetProofOfIndividualIdentityMutation {
  ok: Boolean!
  message: String
}

input SellerIdentitySetVerificationFlowInput {
  verificationFlowType: VerificationFlowTypes!
}

type SellerIdentitySetVerificationFlowMutation {
  ok: Boolean!
  message: String
}

type SellerIdentityVerificationMutations {
  setGettingStarted: SellerIdentityGetStartedMutation
  setVerificationFlow(input: SellerIdentitySetVerificationFlowInput!): SellerIdentitySetVerificationFlowMutation
  setContactInfo(input: SellerIdentitySetContactInfoInput!): SellerIdentitySetContactInfoMutation
  setProofOfIdentityBiz(input: SellerIdentitySetProofOfBizIdentityInput!): SellerIdentitySetProofOfBizIdentityMutation
  setProofOfIdentityIndividual(input: SellerIdentitySetProofOfIndividualIdentityInput!): SellerIdentitySetProofOfIndividualIdentityMutation
}

type SellerProfileCountryOption {
  countryCode: String!
  countryName: String!
  regionList: [SellerProfileRegionInformation!]
}

type SellerProfileRegionConstants {
  countryOptions: [SellerProfileCountryOption!]!
  genericCountryOptions: GenericScalar!
}

type SellerProfileRegionInformation {
  regionName: String!
  cityNames: [String!]
}

enum SellerProfileVerificationDocType {
  permanent_resident_card
  business_license
  vat_registration_certificate
  passport
  certificate_of_incorporation
  national_id
  partnership_agreement
  citizenship_card
  articles_of_incorporation
  driver_license
  state_id
  social_security_card
  recent_business_returns
}

enum SellerProfileVerificationStatus {
  COMPLETE
  REQUEST_INFO
  REJECTED
  REVIEWING
  APPROVED
  INCOMPLETE
}

type SellerVerificationAdminFeedback {
  verificationFlowIssue: String
  entityTypeIssue: String
  countryOfDomicileIssue: String
  businessAddressIssue: String
  registeredBusinessNameIssue: String
  registeredBusinessNumIssue: String
  firstNameIssue: String
  lastNameIssue: String
  middleNameIssue: String
  dateOfBirthIssue: String
  isLegalRepAndConsentsToSigIssue: String
  legalRepNameIssue: String
  proofDocIssues: JSONString
}

type SellerVerificationFeedback {
  businessAddressIssue: String
  proofOfIdentificationIssue: String
  entityTypeIssue: String
  firstNameIssue: String
  middleNameIssue: String
  lastNameIssue: String
  phoneNumberIssue: String
  dateOfBirthIssue: String
  countryOfDomicileIssue: String
  companyNameIssue: String
  proofOfIdDocTypeIssue: String
}

type SellerVerificationSchema {
  hasCompleted: Boolean!
  isKycVerification: Boolean!
  status: SellerProfileVerificationStatus
  kycVerification: KycVerificationSchema!
  gmvCapReached: Boolean!
  gmvCapGracePeriodDays: Int
  gmvCapGracePeriodEndDate: Datetime
  impressionsPaused: Boolean!
  paymentsBlocked: Boolean!
  gmvCap: CurrencyValue
  numSalesCap: Int
  actionRequired: Boolean!
  lastUpdateTime: Datetime
  adminFeedback: SellerVerificationFeedback
  canStart: Boolean!
  firstName: String
  middleName: String
  lastName: String
  phoneNumber: String
  businessAddress: AddressSchema
  domicileCountry: Country
  dateOfBirth: Datetime
  entityType: UserEntityType
  companyName: String
  proofOfIdFiles: [MerchantFileSchema!]
  proofOfIdDocType: SellerProfileVerificationDocType
  regBusinessName: String
  regBusinessNum: String
  legalRepName: String
  proofOfDocs: [MerchantProofDocSchema!]
  isLegalRepAndConsentToElectronicSig: Boolean
  adminLatestFeedback: SellerVerificationAdminFeedback
  verificationFlowTypeString: String
  verificationFlowType: VerificationFlowTypes
  completedCnVerification: Boolean
  merchantId: String
}

type SendTestMessage {
  ok: Boolean!
  message: String
}

input SendTestMessageInput {
  subscription: WebhookSubscriptionInput!
}

enum SentimentType {
  INFO
  WARNING
  NEGATIVE
  POSITIVE
}

input SetWPSPackageTypeInput {
  orderId: ObjectIdType!
  packageType: WPSPackageType!
}

type SetWPSPackageTypeMutation {
  ok: Boolean!
  errorMessage: String
}

enum ShippableCountryCode {
  BE
  FR
  BG
  BA
  JP
  ZA
  BR
  FI
  NL
  NO
  NZ
  RO
  CH
  CO
  GR
  CL
  CA
  CZ
  GB
  CR
  GI
  SK
  KR
  SI
  SM
  SG
  SE
  DK
  HR
  DE
  HU
  US
  AD
  PR
  PT
  LI
  LV
  LT
  LU
  PE
  IS
  PL
  EE
  VI
  AL
  IT
  AR
  AU
  AT
  IE
  ES
  ME
  MD
  MC
  UA
  RS
  MK
  MT
  MX
  IL
}

type ShippingDetailsSchema {
  name: String!
  streetAddress1: String!
  streetAddress2: String
  streetAddress3: String
  city: String!
  zipcode: String
  phoneNumber: String
  trackingId: String
  countryCode: CountryCode!
  state: String
  region: String
  shipNote: String
  providerId: Int
  neighborhood: String
  country: Country
  provider: ShippingProviderSchema
  verificationState: AddressVerificationState!
}

type ShippingOriginSettings {
  destinationRegion: String!
  shippingType: String!
  originCountryCode: String!
  originCountryName: String
}

input ShippingPlanInput {
  warehouseId: ObjectIdType!
  skus: [ShippingPlanSKUInput!]!
}

input ShippingPlanSKUInput {
  variationId: ObjectIdType!
  quantity: Int!
  dimensions: PackageDimensionsInput!
}

type ShippingPlanSKUSchema {
  sku: String!
  quantity: Int!
  variationId: ObjectIdType!
  dimensions: VariationDimensions!
  weight: Weight!
}

type ShippingPlanSchema {
  id: ObjectIdType!
  warehouseId: ObjectIdType!
  skus: [ShippingPlanSKUSchema!]
}

type ShippingProfileCollectionSchema {
  shippingProfiles(query: String, searchType: ShippingProfileSearchType, offset: Int = 0, limit: Int = 20): [ShippingProfileSchema!]!
  shippingProfileCount(query: String, searchType: ShippingProfileSearchType): Int!
}

input ShippingProfileLinkInput {
  shippingProfileId: ObjectIdType
  productIds: [ObjectIdType!]!
}

type ShippingProfileMutations {
  upsertShippingProfile(input: ShippingProfileUpsertInput): UpsertShippingProfile
  removeShippingProfile(input: ShippingProfileRemoveInput): RemoveShippingProfile
  linkShippingProfile(input: ShippingProfileLinkInput): LinkShippingProfile
}

input ShippingProfileRemoveInput {
  idsToRemove: [ObjectIdType!]
}

type ShippingProfileSchema {
  id: ObjectIdType!
  name: String!
  shippingDetailsPerDestination: [DestinationShippingProfileSchema!]
  linkedProductCount: Int!
  description: String!
}

enum ShippingProfileSearchType {
  PROFILE_ID
  PRODUCT_ID
  PROFILE_NAME
}

input ShippingProfileUpsertInput {
  id: ObjectIdType
  name: String
  shippingDetailsPerDestination: [DestinationShippingProfileInput!]
}

input ShippingProviderCountryInput {
  countryCode: CountryCode!
  timelineOperations: [ShippingProviderOperationInput!]
}

type ShippingProviderCountrySchema {
  country: Country!
  timelineOperations: [ShippingProviderOperationSchema!]
}

input ShippingProviderInput {
  providerId: Int!
  name: String!
  trackingUrl: String!
  providerUrl: String!
  originCountry: CountryCode
  inputTrackingSources: [ShippingProviderTrackerInput!]
  inputWtsTrackingSources: [ShippingProviderTrackerInput!]
  inputReleaseTime: DatetimeInput
  inputReleaseType: ShippingProviderOperationTypeEnum
  inputRestrictCountries: [ShippingProviderCountryInput!]
  postalCodeRequired: Boolean
  countryRequired: Boolean
  trackingShipDateRequired: Boolean
  isCnProvider: Boolean
  shippingProviderType: ShippingProviderState
  needAddTimelineOperation: Boolean
}

input ShippingProviderOperationInput {
  dateTime: DatetimeInput
  type: ShippingProviderOperationTypeEnum
}

type ShippingProviderOperationSchema {
  dateTime: Datetime
  type: ShippingProviderOperationTypeEnum
}

enum ShippingProviderOperationTypeEnum {
  REMOVE_SHIPPING_PROVIDER
  ADD_SHIPPING_PROVIDER
}

type ShippingProviderPolicySchema {
  destinationCountry: Country
  origin: String
  condition: String
  allowedProviderType: String!
  shippingProviders: [ShippingProviderSchema!]!
  note: String
  wishpostChannels: [String!]
}

type ShippingProviderSchema {
  id: Int!
  name: String!
  trackingUrl: String!
  providerUrl: String!
  originCountry: Country
  trackers: [ShippingProviderTrackerSchema!]
  wtsTrackers: [ShippingProviderTrackerSchema!]
  timelineOperations: [ShippingProviderOperationSchema!]
  restrictionCountries: [ShippingProviderCountrySchema!]
  ddpSupportedOriginCountries: [String!]
  status: Boolean!
  lastUpdate: Datetime
  postalCodeRequired: Boolean
  countryRequired: Boolean
  trackingShipDateRequired: Boolean
  isCnProvider: Boolean
  shippingProviderType: ShippingProviderState
  isQualified: Boolean
  qualifiedNote: String
  trackingFormats(destCountryCode: CountryCode): [TrackingIDFormatSchema!]
}

enum ShippingProviderSearchType {
  PROVIDER_ID
  NAME
}

enum ShippingProviderState {
  NON_TEST_SERVICE
  TEST_SERVICE
  UNREGISTER_TEST_SERVICE
  ACTIVE
  DELETED
}

input ShippingProviderTrackerInput {
  trackingSource: TrackingSourceEnum!
  trackingSlug: String!
  ratio: Int!
}

type ShippingProviderTrackerSchema {
  trackingSource: TrackingSourceEnum!
  trackingName: String!
  trackingSlug: String
  ratio: Int!
}

type ShippingSchema {
  defaultShipping: [DefaultShippingSchema!]
  domesticShipping: [DomesticShippingSchema!]
  warehouseCountryShipping(shippingTypes: [WarehouseShippingType!] = [1, 2]): [WarehouseCountryShippingSchema!]
  calculatedShippingEnabled: Boolean
  wishpostEstimatedShipping: [WishPostShippingSchema!]
  genericCountryShippingPriceInfo(countries: [CountryCode!]): GenericScalar
  maxCalculatedShippingPrice(countries: [CountryCode!]): CurrencyValue
  maxMerchantSetShippingPrice(countries: [CountryCode!]): CurrencyValue
}

type ShippingSettingMutations {
  updateShippingSetting(useShopifyShippingRate: Boolean, countryShipping: [CountryShippingSetting!], calculatedShippingAccountConfig: Int, flatRateShippingOptInStatus: Boolean, otherCountriesShipping: OtherCountriesShippingSetting, isUpsert: Boolean = false): UpdateShippingSetting
}

type ShippingSettingsSchema {
  country: Country!
  enabled: Boolean!
  price: CurrencyValue
}

type ShopifyOnboardingAuthInfo {
  shopUrl: String
  apiKey: String!
  authToken: String
}

type ShopifySchema {
  apiKey: String
  shopUrl: String!
  shippingProfileId: String!
  hasFlatRates: Boolean!
  eligibleProductCount: Int!
  onboardingAuthToken: String!
  preorderCount: Int!
}

enum SignupSource {
  SIGNUP_GREEN_CHANNEL
  SIGNUP_V4
  SIGNUP_V5
  SIGNUP_LEGACY
  SIGNUP_V3
  SIGNUP_MOBILE
  SIGNUP_MERCHANT_PLUS
  SIGNUP_EXPRESS
}

enum SortByOrder {
  ASC
  DESC
}

enum SortOrderFulfillmentSpeed {
  TransactionDate
  FulfillmentSpeed
}

enum SortOrderTransactionDateField {
  TransactionDate
}

enum SortOrderType {
  ASC
  DESC
}

enum SortProductQualityRefundField {
  QualityRefundRate
}

enum SortProductRatingField {
  AverageRating
}

type SpecialOrderProgramSchema {
  name: String!
  taskLink: String
}

type StaticFines {
  cancellationFine: CurrencyValue!
}

enum Status {
  CANCELLED
  DEDUCTED
  DELAYING
  PENDING
}

type StoreRating {
  date: String
  transactionId: String
  rating: Int
  comment: String
  orderIds: [String!]!
  refundReason: String
}

type StoreReviewSummarySchema {
  count: Int!
  averageRating: Float!
}

type StorefrontCustomizationSchema {
  id: ObjectIdType!
  feeds: [StorefrontFeedSchema!]!
  visualTheme: StorefrontVisualThemeSchema!
}

type StorefrontFeedSchema {
  id: ObjectIdType!
  name: String!
}

type StorefrontSchema {
  name: String!
  creationDate: Datetime!
  reviewSummary: StoreReviewSummarySchema!
  location: Country
  customization: StorefrontCustomizationSchema
}

type StorefrontServiceSchema {
  serviceEnabled: Boolean!
  merchantEnabled(id: ObjectIdType!): Boolean!
  forMerchant(id: ObjectIdType!): StorefrontSchema
}

type StorefrontVisualThemeSchema {
  name: String!
  primaryColor: String!
  secondaryColor: String!
}

type SubmitAttributeExtraction {
  ok: Boolean!
  message: String
}

input SubmitAttributeExtractionInput {
  jobId: ObjectIdType!
  attributeExtractionResult: [ExtractionResultInput!]!
}

type SubmitCategoryClassification {
  ok: Boolean!
  message: String
}

input SubmitCategoryClassificationInput {
  jobId: ObjectIdType!
  categoryId: String
  categoryPath: String
  treeVersion: String
}

type SubmitCategoryManualOverride {
  ok: Boolean!
  message: String
}

input SubmitCategoryManualOverrideInput {
  productId: String!
  categoryTreeId: Int!
  categoryTreeVersion: String!
  categoryId: Int!
  categoryPath: String!
  l1CategoryId: Int!
}

type SubmitProductVideoContentManualReview {
  ok: Boolean!
  message: String
}

input SubmitProductVideoContentManualReviewInput {
  videoId: ObjectIdType!
  productId: ObjectIdType!
  merchantId: ObjectIdType!
  videoTraits: ProductVideoContentReviewTraits!
  videoRelatesToProduct: Boolean!
  videoQuality: VideoQualityLevel!
}

type SubmitProductVideoContentReview {
  ok: Boolean!
  message: String
}

input SubmitProductVideoContentReviewInput {
  jobId: ObjectIdType!
  videoTraits: ProductVideoContentReviewTraits!
  videoRelatesToProduct: Boolean!
  videoQuality: VideoQualityLevel!
}

type SubmitProductVideoIPManualReview {
  ok: Boolean!
  message: String
}

input SubmitProductVideoIPManualReviewInput {
  videoId: ObjectIdType!
  productId: ObjectIdType!
  merchantId: ObjectIdType!
  ipViolationReason: ProductVideoIPViolationReason
  ipInfringedBrandId: ObjectIdType
  blurredInformationCategory: BlurredInformationCategory
}

type SubmitProductVideoIPReview {
  ok: Boolean!
  message: String
}

input SubmitProductVideoIPReviewInput {
  jobId: ObjectIdType!
  ipViolationReason: ProductVideoIPViolationReason
  ipInfringedBrandId: ObjectIdType
  blurredInformationCategory: BlurredInformationCategory
}

input SubmitWarehouseVerificationRequestInput {
  warehouseId: ObjectIdType!
  documentUrls: [String!]!
}

type SubmitWarehouseVerificationRequestMutation {
  ok: Boolean!
  message: String
}

enum SubscriptionEndpointType {
  URL
  ARN
}

type SwedenConfirmedDeliveredCarrierTypes {
  carrierId: Int!
  swedenDeliveredCarrierTypes: [SwedenDeliveredCarrierType!]!
}

enum SwedenDeliveredCarrierType {
  IntraEUCarrier
  IntlEUCarrier
}

enum TaggingJobState {
  IMAGE_MISSING
  COMPLETE
  AWAITING_RESOLVER
  AWAITING_MERCHANT_RELEASE
  DISABLED_OR_ALREADY_INAPPROPRIATE
  AWAITING_TAGGER
  AWAITING_IN_HOUSE_TAGGER
  OVERRIDDEN_COMPLETE
  OVERRIDDEN
  AWAITING_ML
}

enum TaggingMLResult {
  UNSURE
  APPROVED
  REJECTED
}

type TaggingMutations {
  productVideoContentTag: ProductVideoContentTagMutations
  productVideoIpTag: ProductVideoIPTagMutations
  platformSweeps: PlatformSweepMutations
  submitCategoryClassification(input: SubmitCategoryClassificationInput!): SubmitCategoryClassification
  submitCategoryManualOverride(input: SubmitCategoryManualOverrideInput!): SubmitCategoryManualOverride
  createProductTaxonomyCategoryDispute(input: CreateProductTaxonomyCategoryDisputeInput!): CreateProductTaxonomyCategoryDispute
  markProductTaxonomyCategoryDisputeUpdated(input: MarkProductTaxonomyCategoryDisputeUpdatedInput!): MarkProductTaxonomyCategoryDisputeUpdated
  markProductTaxonomyCategoryDisputeUnchanged(input: MarkProductTaxonomyCategoryDisputeUnchangedInput!): MarkProductTaxonomyCategoryDisputeUnchanged
  getAndClaimProductTaxonomyCategoryDispute(input: GetAndClaimProductTaxonomyCategoryDisputeForReviewInput): GetAndClaimProductTaxonomyCategoryDisputeForReview
  submitAttributeExtraction(input: SubmitAttributeExtractionInput!): SubmitAttributeExtraction
  updateDedupImage(input: UpdateDedupImageInput!): UpdateDedupImage
  deleteDedupImage(input: DeleteDedupImageInput!): DeleteDedupImage
}

type TaggingServiceSchema {
  ipViolationTaggingManagement: IPViolationTaggingManagement
  misleadingViolationTaggingManagement: MisleadingViolationTaggingManagement
  inappropriateViolationTaggingManagement: InappropriateViolationTaggingManagement
  productVideoContentTaggerJob: ProductVideoTaggerJobSchema
  productVideoIpTaggerJob: ProductVideoTaggerJobSchema
  generalTaggingManagement: GeneralTaggingManagement
  categoryClassificationTaggerJob: CategoryClassificationTaggerJobSchema
  productTaggingStatus(productId: ObjectIdType!): ProductTaggingStatusSchema
  productTaxonomyCategoryDisputeHub: ProductTaxonomyCategoryDisputeHub
  attributeExtractionTaggerJob(taskId: String): AttributeExtractionTaggerJobSchema
  dedupImageLibHub: DedupImageLibraryHub
}

type TaggingViolationReason {
  reason: CounterfeitReasonCode!
  internalDisplayName: String!
  displayName: String
  subcategories: [TaggingViolationSubcategory!]
  isBrandTaggingReason: Boolean!
}

enum TaggingViolationSubReasonCode {
  BRAND_DISCREPANCY
  CONFEDERATE_FLAG
  RECREATIONAL_DRUGS_AND_CHEMICALS
  SUBSCRIPTIONS_OR_MEMBERSHIPS
  DOMESTIC_TERRORISTS_MEMORABILIA
  BLOOD_COLLECTION_TUBES
  PLANT_SEED_WITH_IMPOSSIBLE_CLAIM
  DANGEROUS_NON_CPA_VIOLATION
  LASER_DISC
  PRODUCT_VARIANCE
  PRESCRIPTION_STRENGTH_ITEMS
  NOT_FOCUS_OF_MAIN_IMAGE
  PENICILLIN
  SPY_CAMERAS
  TERRORIST_PROMOTION_GROUPS
  EURO_CURRENCY
  UNCENSORED_EROTIC_ANIME
  PROHIBITED_CUSTOMS_CN
  ASSAULT_WEAPON_CONVERSION_PIECES
  IMAGE_OR_TITLE_CHANGE
  SIZE_MISREPRESENTATION_MAIN_IMAGE
  SIZE_NOT_AS_ADVERTISED
  SEXUALLY_SUGGESTIVE_CONTENT
  LISTING_PROMOTES_HIDING_PROHIBITED_SUBSTANCE
  BRASS_OR_METAL_KNUCKLES
  VHS_TAPE
  VIDEO_GAME
  EPA_EMMISIONS_DEFEAT_US
  RATING_SHOW_WRONG_PRODUCT
  UNREASONABLE_SPEC
  HUMAN_GROWTH_HORMONE
  BLURRED_LOGOS
  SEATBELTS
  FULLY_LOADED_TV_BOXES
  GUN_SILENCER_COMPONENTS
  ANIME_PRODUCTS
  LIVE_ANIMAL
  SOFTWARE
  UNVERIFIED_WARRANTIES
  ALCOHOL
  TOBACCO
  SIZE_MISPRESENTATION
  POPPERS_AND_MUSCLE_RELAXANTS
  HATEFUL_IMAGERY
  NOT_FOCUS_MAIN_IMAGE
  UNREALISTIC_HEALTH_CLAIM_PRODUCTS
  GRADUAL_CHANGE
  GUN_SILENCER_MISUSE
  SELF_FEEDING_BABY_PILLOWS
  METAL_NINJA_STARS
  CN_PROHIBITED_PRODUCT_STUN_GUNS
  SYRINGES
  FULLY_EXPOSED_NIPPLE
  HOUSEKEEPING_TOUR_PACKAGES
  RECORDS
  UNVERIFIED_LOGO
  RANDOM_PRODUCT
  NUDE_MINOR_IN_NON_SEXUAL_CONTEXT
  MERCAHNT_CONTACT_OR_REFERAL
  RACIAL_CLEANSING
  HIDDEN_SEX_TOYS
  PLANTS
  CLAIM_FREE_PRODUCT_OFFERS
  VITAMINS_AND_SUPPLEMENTS
  FOOD
  NON_CLINICAL_CONTENT
  ENDANGERED_SPECIES
  MOD_BOXES
  UNSUPPORTED_MEDICAL_CLAIMS
  BULLYING
  BRANDING_CHANGE
  EROTIC_SETUPS
  SEXUALLY_EXPLICIT_CONTENT
  OTC_MEDICATION
  HOVERBOARDS
  EPA_PESTICIDES_US
  BENZENE
  HUMAN_BY_PRODUCTS
  COUNTERFEIT_CURRENCY
  VIRTUAL_MONEY
  CATHETERS
  MARIJUANA
  TIRE_SPIKES
  BLUE_RAY
  PET_FOOD
  ECIGARETTE_VAPE
  IMAGE_OF_MASTURBATION
  DVD
  CHLOROFORM
  ANTI_GAY
  UNVERFIED_PRICE_INFORMATION
  TOBACCO_SEEDS
  REVIEW_SHOW_WRONG_PRODUCT
  PROHIBITED_SUBSTANCE_PIPE
  BLURRED_WATERMARKS
  COMPETITOR_WATERMARK
  ODOMETER_CORRECTION_TOOLS
  PROUD_BOY_MEMORABILIA
  MISLEADING_KEY_FEATURE
  CHILD_HARNESS
  PILL_PRESSES
  HITLER_IMAGERY
  OTHER_WHITE_SUPREMACY_MEMORABILIA
  SELF_FEEDING_BABY_BOTTLE_CLIPS
  PESTICIDES
  BLURRED_TAGS
  UNAUTHROIZED_USE_WISH
  NAZI_MEMORABILIA
  HATE_SPEECH
  MAGNETS_AS_TOYS
  WATER_BEADS
  IMITATION_CURRENCY
  EXPLOSIVE_WEAPONS
  CD
  US_PROP_MONEY
  PRICE_POINT_UNREASONABLE
  CONTACT_LENS_SOLUTION
  KKK_PARAPHERNALIA
  FULLY_EXPOSED_ANUS
  BEVERAGES
  CPSC_VIOLATION
  UNVERIFIED_SHIPPING_TIME_FRAME
  MISLEADING_CLAIMS
  IMAGE_OF_PENETRATION
  CASSETTE_TAPE
  GLYPHOSATE
  CN_PROHIBITED_PRODUCT_TASERS
  GIFT_CARDS_OR_ACCESS_CODES
  PLANT_SEEDS
  FULLY_EXPOSED_GENITAL
  UNVERIFIED_FREE_SHIPPING
  STANDALONE_LITHIUM_BATTERY
  LASER_POINTERS
  VALUE_VARIANCE
  BABY_HOODED_SLEEP_PRODUCTS
  BULLION
  JAMMERS
  FIREARMS_AND_GUNS
  CHILD_CARSEAT
  CN_PROHIBITED_PRODUCT_IMITATION_FIREARMS
  SEXUAL_CONTENT_INCLUDING_MINOR
  GUN_BUILDING_KITS
  PLANT_SEED_WITH_IMPOSSIBLE_CLAIM_V2
  MISLEADING_WIG
  IMAGE_NOT_PRODUCT
  OXIMETERS
  EYELASH_GROWTH_SERUM
  FEEDBACK_ABOUT_NO_PRODUCT
  CIGARETTE
  CN_PROHIBITED_PRODUCT_BB_GUNS
  NOT_DESCRIBE_AVAILABLE_QUANTITY
  CN_PROHIBITED_PRODUCT_AIRSOFT
  HATEFUL_CORONAVIRUS_PRODUCTS
  INJECTABLE_ITEMS
  CONTAINS_HARMFUL_CONTENT
  HYPERREALISTIC_CONTENT
  SEXUALLY_EXPLICIT_MATERIAL
  SIZE_COLOR_OPTION_GAMING
  HATE_GROUPS
  QANON_MEMORABILIA
  SURPRISE_BOX
  CUSTOMER_FEEDBACK_ABOUT_FALSE_SPEC
  BUTANE
  PURCHANSED_FOLLOWERS
  MISSING_KEY_REQUIREMENTS
  GUN_SILENCERS
  CONTACTS
  TITLE_IMAGE_MISMATCH
  COCKROACH_CHALK
  HOOKAH_PEN
  VAPE_LIQUID
  DANGEROUS_CPA_VIOLATION
  AMMUNITION
}

type TaggingViolationSubcategory {
  subcategory: TaggingViolationSubReasonCode
  internalDisplayName: String!
  displayName: String
}

type TakedownRequestContestSchema {
  contestId: ObjectIdType!
  state: TakedownRequestContestState!
  source: TakedownRequestContestSource!
  product: ProductSchema!
  merchant: MerchantSchema
}

enum TakedownRequestContestSource {
  REPORTED
  NONE
  IMAGE_MATCH
}

enum TakedownRequestContestState {
  REJECTED
  APPROVED
  PENDING_REVIEW
}

type TakedownRequestMutations {
  createTakedownRequest(input: CreateTakedownRequestInput): CreateTakedownRequest
}

type TakedownRequestSchema {
  id: ObjectIdType!
  reportedDate: Datetime!
  brand: BrandSchema!
  typeOfInfringement: TypeOfInfringement!
  state: TakedownRequestState!
  notes: String
  products(offset: Int = 0, count: Int = 10, states: [TakedownRequestContestState!]): [TakedownRequestContestSchema!]!
  numProducts(states: [TakedownRequestContestState!]): Int!
  name: String
  contact: String
  email: String
  phoneNumber: String
}

enum TakedownRequestState {
  ACTIVE
  COMPLETE
  PENDING
}

type TaxAuthoritySchema {
  id: String!
  name: String!
  type: TaxAuthorityType!
  officialName: String
}

enum TaxAuthorityType {
  FCP_ST
  COUNTY_SALES_USE
  DISTRICT_FOOD_BEVERAGE
  MWST
  GST
  CITY_AMUSEMENT
  HST
  PIS
  STATE_FOOD_BEVERAGE
  GIT
  IGST
  ICMS_RD
  VAT
  IPI
  DISTRICT_SALES_USE
  DISTRICT_FEES
  TOURISM_TAX_ADDITIONAL
  COUNTY_AMUSEMENT
  NHIL
  COUNTY_RENTAL
  CITY_RENTAL
  GOODS_AND_SERVICES_TAX
  CITY_FOOD_BEVERAGE
  ITBMS
  EEE
  CITY_FEES
  ICMS_ST_CNAE_IVA
  BMP
  ADDITIONAL_FEE
  SCT
  IGV
  TOURISM_TAX
  GCT
  CSU
  CST
  THSBT
  STATE_SALES_USE
  IGI
  IVA
  MOT
  CBT
  PST
  GENERAL_SALES_AND_USE_TAX
  ISS
  ISV
  IST
  ICMS
  SUT
  COF
  COM
  ICMS_ST
  FCP
  STATE_AMUSEMENT
  COMPENSATION_CESS
  KDV
  PVM
  ICMS_ST_CNAE
  FEE
  IMI
  PDV
  ICMS_PMC
  CLT
  OMB
  TVA
  SGST
  ST
  SUFRAMA
  EXC
  MRDT
  PCL
  IGIC
  UTGST
  DISTRICT_AMUSEMENT
  IPSI
  ITBIS
  DPH
  TT
  DISTRICT_RENTAL
  COUNTY_FEES
  COUNTY_FOOD_BEVERAGE
  CGST
  CITY_SALES_USE
  CONSUMPTION_TAX
  II
  ICMS_PF
  ADDITIONAL_SALES_AND_USE_TAX
  MVA
  TELECOM
  STATE_FEES
  ICMS_CR
  QST
  STATE_RENTAL
}

type TaxConstants {
  us: USTaxConstants!
  ca: CATaxConstants!
  marketplaceCountries(includeUpcoming: Boolean = true): [TaxMarketplaceCountry!]!
  marketplaceUnions(includeUpcoming: Boolean = true): [TaxMarketplaceUnion!]!
  ukVatInfo: UKVatInfoSchema!
}

type TaxDashboardReviewMutations {
  reviewMerchantTaxIdentification(input: ReviewMerchantTaxIdentificationInput!): ReviewMerchantTaxIdentificationMutation!
}

type TaxDashboardSchema {
  usTaxIdentificationMerchants(query: String, searchType: MerchantTaxIdentificationSearchType, formType: MerchantTaxIdentificationFormType, status: MerchantTaxIdentificationStatus, offset: Int = 0, limit: Int = 20, sort: MerchantTaxIdentificationSortFieldType): [MerchantSchema!]
}

type TaxLiabilitySchema {
  userEntityTypeForRemit: KYCMerchantType
  remitType: CommerceTransactionTaxRemitType
  remitPercentage: Float
}

type TaxMarketplaceCountry {
  country: Country!
  launchDate: Datetime
}

type TaxMarketplaceUnion {
  union: Union!
  launchDate: Datetime
}

type TaxSetting {
  id: ObjectIdType!
  authority: TaxSettingAuthority!
  taxNumber: String
  taxNumberType: TaxSettingTaxNumberType
  merchantId: ObjectIdType!
  lastUpdated: Datetime!
  status: CommerceMerchantTaxInfoStatus!
  reviewStatus: CommerceMerchantReviewStatus
  certificateFileUrl: String
  taxCertificateFile: MerchantFileSchema
  ossRegistrationCountry: Country
  germanyDetails: TaxSettingGermanyDetails
  mexicoDetails: TaxSettingMexicoDetails
  taxLiability(whenShippingFromDomicileCountry: Boolean = true): [TaxLiabilitySchema!]
  euDetails: TaxSettingEUDetails
  ukDetails: TaxSettingUKDetails
}

type TaxSettingAuthority {
  displayName: String
  stateCode: String
  country: Country!
  level: TaxSettingAuthorityLevel!
}

enum TaxSettingAuthorityLevel {
  COUNTY
  CITY
  STATE
  DISTRICT
  COUNTRY
}

type TaxSettingEUDetails {
  ustSt1T1Number: String
}

type TaxSettingGermanyDetails {
  noNumberReason: CommerceMerchantTaxInfoGermanyNoNumberReason
}

type TaxSettingMexicoDetails {
  defaultShipFromIsMx: Boolean
}

enum TaxSettingTaxNumberType {
  VALUE_ADDED_TAX
  NATIONAL_INSURANCE_NUMBER
  OSS
  OTHER
  COMPANY_REGISTRITION_NUMBER
  TAX_IDENTIFICATION_NUMBER
}

type TaxSettingUKDetails {
  gbVatEntity: GBVatEntityType
}

input TaxSettingsInput {
  taxNumber: String
  countryCode: CountryCode!
  ossRegistrationCountryCode: CountryCode
  authorityLevel: TaxSettingAuthorityLevel!
  stateCode: String
  displayName: String
  taxNumberType: TaxSettingTaxNumberType
  certificateFileUrl: String
  mxDefaultShipFromIsMx: Boolean
  ustSt1T1Number: String
  gbVatEntity: GBVatEntityType
}

type TaxSettingsMutations {
  upsertTaxSettings(input: UpsertTaxSettingsInput!): UpsertTaxSettingsMutation!
}

enum TaxTargetCurrency {
  CUSTOMER
  MERCHANT
  AUTHORITY
}

enum TaxType {
  US_SC
  US_IM
  US_SA
  INTERNATIONAL_EXC
  INTERNATIONAL_ES
  US_VG
  US_MVT
  US_SV
  INTERNATIONAL_EC
  US_US
  US_UU
  INTERNATIONAL_CA1
  INTERNATIONAL_ER
  US_CU
  INTERNATIONAL_NL
  INTERNATIONAL_UN
  INTERNATIONAL_MVT
  INTERNATIONAL_SN
  US_CA
  US_BO
  INTERNATIONAL_NR
  US_UN
  INTERNATIONAL_TR
  INTERNATIONAL_US
  INTERNATIONAL_SA
  INTERNATIONAL_ZI
  INTERNATIONAL_DS
  Undefined
  US_S
  INTERNATIONAL_ZC
  INTERNATIONAL_SI
  INTERNATIONAL_ZE
  INTERNATIONAL_RC
  US_IC
  US_RC
  US_CA1
  US_GR
  US_STK
  US_RU
  INTERNATIONAL_ZR
  INTERNATIONAL_TE
  US_LT
  US_RS
  US_ZE
  INTERNATIONAL_IR
  INTERNATIONAL_IS
  INTERNATIONAL_VG
  INTERNATIONAL_AC
  INTERNATIONAL_MP
  INTERNATIONAL_CA
  INTERNATIONAL_IC
  INTERNATIONAL_STK
  INTERNATIONAL_S
  US_ZR
  US_EXC
  US_NL
  INTERNATIONAL_IM
  INTERNATIONAL_MA
}

enum TaxVerificationStatusReason {
  MISSING_OR_INCORRECT_SIGNATURE
  MISSING_OR_OUTDATED_SIGNING_DATE
  INCORRECT_NAME
  W9_ITEM_3
  W8_BEN_E_ITEM_5
  W8_BEN_E_ITEM_4
  UNCLEAR_TAX_FORM
  INCORRECT_SSN_TIN_FTIN
  INCORRECT_TAX_FORM_TYPE
  OTHERS
  CERTIFICATION_UNCHECKED
  APPROVE
}

type TaxonomyAttributeSchema {
  id: Int!
  name: String!
  values: [TaxonomyAttributeValueSchema!]
  description: String!
  dataType: AttributeDataType!
  dataTypeFormat: AttributeDataTypeFormat!
  usage: AttributeUsage!
  mode: AttributeMode!
  level: AttributeLevel!
  isVariationAttribute: Boolean!
  enabledForVariations: Boolean!
  maxMultiSelect: Int!
}

type TaxonomyAttributeValueSchema {
  id: Int!
  value: String!
}

type TaxonomyCategorySchema {
  id: String!
  name: String!
  description: String!
  categoryChildren: [TaxonomyCategorySchema!]
  categoriesAlongPath: [TaxonomyCategorySchema!]!
  categoryTreeId: Int!
  categoryTreeVersion: String!
}

type TaxonomySchema {
  category(categoryId: Int = 1, treeVersion: String): TaxonomyCategorySchema
  leafCategories(l1CategoryId: Int!, treeVersion: String): [TaxonomyCategorySchema!]
  attributes(categoryId: Int!, treeVersion: String): [TaxonomyAttributeSchema!]
  l1Categories(leafCategoryIds: [Int!], treeVersion: String): [TaxonomyCategorySchema!]
  variationOptions(categoryId: Int!, treeVersion: String): [TaxonomyAttributeSchema!]
  taxonomyTreeCsv(treeVersion: String): [[String!]!]
  categoryAttributesCsv(categoryId: Int!): [[String!]!]
}

enum TermsOfServiceRegionType {
  EU
  CN
  US
}

type TermsOfServiceSchema {
  id: ObjectIdType!
  tosType: TermsOfServiceType!
  version: Int!
  region: TermsOfServiceRegionType
  releaseDate: Datetime!
  canAccept: Boolean!
  merchantTermsOfServiceAgreement: MerchantTermsOfServiceAgreementSchema
}

enum TermsOfServiceType {
  MERCHANT
  PAYMENT_REAL_NAME_AUTH
  UPS
  MERCHANT_PARTNER
  PRODUCT_BOOST
  WISH_EXPRESS
  MERCHANT_VALIDATION
  WISH_EXPRESS_RETURN
  WPS
  EPC
}

enum TicketSearchType {
  PRODUCT_ID
  ID
  TRANSACTION_ID
  USER_NAME
  ORDER_ID
  SKU
  RETURN_ID
}

enum TicketSortFieldType {
  CREATED_TIME
  LAST_UPDATE
}

type Timedelta {
  seconds: Int!
  minutes: Float!
  hours: Float!
  days: Float!
}

type TodoItem {
  id: ObjectIdType!
  type: MerchantTodoItemType!
  sentiment: MerchantTodoItemSentiment!
  completed: Boolean!
  snoozeOptionText: String
  canSnooze: Boolean!
  snoozeCount: Int!
  snoozeHours: Int
  pinned: Boolean!
}

type TodoSchema {
  items: [TodoItem!]!
}

type TosServiceSchema {
  termsOfService(tosType: TermsOfServiceType!, version: Int, country: CountryCode): TermsOfServiceSchema
}

type TrackingCheckpointLocationSchema {
  city: String
  state: String
  country: Country
  zipcode: String
  coordinates: GeoCoordinates
}

type TrackingCheckpointResultingStateSchema {
  state: CheckpointAfterActionState!
  text: String
}

type TrackingCheckpointSchema {
  date: Datetime!
  resultingTracking: TrackingCheckpointResultingStateSchema!
  message: String
  wishpostAction: String
  type: TrackingInfoCheckpointType
  location: TrackingCheckpointLocationSchema!
}

type TrackingDisputeHub {
  disputeCount(states: [TrackingDisputeState!]!, searchType: TrackingDisputeSearchType, query: String, creationDateStart: DatetimeInput, creationDateEnd: DatetimeInput, filterWarningDisputes: Boolean = false): Int
  disputes(offset: Int = 0, limit: Int = 50, states: [TrackingDisputeState!]!, searchType: TrackingDisputeSearchType, query: String, creationDateStart: DatetimeInput, creationDateEnd: DatetimeInput, sort: DisputeSort, filterWarningDisputes: Boolean = false): [TrackingDisputeSchema!]
}

type TrackingDisputeMessageSchema {
  senderType: TrackingDisputeMessageSenderType!
  senderName: String!
  date: Datetime!
  message: String
  type: TrackingDisputeMessageType!
  files: [MerchantFileSchema!]!
  reportedFulfillmentDate: Datetime
  reportedDeliveredDate: Datetime
  reportedState: USStateCode
  reportedCountry: CountryCode
}

enum TrackingDisputeMessageSenderType {
  ADMIN
  MERCHANT
}

enum TrackingDisputeMessageType {
  ADMIN_COMMENT
  INITIATED
  REOPEN
  REPLY
  CANCELLED
  CLOSE
  APPROVED
  DECLINED
}

type TrackingDisputeSchema {
  id: ObjectIdType!
  state: TrackingDisputeState!
  orderId: ObjectIdType!
  trackingId: String
  requestReason: String!
  merchant: MerchantSchema!
  lastUpdate: Datetime
  createDate: Datetime!
  isWishExpressLate: Boolean!
  productId: ObjectIdType!
  messages: [TrackingDisputeMessageSchema!]!
  reportedFulfillmentDate: Datetime
  reportedDeliveredDate: Datetime
  reportedState: USStateCode
  reportedCountry: CountryCode
  orderInfractionDisputeSubreason: OrderInfractionDisputeSubreason
  warehouseCountry: String
  carrierSiteLink: String
  merchantNote: String
  isClosed: Boolean
  warningId: ObjectIdType
}

enum TrackingDisputeSearchType {
  ORDER_ID
  INFRACTION_ID
}

enum TrackingDisputeState {
  AWAITING_ADMIN
  CANCELLED
  AWAITING_MERCHANT
  APPROVED
  DECLINED
}

type TrackingIDFormatSchema {
  country: Country
  format: String
  example: String
}

enum TrackingInfoCheckpointType {
  SOURCE
  DESTINATION
  WISHPOST_DELEGATE
  UNKNOWN
}

type TrackingPerformanceStats {
  startDate: Datetime!
  endDate: Datetime!
  validTrackingRate: Float
  lateConfirmedFulfillmentRate: Float
  averageFulfillmentTime: Timedelta
  ordersFulfilled: Int
  averageClaimedFulfillmentTime: Timedelta
  ordersWithValidTracking: Int
  preFulfillmentCancellations: Int
  preFulfillmentCancellationRate: Float
  lateConfirmedFulfillment: Int
}

enum TrackingSourceEnum {
  TRACKINGMORE
  DHL
  CANADAPOST
  GENERIC
  ROUTE
  USPS
  WOSP
  EASYPOST
  NO_OP
  TRACK17
  LAPOSTE
  USER
  EMS
  AFTERSHIP
  WISHPOST
  CHINAPOST
  WTS
}

enum TrademarkCountryCode {
  US
  EU
  CA
  GB
  MX
  FR
  CN
  IT
  JP
  DE
  SG
  NL
  IN
  CH
  AU
  ES
  BR
  TR
  AE
}

enum TransactionPaymentType {
  BRAINTREE_FB
  UNKNOWN
  PAYPAL
  SHOPIFY_CHECKOUT
  PAYTM
  TWITTERDIRECTBUY
  KLARNA_PAYLATER
  NONE
  BRAINTREE
  AFFIRM
  EBANX
  STRIPE_SAMSUNG_PAY
  KLARNA
  AFTERPAY_CASHAPP
  PIX
  PAYNEARME
  BRAINTREE_ACH
  BRAINTREE_GOOGLE
  AFTERPAY
  XENDIT_INVOICE
  STRIPE
  BRAINTREE_PAYPAL
  OXXO
  BOKU
  ADYEN
  COMMERCE_LOAN
  OFFLINE_CASH
  STRIPE_GOOGLE
  FB_CHECKOUT
  ADYEN_BANKING
  BOLETO
  STRIPE_APPLE_PAY
  STRIPE_IDEAL
  BRAINTREE_VENMO
}

type TrueTagSchema {
  id: ObjectIdType!
  name: String!
  topLevel: TrueTagSchema
}

enum TwoFactorCodeState {
  EXPIRED
  INVALID
  OK
}

input TwoFactorGenTokenInput {
  username: String!
  isEnablingTfa: Boolean
  sendPhoneCall: Boolean
}

type TwoFactorGenTokenMutation {
  obfuscatedPhoneNumber: String
  allowTfaPhone: Boolean
  isMerchant: Boolean
  bdEmail: String
  isInternalEmployee: Boolean
  ok: Boolean!
  error: String
}

type TwoFactorMutations {
  sendCode: TwoFactorSendCodeMutation!
  verifyCode(input: TwoFactorVerifyCodeInput!): TwoFactorVerifyCodeMutation!
  turnOn(input: TwoFactorTurnOnInput!): TwoFactorTurnOnMutation!
  turnOff(input: TwoFactorTurnOffInput!): TwoFactorTurnOffMutation!
}

type TwoFactorSendCodeMutation {
  error: String
  sent: Boolean
  sentTime: Datetime
}

input TwoFactorTurnOffInput {
  code: String!
}

type TwoFactorTurnOffMutation {
  error: String
  codeState: TwoFactorCodeState
  isOn: Boolean
}

input TwoFactorTurnOnInput {
  code: String!
}

type TwoFactorTurnOnMutation {
  error: String
  codeState: TwoFactorCodeState
  isOn: Boolean
  backupCodes: [String!]
}

input TwoFactorVerifyCodeInput {
  code: String!
}

type TwoFactorVerifyCodeMutation {
  error: String
  codeState: TwoFactorCodeState
}

enum TypeOfInfringement {
  TRADEMARK_INFRINGEMENT
  COPYRIGHT
  PATENT_INFRINGEMENT
  EU_COMMUNITY_DESIGN_VIOLATION
  BRAND_PROTECTION
  RIGHT_OF_PUBLICITY
  COUNTERFEIT
}

type UIStateMutations {
  clear(input: UpdateUIStateInput!): ClearUIState!
  update(input: UpdateUIStateInput!): UpdateUIState!
  clearAll: ClearAllUIState!
}

type UIStateSchema {
  string(state: UserUIState!): String
  int(state: UserUIState!): Int
  bool(state: UserUIState!): Boolean
  stringArray(state: UserUIState!): [String!]
  intArray(state: UserUIState!): [Int!]
}

type UKVatInfoSchema {
  name: String!
  number: String!
  eoriNumber: String!
}

type UPCProductSchema {
  upc: String!
  name: String
  description: String
  variations: [UPCVariationSchema!]
  images: [String]
  brandName: String
}

type UPCProductServiceSchema {
  product(upc: String! = "Barcode of the product"): UPCProductSchema
}

type UPCVariationSchema {
  upc: String!
  size: String
  color: String
  price: CurrencyValue
  images: [String]
  productName: String
}

enum USStateCode {
  WA
  DE
  DC
  WI
  WV
  HI
  AE
  FL
  WY
  NH
  NJ
  NM
  TX
  LA
  AK
  NC
  ND
  NE
  TN
  NY
  PA
  RI
  NV
  AA
  VA
  GU
  CO
  CA
  AL
  AP
  AS
  AR
  VT
  IL
  GA
  IN
  IA
  MA
  AZ
  ID
  CT
  ME
  MD
  OK
  OH
  UT
  MO
  MN
  MI
  KS
  MT
  MP
  MS
  SC
  KY
  OR
  SD
}

type USTaxConstants {
  marketplaceStates: [String!]!
  marketplaceMunicipalities: [USTaxMarketplaceMunicipalities!]!
  nomadStates: [String!]!
  homeRuleStates: [String!]!
}

type USTaxMarketplaceMunicipalities {
  stateCode: String!
  cities: [String!]!
  counties: [String!]!
  districts: [String!]!
}

type UnclaimNotices {
  ok: Boolean!
  message: String
}

input UnclaimNoticesInput {
  noticeIds: [ObjectIdType!]!
}

type Union {
  code: String!
  name(localized: Boolean = true): String!
  countries: [Country!]
}

enum UnitCombined {
  CENTILITER
  CENTIMETER
  COUNT
  CUBICMETER
  FLUID_OUNCE
  FOOT
  GALLON
  GRAM
  INCH
  KILOGRAM
  LITER
  LOAD
  METER
  MILLIGRAM
  MILLILITER
  OUNCE
  PINT
  POD
  POUND
  QUART
  ROLL
  SQUARE_FOOT
  SQUARE_METER
  WASH
  YARD
}

type UpdateAuditQueueWarning {
  ok: Boolean!
  message: String
}

input UpdateAuditQueueWarningInput {
  action: MerchantWarningAuditAction!
  id: ObjectIdType
  ids: [ObjectIdType!]
  auditRevertReason: MerchantWarningAuditRevertReason
}

type UpdateDedupImage {
  ok: Boolean!
  message: String
}

input UpdateDedupImageInput {
  imageIds: [ObjectIdType!]!
  brandId: ObjectIdType!
}

type UpdateMerchantFinalSale {
  ok: Boolean!
  message: String
}

type UpdateMerchantGamingReviewTicket {
  ok: Boolean!
  message: String
}

type UpdateNotifier {
  ok: Boolean!
  message: String
}

input UpdateNotifierInput {
  notifierId: ObjectIdType!
  newOrganization: String
  newCountryCodes: [CountryCode!]
  newName: String
  newIsTrustedFlagger: Boolean
}

type UpdateOffsiteBoost {
  ok: Boolean!
  message: String
}

type UpdateOrderDeliveryConfirmation {
  ok: Boolean!
  errorMessage: String
}

input UpdateOrderDeliveryConfirmationInput {
  orderId: ObjectIdType!
  dateDelivered: DatetimeInput!
  trackingUrl: String
  deliveryReceiptFileUrl: String
}

input UpdatePayPalSettingInput {
  email: String!
  personalName: String!
  personalPhoneNumber: String!
  personalId: String
  businessName: String
  businessId: String
  collectorType: MerchantPaymentCollectorType!
}

type UpdatePayPalSettingMutation {
  ok: Boolean!
  message: String
  newNextPayoutTime: Datetime
}

input UpdatePayoneerSettingInput {
  personalName: String!
  personalPhoneNumber: String!
  personalId: String
  businessName: String
  businessId: String
  collectorType: MerchantPaymentCollectorType!
}

type UpdatePayoneerSettingMutation {
  ok: Boolean!
  message: String
  newNextPayoutTime: Datetime
}

input UpdatePermissionInput {
  id: String!
  permission: PermissionType!
  status: PermissionStatusType!
}

type UpdatePermissionMutation {
  ok: Boolean!
  error: String
}

type UpdateProductLogisticsMetadata {
  success: Boolean!
  errorMessage: String
}

input UpdateProductLogisticsMetadataInput {
  productId: ObjectIdType!
  variationId: ObjectIdType
  packageDimensions: PackageDimensionsInput!
}

input UpdateRoleInput {
  id: String!
  role: RoleType!
  assigned: Boolean!
}

type UpdateRoleMutation {
  ok: Boolean!
  error: String
}

type UpdateShippingProvider {
  ok: Boolean!
  message: String
  shippingProvider: ShippingProviderSchema
}

type UpdateShippingProviderName {
  ok: Boolean!
  message: String
  shippingProvider: ShippingProviderSchema
}

input UpdateShippingProviderNameInput {
  providerId: Int!
  name: String!
}

type UpdateShippingSetting {
  ok: Boolean
  message: String
  useShopifyShippingRate: Boolean
}

type UpdateSystemUpdateBaseAnnouncement {
  ok: Boolean!
  message: String
}

input UpdateSystemUpdateBaseAnnouncementInput {
  id: ObjectIdType!
  publishDate: DatetimeInput
  expiryDate: DatetimeInput
  audienceGroups: [AudienceGroup!]
  merchantIds: [ObjectIdType!]
  categories: [AnnouncementCategory!]
  program: AnnouncementProgram
  locales: [AnnouncementLocale!]
  content: [CreateAnnouncementContentSchemaInput!]
}

type UpdateUIState {
  ok: Boolean!
  message: String
}

input UpdateUIStateInput {
  state: UserUIState!
  intValue: Int
  boolValue: Boolean
  stringValue: String
  stringArrayValue: [String!]
  intArrayValue: [Int!]
}

type UpdateUin {
  ok: Boolean!
  message: String
}

input UpdateUinInput {
  id: ObjectIdType!
  responsibleEntityName: String!
  uin: String!
}

input UpdateUserInfoInput {
  id: ObjectIdType!
  firstName: String
  lastName: String
  username: String
  email: String
  bdMerchantCountry: BDMerchantCountryCodeType
  manager: ObjectIdType
  enabled: Boolean
}

type UpdateUserInfoMutation {
  ok: Boolean!
  error: String
}

input UpdateUserQueuesInput {
  id: ObjectIdType!
  queueId: ObjectIdType!
  assigned: Boolean!
}

type UpdateUserQueuesMutation {
  ok: Boolean!
  error: String
}

type UploadBankAccountDocument {
  ok: Boolean!
  message: String
}

input UploadBankAccountDocumentInput {
  bankDocFile: FileInput!
  last4Digits: String!
}

type UploadEUVATTaxQuestionnaire {
  ok: Boolean!
  errorMessage: String
}

type UploadMerchantIdentityDocument {
  ok: Boolean!
  message: String
}

input UploadMerchantIdentityDocumentInput {
  merchantIdentityDocFile: FileInput!
  verificationType: MerchantIdentityVerificationType!
  proofOfBizDocType: BusinessDocTypes!
}

type UploadMutations {
  initiateUpload(input: InitiateUploadInput!): InitiateUploadMutation
}

type UploadProductComplianceDocuments {
  ok: Boolean!
  failure: String
  fileUrls: [String!]
}

type UpsertConfirmedDeliveryCarrier {
  ok: Boolean!
  message: String
}

input UpsertDiscountCampaignInput {
  id: ObjectIdType
  name: String
  startTime: DatetimeInput
  endTime: DatetimeInput
  countries: [CountryCode!]
  discountData: [VariationDiscountDataInput!]
  eventId: ObjectIdType
}

type UpsertDiscountCampaignMutation {
  ok: Boolean!
  message: String
  campaignId: ObjectIdType
}

input UpsertFlashSaleCampaignInput {
  id: ObjectIdType
  name: String
  startTime: DatetimeInput
  endTime: DatetimeInput
  countries: [CountryCode!]
  discountData: [VariationDiscountDataInput!]
  eventId: ObjectIdType
}

type UpsertFlashSaleCampaignMutation {
  ok: Boolean!
  message: String
  campaignId: ObjectIdType
}

type UpsertFranceLinkProductCompliance {
  ok: Boolean!
  message: String
  rateLimit: Boolean
}

input UpsertFranceLinkProductComplianceInput {
  action: LinkProductComplianceAction!
  compliance: LinkProductComplianceType!
  productIds: [ObjectIdType!]
  responsiblePersonId: ObjectIdType
  uinIds: [ObjectIdType!]
  category: FranceProductUniqueIdentificationNumberCategory
}

type UpsertFranceProductUniqueIdentificationNumber {
  ok: Boolean!
  message: String
}

type UpsertGermanyLinkProductCompliance {
  ok: Boolean!
  message: String
  rateLimit: Boolean
}

input UpsertGermanyLinkProductComplianceInput {
  action: LinkProductComplianceAction!
  compliance: LinkProductComplianceType!
  productIds: [ObjectIdType!]
  responsiblePersonId: ObjectIdType
  uinIds: [ObjectIdType!]
  category: GermanyProductUniqueIdentificationNumberCategory
}

type UpsertGermanyProductUniqueIdentificationNumber {
  ok: Boolean!
  message: String
}

type UpsertLinkProductCompliance {
  ok: Boolean!
  message: String
}

type UpsertMerchantReturnSettingsMutation {
  ok: Boolean!
  message: String
}

input UpsertMerchantReturnSettingsMutationInput {
  countryCode: CountryCode!
  policyType: PolicyType!
  authType: AuthType
  warehouseId: ObjectIdType
  useWishReturnWarehouse: Boolean!
  returnDays: Int!
  productId: String
  variationId: String
}

type UpsertMerchantReturnWarehouseMutation {
  ok: Boolean!
  message: String
  id: ObjectIdType
}

input UpsertMerchantSenderAddressInput {
  merchantSenderAddressId: ObjectIdType
  warehouseName: String!
  address: AddressInput!
  isDefault: Boolean!
}

type UpsertMerchantSenderAddressMutation {
  ok: Boolean!
  message: String
  id: ObjectIdType
}

input UpsertMerchantTaxIdentificationInput {
  address: AddressInput!
  signDate: DatetimeInput!
  paymentReceiverIdentity: MerchantTaxIdentificationPaymentReceiverEntity!
  selfIdentityClassification: MerchantTaxIdentificationSelfIdentityClassification!
  firstName: String
  lastName: String
  businessName: String
  businessType: MerchantTaxIdentificationBusinessType
  employeeIdNumber: String
  foreignTaxId: String
  domicileExplanation: String
}

type UpsertMerchantTaxIdentificationMutation {
  ok: Boolean!
  errorMessage: String
}

type UpsertMerchantWarehouseMutation {
  ok: Boolean!
  message: String
  id: ObjectIdType
}

type UpsertMerchantWarning {
  ok: Boolean!
  message: String
}

input UpsertMerchantWarningInput {
  action: MerchantWarningAction!
  warningId: ObjectIdType
  messageInput: ReplyInfractionInput
  disputeInput: DisputeInfractionInput
  requestPaymentInput: RequestPaymentInput
  cancelInput: CancelInfractionInput
  claimInput: ClaimInfractionInput
  closeInput: CloseInfractionInput
}

type UpsertNote {
  ok: Boolean!
  message: String
}

input UpsertNoteInput {
  noticeId: ObjectIdType!
  note: String!
}

type UpsertOrderInfractionDispute {
  ok: Boolean!
  message: String
}

input UpsertOrderInfractionDisputeInput {
  action: OrderInfractionDisputeAction!
  orderId: ObjectIdType
  message: String
  adminMessage: String
  uploadFiles: [FileInput!]
  customerAddressProof: [FileInput!]
  invalidAddressProof: [FileInput!]
  cannedResponseId: ObjectIdType
  reportedFulfillmentDate: DatetimeInput
  reportedDeliveredDate: DatetimeInput
  reportedDestinationCountryCode: CountryCode
  reportedDestinationStateCode: USStateCode
  warehouseCountryCode: CountryCode
  shippedFromCountryCode: CountryCode
  carrierSiteLink: String
  warningId: ObjectIdType
  warningReason: MerchantWarningReason
  disputeSubreason: OrderInfractionDisputeSubreason
  newTrackingNumber: String
  reportedShippingProviderId: ObjectIdType
  id: ObjectIdType
}

type UpsertProduct {
  ok: Boolean!
  message: String
  productId: ObjectIdType
}

type UpsertProductCategoryDispute {
  ok: Boolean!
  message: String
  nextId: ObjectIdType
}

input UpsertProductCategoryDisputeInput {
  action: ProductCategoryDisputeAction!
  productId: ObjectIdType
  proposedTopCategoryTagId: ObjectIdType
  merchantNote: String
  uploadFiles: [FileInput!]
  source: ProductCategoryDisputeSource
  adminUnchangedReason: ProductCategoryDisputeAdminUnchangedReason
  reason: ProductCategoryDisputeReason
  adminUnchangedOtherReasonDetails: String
  id: ObjectIdType
}

type UpsertProducts {
  ok: Boolean!
  failures: [UpsertProductsErrorItem!]
  productIds: [ObjectIdType!]
}

type UpsertProductsErrorItem {
  productId: ObjectIdType
  message: String!
}

type UpsertProductsFromCSVFile {
  ok: Boolean!
  message: String
  jobId: ObjectIdType
}

input UpsertProductsFromCSVFileInput {
  fileUrl: String!
  columnIdList: [String!]
  feedType: ProductCSVJobType!
}

type UpsertRegulator {
  ok: Boolean!
  message: String
}

input UpsertRegulatorInput {
  action: RegulatorAction!
  countryRegionCode: CountryCode!
  organization: String!
  website: String!
  name: String!
  emailAddress: String!
  phoneNumber: String
  title: String
}

type UpsertRegulatorReport {
  ok: Boolean!
  message: String
}

input UpsertRegulatorReportInput {
  action: RegulatorReportAction!
  reason: RegulatorReportReason!
  description: String!
  supportingFiles: [FileInput!]!
  urls: [String!]!
  emailAddress: String!
  caseNumber: String
}

type UpsertResponsiblePerson {
  ok: Boolean!
  message: String
}

type UpsertRestrictedProductRequest {
  ok: Boolean!
  message: String
}

input UpsertReturnWarehouseInput {
  id: ObjectIdType
  address: AddressInput!
  name: String!
  isActive: Boolean!
}

type UpsertShippingProfile {
  ok: Boolean!
  message: String
  id: ObjectIdType
}

input UpsertTaxSettingsInput {
  settings: [TaxSettingsInput!]!
  countryOfDomicile: CountryCode!
  euStandardShipFromCc: CountryCode
  euWishExpressShipFromCc: CountryCode
}

type UpsertTaxSettingsMutation {
  ok: Boolean!
  errorMessage: String
}

type UpsertVideo {
  ok: Boolean!
  message: String
  videoId: ObjectIdType
}

input UpsertWarehouseInput {
  id: ObjectIdType
  enabledCountries: [CountryCode!]
  address: AddressInput
  name: String
  merchantFulfillmentTimeInfo: MerchantFulfillmentTimeInfoInput
}

type UpsertWebhookSubscription {
  ok: Boolean!
  message: String
}

input UpsertWebhookSubscriptionInput {
  subscriptionId: ObjectIdType
  topicId: ObjectIdType
  endpoint: String!
}

enum UserBackToOnboardingReason {
  DORMANT
  FAKE_NON_CN_NO_REAL_NAME
  REVERT_REVIEW_RESULT
  TRIGGERED_CN_VERIFICATION
}

enum UserEntityType {
  COMPANY
  INDIVIDUAL
}

type UserGateSchema {
  isAllowed(name: String!): Boolean!
}

type UserMutation {
  merchant: MerchantMutation
  uiState: UIStateMutations
  changeEmail(input: ChangeEmailInput!): ChangeEmailMutation
  password: PasswordMutations!
  twoFactorAuthentication: TwoFactorMutations!
  onboarding: UserOnboardingMutations!
  changePhoneNumber: ChangePhoneNumberMutation!
  deleteDevice(input: DeleteDeviceInput!): DeleteDeviceMutation!
  deleteAllDevices: DeleteAllDevicesMutation!
  manualLinkEntity: MerchantEntityManualLinkMutations!
}

input UserOnboardingAboutBusinessInfo {
  onboardingExistingSellingLocations: ExistingSellingLocations!
  onboardingMerchantSellerAge: String!
  onboardingAnnualRevenueRange: String!
  onboardingSkuQuantity: Int!
  onboardingProductCategory: String!
  onboardingWishLocalInterested: Boolean
  existingStoreUrl: String
  onboardingTopPerformingWebsite: String
  onboardingHasErpPartners: Boolean
}

input UserOnboardingAccountSetup {
  firstName: String!
  lastName: String!
  email: String
  storeName: String
}

type UserOnboardingAccountSetupMutation {
  ok: Boolean!
  message: String
}

input UserOnboardingBusinessInfo {
  onboardingBusinessRegistrationName: String
  onboardingBusinessRegistrationNumber: Int
  streetAddress1: String!
  streetAddress2: String
  city: String!
  state: String
  zipcode: String!
  country: CountryCode!
  countryOfDomicile: CountryCode
}

input UserOnboardingContactInfo {
  firstName: String!
  lastName: String!
  streetAddress1: String!
  streetAddress2: String
  city: String!
  state: String
  zipcode: String!
  country: CountryCode!
  phoneNumber: String!
}

type UserOnboardingMutations {
  setContactInfo(input: UserOnboardingContactInfo!): UserOnboardingSetContactInfoMutation
  setAboutBusinessInfo(input: UserOnboardingAboutBusinessInfo!): UserOnboardingSetAboutBusinessInfoMutation
  setBusinessInfo(input: UserOnboardingBusinessInfo!): UserOnboardingSetBusinessInfoMutation
  setAccountInfo(input: UserOnboardingAccountSetup!): UserOnboardingAccountSetupMutation
  verifyPhoneNumber(input: UserOnboardingVerifyPhoneNumber!): UserOnboardingVerifyPhoneNumberMutation
}

type UserOnboardingSetAboutBusinessInfoMutation {
  ok: Boolean!
  message: String
}

type UserOnboardingSetBusinessInfoMutation {
  ok: Boolean!
  message: String
}

type UserOnboardingSetContactInfoMutation {
  ok: Boolean!
  message: String
}

input UserOnboardingVerifyPhoneNumber {
  phoneNumber: String!
  byPhoneCall: Boolean
  verificationCode: String
}

type UserOnboardingVerifyPhoneNumberMutation {
  ok: Boolean!
  message: String
}

type UserSchema {
  id: ObjectIdType!
  name: String
  lastName: String
  firstName: String
  email: String!
  confirmEmailPath: String
  merchantId: ObjectIdType
  phoneNumber: String
  canEditPhoneNumber: Boolean!
  canHandleEscalatedMerchantGamingReview: Boolean!
  twoFactorEnabled: Boolean!
  businessAddress: AddressSchema
  isStoreOrMerchantUser: Boolean!
  onboarding: OnboardingSchema
  uiState: UIStateSchema
  alerts: [AlertSchema!]
  isNewNav: Boolean
  username: String!
  accountManager: UserSchema
  numCurrentDevices: Int
  currentDevices(limit: Int, skip: Int): [DeviceSchema!]!
  canAcceptMerchantTos: Boolean!
  gating: UserGateSchema!
  todo: TodoSchema!
  tfaTokenSentTime: Datetime
  entityType: UserEntityType
  isAdmin: Boolean!
  isOnCsTeam: Boolean!
  hasPermission(permissions: [PermissionType!]!): Boolean!
  hasTfaBackupCodes: Boolean!
  companyName: String
  displayName: String
  permissions(status: PermissionStatusType!): [PermissionSchema!]
  roles: [RoleSchema!]
  bdMerchantCountry: BDMerchantCountryCodeType
  manager: UserSchema
  isEnabled: Boolean!
  isSalesRep: Boolean!
  hasSeenFbwTos: Boolean!
  serviceTypes: [UserServiceType!]
  possibleManagers: [UserSchema!]
  queues(assigned: Boolean = false): [LogicalQueueSchema!]
  backToOnboardingReason: UserBackToOnboardingReason
  utmSource: String
  qqGroupNumber: String
  onboardingUrl(currentUrlPath: String!): String
  factoryManager: UserSchema
  manualMerchantConnections: [MerchantConnectionSchema!]
  canAccessHome: Boolean!
  isApiUser: Boolean!
  supportConfig: MerchantSupportConfigSchema
  oidcCredentials: [OidcCredentialSchema!]
  isBd: Boolean
}

enum UserServiceType {
  TICKET
  EMAIL
  TAGGING
}

enum UserUIState {
  STORE_TIME_SEEN_SELL_ON_WISH_BANNER
  DISMISSED_VIDEO_OPTIMIZE_TIPS
  PREFERS_OLD_NAV
  DISMISSED_FULFILLMENT_SLA_INSIGHT
  DISMISSED_FULFILLMENT_PENALTY_INSIGHT
  DISMISSED_HOW_TO_FULFILL_INSIGHT
  HAS_COMPLETED_CS_SURVEY
  HAS_SEEN_MFP_PRICE_ONLY_CAROUSEL
  HAS_SEEN_KYC_VERIFICATION_SUCCESS_MESSAGE
  DISMISSED_KYC_VERIFICATION_INTRO_BANNER
  DISMISSED_WISH_EXPRESS_INTRO_BANNER
  PREFERS_NEW_NAV
  FULFILLMENT_MOST_RECENT_ORIGIN_COUNTRIES
  DISMISSED_SWITCH_NAV_BACK_TUTORIAL
  DISMISSED_SELLER_VERIFICATION_INTRO_BANNER
  HAS_SEEN_SELLER_VERIFICATION_SUCCESS_MESSAGE
  HAS_SEEN_PB_PRODUCTS_TABLE_V2
  FULFILLMENT_MOST_RECENT_SHIPPING_PROVIDERS
}

enum UsersSortFieldType {
  USERNAME
  ID
  EMAIL
}

type VacationPauseSchema {
  primaryWarehouseOnly: Boolean!
  vacationStartDate: Datetime
  vacationEndDate: Datetime
}

type VacationSettings {
  changeVacationSettings(input: ChangeVacationSettingsInput!): ChangeVacationSettingsMutation!
  clearVacationSettings: ClearVacationSettingsMutation!
}

type VacationSettingsSchema {
  startDate: Datetime!
  endDate: Datetime!
  extensionDays: Int!
  primaryWarehouseOnly: Boolean!
}

type ValidationResultSchema {
  payableId: String!
  isEvent: Boolean!
  reason: [Reason!]!
}

type VariationDimensions {
  length: Length!
  width: Length!
  height: Length!
}

input VariationDiscountDataInput {
  productId: ObjectIdType!
  variationId: ObjectIdType!
  discountPercentage: Float!
  maxQuantity: Int
}

input VariationInput {
  id: ObjectIdType
  enabled: Boolean
  sku: String
  inventory: [InventoryInput!]
  price: CurrencyInput
  cost: CurrencyInput
  size: String
  color: String
  gtin: String
  originCountry: CountryCode
  declaredValue: CurrencyInput
  declaredName: String
  declaredLocalName: String
  pieces: Int
  image: ImageInput
  weight: WeightInput
  height: LengthInput
  length: LengthInput
  width: LengthInput
  hasPowder: Boolean
  hasLiquid: Boolean
  hasBattery: Boolean
  hasMetal: Boolean
  customsHsCode: String
  quantityWeight: WeightInput
  quantityLength: LengthInput
  quantityVolume: VolumeInput
  quantityArea: AreaInput
  quantityUnit: CountInput
  consignmentSupplyCost: Float
  attributes: [AttributeInput!]
  options: [AttributeInput!]
}

type VariationSchema {
  id: ObjectIdType!
  sku: String!
  size: String
  color: String
  productId: String!
  weight: Weight
  effectiveWeight: Weight
  height: Length
  length: Length
  width: Length
  customsHsCode: String
  gtin: String
  originCountry: Country
  declaredValue: CurrencyValue
  declaredName: String
  declaredLocalName: String
  pieces: Int
  hasPowder: Boolean
  hasLiquid: Boolean
  hasBattery: Boolean
  hasMetal: Boolean
  inventory: [InventorySchema!]!
  fbwInventory: [FBWInventorySchema!]!
  price: CurrencyValue!
  consignmentSupplyCost: CurrencyValue
  msrp: CurrencyValue
  image: ImageSchema
  enabled: Boolean
  totalInventory(shippingType: WarehouseShippingType): Int
  productName: String!
  logisticsMetadata: LogisticsMetadataSchema!
  quantityWeight: Weight
  quantityLength: Length
  quantityVolume: Volume
  quantityArea: Area
  quantityUnit: Count
  attributes: [MerchantProvidedAttributeSchema!]
  options: [MerchantProvidedAttributeSchema!]
}

enum VariationSearchType {
  PRODUCT_ID
  PRODUCT_NAME
  SKU
}

input VariationSort {
  field: VariationSortField!
  order: SortOrderType!
}

enum VariationSortField {
  ID
  INVENTORY
  SKU
}

enum VerificationFlowTypes {
  CN_FLOW
  DEFAULT_FLOW
  EEA_KYC
  SIGNUP_V3
}

input VideoCaptionSpec {
  text: String!
  location: ScreenCoordinates!
}

enum VideoCategory {
  ALL
  FASHION
  MAKEUP_AND_BEAUTY
  GADGETS
  HOME_DECOR
  KITCHEN
  HOBBIES
  TOYS
  OUTDOOR
}

type VideoLeaderboard {
  lastUpdated: Datetime!
  videos: [ProductVideo!]!
}

enum VideoMotion {
  UNKNOWN_ANIMATION
  SLOW_EXPAND
  PAN_LEFT
  PAN_RIGHT
}

type VideoMutations {
  generateVideo(input: GenerateVideoInput!): GenerateVideoMutation
  posts: ProductPostsMutations
}

type VideoPerformance {
  totalViewsPercentChange: Float!
  totalViewsV2PercentChange: Float!
  totalLikesPercentChange: Float!
  totalWatchTimePercentChange: Float!
  totalGmvPercentChange: Float!
  avgWatchTimePercentChange: Float!
  engagedViewsPercentChange: Float!
  buyerIntentPercentChange: Float!
  addToCartPercentChange: Float!
  addToCartV2PercentChange: Float!
  conversionsPercentChange: Float!
  ordersV2PercentChange: Float!
  dailyStats: [ProductVideoDailyStats!]!
}

enum VideoQualityLevel {
  UNKNOWN_LEVEL
  AVERAGE
  GOOD
  BAD
}

enum VideoSearchType {
  ID
  NAME
  PRODUCT_ID
}

input VideoSlideSpec {
  inputUrl: String!
  isVideo: Boolean!
  caption: VideoCaptionSpec!
  duration: Int!
  imageMotion: VideoMotion
}

input VideoSort {
  field: VideoSortField!
  order: SortOrderType!
}

enum VideoSortField {
  ID
}

input VideoUpsertInput {
  id: ObjectIdType
  videoUrl: String
  visibility: VideoVisibility
  productIds: [ObjectIdType!]
  title: String
  description: String
  audioStartTime: Float
  audioEndTime: Float
  audioUrl: String
}

enum VideoVisibility {
  LIVE
  UNLISTED
}

type ViewTermsOfService {
  ok: Boolean!
  message: String
}

type ViewTermsOfServiceById {
  ok: Boolean!
  message: String
}

input ViewTermsOfServiceByIdInput {
  tosId: ObjectIdType!
}

type Volume {
  value(targetUnit: VolumeUnit): Float!
  unit: VolumeUnit!
}

input VolumeInput {
  value: Float!
  unit: VolumeUnit!
}

enum VolumeUnit {
  LITER
  CENTILITER
  CUBICMETER
  FLUID_OUNCE
  GALLON
  MILLILITER
  PINT
  QUART
}

type WFPMutations {
  cancelWfpWithhold(input: CancelWFPWithholdMutationInput!): CancelWFPWithholdMutation
}

enum WFPOrderDeliveryState {
  LATE
  SIGNIFICANTLY_LATE
  UNKNOWN
  ON_TIME
  NOT_DELIVERED
}

type WFPWithholdReasonSchema {
  reason: String!
  lateDeliveryDetail: LateDeliverySchema
}

type WPSAdditionalTrackingService {
  type: WPSAvailableServices!
  name: String!
  fee: CurrencyValue
}

enum WPSAvailableServices {
  SATURDAY_DELIVERY
  ADDITIONAL_HANDLING
  BASE_SERVICE
  SIGNATURE_REQUIRED
}

type WPSFee {
  totalFee: CurrencyValue!
  itemizedCharges: [WPSItemizedCharge!]!
}

type WPSFeeAdjustment {
  creationDate: Datetime!
  amount: CurrencyValue!
  paymentId: ObjectIdType
  paymentProcessedDate: Datetime
  reason: String
}

type WPSFulfillmentInfoSchema {
  shippingOptionId: ObjectIdType
  shippingLabelDownloadLink: String
  shipmentFee: WPSFee!
  shipmentState: WPSShipmentState!
  purchaseDate: Datetime
  paymentId: ObjectIdType
  paymentProcessedDate: Datetime
  feeAdjustments: [WPSFeeAdjustment!]
}

type WPSGetShippingOptionsSchema {
  ok: Boolean!
  errorMessage: String
  shippingOptions: [WPSShippingOptionSchema!]
}

type WPSItemizedCharge {
  type: WPSAvailableServices!
  name: String!
  fee: CurrencyValue!
}

enum WPSPackageType {
  BOX
  ENVELOPE
}

enum WPSShipmentState {
  ORDER_STATE_UPLOADED
  ADJUSTED
  COMPLETE
  CREATED
  REFUNDED
  PAID
  CANCELLATION_PENDING
  FAILED
  ADJUSTMENT_PENDING
  CANCELLED
  PAYMENT_PENDING
  REFUND_PENDING
  EXPIRED
}

type WPSShippingOptionSchema {
  id: ObjectIdType!
  name: String!
  price: CurrencyValue!
  provider: WPSShippingProviderSchema!
  daysToDeliver: Int!
  maxDaysToDeliver: Int!
  minDaysToDeliver: Int!
  includesTracking: Boolean!
  isRegistered: Boolean!
  availableAdditionalServiceOptions: [WPSAdditionalTrackingService!]!
}

type WPSShippingProviderSchema {
  id: String!
  name: String!
  wpsId: ObjectIdType!
}

enum WPSTermsTypeEnum {
  UPS
  WPS
}

enum WSSDeepDivePageType {
  FULFILLMENT_SPEED
  FULFILLMENT_RATE
  VALID_TRACKING_RATE
  LOGISTICS_REFUND
}

enum WSSImpactState {
  YES
  EVALUATING
  NO
}

enum WSSLogisticsRefundReason {
  SHIPPING_TAKING_TOO_LONG
  ITEM_NEVER_ARRIVED
  MERCHANT_SENT_TO_WRONG_ADDRESS
  ITEM_RETURNED_TO_SENDER
  ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE
  NOT_QUALIFIED_SHIPPING_PROVIDER
  REPLACEMENT_NEVER_RECEIVED
  FBW_FAILED_TO_FULFILL_DUE_TO_CARRIER_RETURN
  ITEM_MARKED_DELIVERED_NOT_ALL_ITEMS_ARRIVED
  EPC_OVERWEIGHT
  EPC_OVERSIZE
  EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP
  EPC_OVERVALUE
  ITEM_HELD_AT_CUSTOMS
  USER_ENTERED_INVALID_ADDRESS
}

enum WSSMerchantLevelType {
  PLATINUM
  GOLD
  BAN
  UNASSESSED
  SILVER
  BRONZE
}

enum WSSMetricTrend {
  UNSPECIFIED
  INCREASING
  DECREASING
  SAME
}

enum WSSMetricType {
  ORDER_FULFILLMENT_RATE
  ORDER_FULFILLMENT_SPEED
  VALID_TRACKING_RATE
  AVERAGE_USER_RATING
  PRODUCT_QUALITY_REFUND
  LOGISTICS_REFUND
  PROHIBITED_PRODUCT
  MISLEADING_LISTING
  MISLEADING_TRACKING
  ORDER_CANCELLATION
  UNFULFILLED_ORDER
  LATE_CONFIRMED_FULFILLMENT
  BAD_PRODUCT_RATE
}

type WSSOrderFulfillment {
  orderId: ObjectIdType
  transactionDate: Datetime
  destination: String
  productId: ObjectIdType
  carrier: String
  fulfillmentSpeed: Timedelta
  unfulfilledReason: WSSSUnfulfilledReasons
  trackingId: ObjectIdType
  productName: String
  productImageUrl: String
}

type WSSOrderFulfillmentPage {
  totalCount: Int!
  dataSlice: [WSSOrderFulfillment!]!
}

type WSSOrderRefund {
  orderId: ObjectIdType
  transactionDate: Datetime
  carrier: String
  refundReason: ReturnRequestRefundReason
}

type WSSOrderRefundPage {
  totalCount: Int!
  dataSlice: [WSSOrderRefund!]!
}

type WSSPerformanceDeepDiveHub {
  orderUnfulfilled(offset: Int = 0, limit: Int = 5, sortField: SortOrderTransactionDateField = 1, sortOrder: SortByOrder = 2, orderIds: [ObjectIdType!] = [], unfulfilledReasons: [WSSSUnfulfilledReasons!] = [], destinations: [String!] = []): WSSOrderFulfillmentPage!
  orderInvalidTracking(offset: Int = 0, limit: Int = 5, sortField: SortOrderTransactionDateField = 1, sortOrder: SortByOrder = 2, orderIds: [ObjectIdType!] = [], destinations: [String!] = [], carriers: [String!] = []): WSSOrderFulfillmentPage!
  orderFulfillmentSpeed(offset: Int = 0, limit: Int = 5, sortField: SortOrderFulfillmentSpeed = 1, sortOrder: SortByOrder = 2, orderIds: [ObjectIdType!] = [], destinations: [String!] = [], carriers: [String!] = []): WSSOrderFulfillmentPage!
  orderLogisticsRefund(offset: Int = 0, limit: Int = 5, sortField: SortOrderTransactionDateField = 1, sortOrder: SortByOrder = 2, orderIds: [ObjectIdType!] = [], refundReasons: [WSSLogisticsRefundReason!] = [], carriers: [String!] = []): WSSOrderRefundPage!
  orderQualityRefund(offset: Int = 0, limit: Int = 5, sortField: SortOrderTransactionDateField = 1, sortOrder: SortByOrder = 2, productId: ObjectIdType, refundReasons: [WSSQualityRefundReason!] = []): WSSOrderRefundPage!
  productQualityRefund(offset: Int = 0, limit: Int = 5, sortField: SortProductQualityRefundField = 3, sortOrder: SortByOrder = 2, productIds: [ObjectIdType!] = [], isBadByRefund: Boolean = false): WSSProductRefundPage!
  productRating(offset: Int = 0, limit: Int = 5, sortField: SortProductRatingField = 4, sortOrder: SortByOrder = 1, productIds: [ObjectIdType!] = [], isBadByRating: Boolean = false): WSSProductRatingPage!
  qualityRefundBreakdown(productId: ObjectIdType): [WSSRefundBreakdown!]!
  fulfillmentRateDenominator: Int
  validTrackingRateDenominator: Int
  hasFulfillmentSpeedOrderCount: Int
  refundRateDenominator: Int
  qualityRefundCount: Int
  totalRatingsReceived: Int
  carriersInFulfillment: [String!]
  carriersInRefund: [String!]
  destinationsInFulfillment: [String!]
  carriers(pageType: WSSDeepDivePageType!): [String!]
  destinations(pageType: WSSDeepDivePageType!): [String!]
  unfulfilledReasons: [WSSSUnfulfilledReasons!]
  logisticsRefundReasons: [WSSLogisticsRefundReason!]
  qualityRefundReasons(productId: ObjectIdType!): [WSSQualityRefundReason!]
}

type WSSProductRating {
  productId: ObjectIdType!
  receivedRatings: Int!
  averageRating: Float!
  productName: String
  productImageUrl: String
}

type WSSProductRatingPage {
  totalCount: Int!
  dataSlice: [WSSProductRating!]!
}

type WSSProductRefund {
  productId: ObjectIdType!
  receivedOrders: Int!
  qualityRefundIssued: Int!
  qualityRefundRate: Float
  productName: String
  productImageUrl: String
}

type WSSProductRefundPage {
  totalCount: Int!
  dataSlice: [WSSProductRefund!]!
}

enum WSSQualityRefundReason {
  OTHER
  ITEM_IS_COUNTERFEIT
  ITEM_DOES_NOT_FIT
  RECEIVED_WRONG_ITEM
  ITEM_IS_DAMAGED
  ITEM_DOES_NOT_WORK_AS_DESCRIBED
  ITEM_DOES_NOT_MATCH_LISTING
  MISLEADING_LISTING
  ITEM_IS_DANGEROUS
  WRONG_COLOR
  ITEM_IS_POOR_QUALITY
  PRODUCT_LISTING_MISSING_INFO
  ITEM_DID_NOT_MEET_EXPECTATIONS
  EMPTY_PACKAGE
  INCORRECT_QUANTITY_OF_ITEMS
  MISSING_ITEM_OR_PARTS
  STORE_SENT_THE_WRONG_SIZE
  PRODUCT_MALFUNCTION
  RECEIVED_NOTE_FROM_MERCHANT
}

type WSSRefundBreakdown {
  productId: ObjectIdType
  reason: ReturnRequestRefundReason
  count: Int
}

enum WSSSUnfulfilledReasons {
  ORDER_CANCELLED
  ORDER_EXPIRED
  ORDER_REFUNDED
  ORDER_TRACKING_CANCELLED
}

type WSSThingsToWatch {
  metricType: WSSMetricType
  metricTrend: WSSMetricTrend
  metricValue: Float
  recordTime: Datetime
}

type WSSThingsToWatchBoard {
  dataSlice: [WSSThingsToWatch!]!
}

input WarehouseCountryShippingInput {
  shippingType: WarehouseShippingType!
  countryShipping: [CountryShippingInput!]
}

type WarehouseCountryShippingSchema {
  shippingType: WarehouseShippingType!
  countryShipping: [CountryShippingSchema!]
}

enum WarehouseShippingType {
  MERCHANT_TTD_13_DAY
  REGULAR
  MERCHANT_TTD_40_DAY
  MERCHANT_TTD_38_DAY
  MERCHANT_TTD_3_DAY
  MERCHANT_TTD_17_DAY
  MERCHANT_TTD_20_DAY
  MERCHANT_TTD_7_DAY
  MERCHANT_TTD_35_DAY
  MERCHANT_TTD_44_DAY
  MERCHANT_TTD_23_DAY
  WISH_EXPRESS_2_DAY
  MERCHANT_TTD_27_DAY
  FBW_V1_WLC
  WISH_EXPRESS
  MERCHANT_TTD_19_DAY
  MERCHANT_TTD_9_DAY
  WISH_BLUE
  MERCHANT_TTD_15_DAY
  MERCHANT_TTD_25_DAY
  MERCHANT_TTD_31_DAY
  FBW_V2_REGULAR
  MERCHANT_TTD_11_DAY
  MERCHANT_TTD_16_DAY
  MERCHANT_TTD_33_DAY
  MERCHANT_TTD_21_DAY
  MERCHANT_TTD_12_DAY
  MERCHANT_TTD_42_DAY
  MERCHANT_TTD_4_DAY
  MERCHANT_TTD_41_DAY
  FBW_V2
  MERCHANT_TTD_45_DAY
  MERCHANT_TTD_37_DAY
  FBW_V1
  MERCHANT_TTD_39_DAY
  MERCHANT_TTD_2_DAY
  MERCHANT_TTD_22_DAY
  MERCHANT_TTD_18_DAY
  MERCHANT_TTD_34_DAY
  WISH_EXPRESS_7_DAY
  FBW_V2_CALCULATED
  MERCHANT_TTD_30_DAY
  MERCHANT_TTD_10_DAY
  FBW_V2_EXPRESS
  MERCHANT_TTD_43_DAY
  MERCHANT_TTD_32_DAY
  MERCHANT_TTD_26_DAY
  MERCHANT_TTD_14_DAY
  WAIT_AND_SAVE
  MERCHANT_TTD_6_DAY
  MERCHANT_TTD_8_DAY
  MERCHANT_TTD_24_DAY
  MERCHANT_TTD_36_DAY
  MERCHANT_TTD_28_DAY
  MERCHANT_TTD_5_DAY
  MERCHANT_TTD_29_DAY
  MERCHANT_TTD_1_DAY
}

type WarehouseVerificationRequestSchema {
  id: ObjectIdType!
  documentUrls: [String!]!
  submitTime: Datetime!
  reviewTime: Datetime
  reviewerComment: String
}

enum WarehouseVerificationState {
  VERIFIED
  REJECTED
  PENDING_VERIFICATION
  INELIGIBLE
  UNSET
  UNVERIFIED
}

enum WebhookApiVersion {
  V3
}

type WebhookMutations {
  upsertSubscription(input: UpsertWebhookSubscriptionInput!): UpsertWebhookSubscription
  deleteSubscription(input: DeleteWebhookSubscriptionInput!): DeleteWebhookSubscription
  sendTestMessage(input: SendTestMessageInput!): SendTestMessage
}

type WebhookSchema {
  topics(apiVersion: WebhookApiVersion): [WebhookTopicSchema!]!
  subscriptions: [WebhookSubscriptionSchema!]
  allowWebhookUi: Boolean!
}

input WebhookSubscriptionInput {
  id: ObjectIdType!
  topic: WebhookTopicInput!
  endpoint: String!
  endpointType: SubscriptionEndpointType!
}

type WebhookSubscriptionSchema {
  id: ObjectIdType!
  topic: WebhookTopicSchema!
  endpoint: String!
  deactivated: Boolean!
  deactivateReasonBrief: String
  deactivateReasonDetail: String
}

input WebhookTopicInput {
  id: ObjectIdType!
  name: WebhookTopicName!
  apiVersion: WebhookApiVersion!
}

enum WebhookTopicName {
  ORDER_ALL
  ORDER_RELEASE
  ORDER_FULFILLMENT_DEADLINE
  ORDER_ADDRESS_CHANGE
  ORDER_PENALTY
  ORDER_TRACKING_UPDATE
  ORDER_REFUND
  ORDER_TAX
  POLICY_PENALTY_ISSUE
  POLICY_PENALTY_REVERSE
  POLICY_PENALTY_CANCEL
  TICKET_AWAITING_MERCHANT
  PRODUCT_BOOST_CAMPAIGN_STATS_UPDATE
  PRODUCT_BOOST_CAMPAIGN_CREATION
  PRODUCT_BOOST_CAMPAIGN_ATTRIBUTE_UPDATE
  PRODUCT_BOOST_CAMPAIGN_PRODUCT_STATS_UPDATE
  PRODUCT_BOOST_CAMPAIGN_PRODUCT_LOW_PERFORMANCE
  PRODUCT_BOOST_TRENDING_CATEGORIES
  PRODUCT_BOOST_ACCOUNT_BALANCE_UPDATE
  PRODUCT_UPDATE_MERCHANT
  PRODUCT_IMAGE_JOB_STATUS_UPDATE
  PRODUCT_TAGGING_UPDATE
  PRODUCT_INVENTORY_CHANGE_WISH_USER
  PRODUCT_INVENTORY_CHANGE_MERCHANT
}

type WebhookTopicSchema {
  id: ObjectIdType!
  name: WebhookTopicName!
  apiVersion: WebhookApiVersion!
}

input WechatCheckScanInput {
  qrTicket: String!
}

type WechatCheckScanMutation {
  expireIn: Int
  scanned: Boolean
  ok: Boolean!
  error: String
}

type Weight {
  value(targetUnit: WeightUnit): Float!
  unit: WeightUnit!
}

input WeightInput {
  value: Float!
  unit: WeightUnit!
}

enum WeightUnit {
  GRAM
  KILOGRAM
  MILLIGRAM
  OUNCE
  POUND
}

type WhitelistProductInfo {
  product: ProductSchema!
  variations: [VariationSchema!]!
  startTime: Datetime!
  endTime: Datetime!
}

input WhitelistProductSort {
  field: MFPWhitelistProductSortBy!
  order: SortOrderType!
}

type WishCompanyInfo {
  hqAddress: AddressSchema!
  companyOperatorName: String!
}

type WishEUVATPayerInfo {
  address: AddressSchema!
  iossNumber: String!
}

type WishExpressCountryDetails {
  supportsWishExpress: Boolean!
  expectedTimeToDoor: Int
}

type WishExpressInfoSchema {
  fulfillmentDeadline: Timedelta!
}

type WishPostShippingSchema {
  country: Country!
  maxPrice: CurrencyValue
  minPrice: CurrencyValue
}

type WishPostShippingUpdatesSchema {
  orderId: ObjectIdType!
  amount: CurrencyValue!
  date: Datetime!
  paymentDate: Datetime
  reason: String!
}

type WishSellerStandardStats {
  maturedOrderCount: Int!
  userRating: Float
  orderFultillmentRate: Float
  validTrackingRate: Float
  productQualityRefundRate: Float
  productLogisticsRefundRate: Float
  fulfillmentSpeed: Timedelta
  orderCancellationCount: Int!
  ninetyDayOrderCount: Int!
  unfulfilledOrderCount: Int!
  lateConfirmedFulfillmentCount: Int!
  misleadingTrackingCount: Int!
  prohibitedProductCount: Int!
  misleadingListingCount: Int!
  ipViolationProductCount: Int!
  repeatIpInfractionCount: Int!
  materialListingChangeCount: Int!
  date: Datetime!
  productWithOrdersCount: Int
  badProductCount: Int
  badProductRate: Float
  levelPreview: WSSMerchantLevelType
}

type WishUserSchema {
  id: ObjectIdType!
  name: String
  email: String
  signupMethod: WishUserSignupMethod
  isVerified: Boolean
  emailBouncedReason: String
}

enum WishUserSignupMethod {
  PHONE_NUMBER
  GOOGLE_PLUS
  FACEBOOK
  APPLE
  EMAIL
}

type WorkDayOverride {
  date: String!
  value: Boolean!
}

input WorkDayOverrideInput {
  date: String!
  value: Boolean!
}

type WorkdayCalender {
  monday: Boolean!
  tuesday: Boolean!
  wednesday: Boolean!
  thursday: Boolean!
  friday: Boolean!
  saturday: Boolean!
  sunday: Boolean!
}

input WorkdayCalenderInput {
  monday: Boolean!
  tuesday: Boolean!
  wednesday: Boolean!
  thursday: Boolean!
  friday: Boolean!
  saturday: Boolean!
  sunday: Boolean!
}

enum WssTier {
  PLATINUM
  GOLD
  BAN
  UNASSESSED
  SILVER
  BRONZE
}
